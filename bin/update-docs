#!/usr/bin/env php
<?php

use MLocati\PhpCsFixerConfigurator\DataExtractor;
use MLocati\PhpCsFixerConfigurator\FixerRunnerLauncher;
use MLocati\PhpCsFixerConfigurator\JsonEncoder;
use MLocati\PhpCsFixerConfigurator\Patcher;

if (PHP_VERSION_ID < 70103) {
    fwrite(STDERR, "This script must be run with PHP 7.1.3+.\n");
    exit(1);
}

set_error_handler(function ($errno, $errstr, $errfile, $errline) {
    $error = (string) $errstr;
    if ($error === '') {
        $error = "Unknown error (code {$errno})";
    }
    foreach (debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS) as $trace) {
        if (!empty($trace['file'])) {
            if (empty($trace['line'])) {
                $error .= "\n{$trace['file']}";
            } else {
                $error .= "\n{$trace['file']}:{$trace['line']}";
            }
        }
    }
    throw new RuntimeException($error);
}, -1);

function deleteFromFilesystem($path)
{
    if (is_link($path) || is_file($path)) {
        @unlink($path);
    } elseif (is_dir($path)) {
        $hDir = @opendir($path);
        while(($item = @readdir($hDir)) !== false) {
            switch ($item) {
                case '.':
                case '..':
                    break;
                default:
                    deleteFromFilesystem($path . '/' . $item);
                    break;
            }
        }
        @closedir($hDir);
        @rmdir($path);
    }
}

try {
    if (isset($argv[1])) {
        deleteFromFilesystem(dirname(__DIR__) . '/composer.json');
        deleteFromFilesystem(dirname(__DIR__) . '/composer.lock');
        deleteFromFilesystem(dirname(__DIR__) . '/vendor');
        copy(dirname(__DIR__) . '/composer-template.json', dirname(__DIR__) .  '/composer.json');
        fwrite(STDOUT, "Installing PHP-CS-Fixer version {$argv[1]}... ");
        $cmd = ['composer'];
        $cmd[] = '--prefer-lowest';
        $cmd[] = '--ignore-platform-reqs';
        $cmd[] = '--no-progress';
        $cmd[] = '--optimize-autoloader';
        $cmd[] = '--quiet';
        $cmd[] = '--no-ansi';
        $cmd[] = '--no-interaction';
        $cmd[] = '--working-dir=' . escapeshellarg(dirname(__DIR__));
        $cmd[] = 'require';
        $cmd[] = escapeshellarg("friendsofphp/php-cs-fixer:{$argv[1]}");
        $cmd[] = '2>&1';
        $output = [];
        $rc = -1;
        @exec(implode(' ', $cmd), $output, $rc);
        if ($rc !== 0) {
            fwrite(STDERR, 'composer failed: ' . trim(implode("\n", $output)) . "\n");
            exit($rc);
        }
        fwrite(STDOUT, "done.\n");
    } elseif (!file_exists(__DIR__ . '/vendor/autoload.php')) {
        fwrite(STDERR, "Dependencies not installed yet.\nPlease specify the version you want to work on.\n");
        exit(1);
    }

    require_once dirname(__DIR__) . '/php/Patcher.php';
    Patcher::withPatches(static function () {
        require_once dirname(__DIR__) . '/vendor/autoload.php';

        fwrite(STDOUT, 'Extracting data... ');
        $dataExtractor = new DataExtractor();
        $version = $dataExtractor->getVersion();
        $prevDir = getcwd();
        chdir(dirname(__DIR__) . '/vendor/friendsofphp/php-cs-fixer');
        try {
            $data = [
                'version' => $version,
                'indent' => $dataExtractor->getDefaultIndent(),
                'lineEnding' => $dataExtractor->getDefaultLineEnding(),
                'fixers' => $dataExtractor->getFixers(),
                'sets' => $dataExtractor->getSets(),
            ];
        } finally {
            chdir($prevDir);
        }
        fwrite(STDOUT, "done.\n");

        $jsDir = dirname(__DIR__) . '/docs/data';
        if (!is_dir($jsDir)) {
            mkdir($jsDir);
        }
        fwrite(STDOUT, 'Saving data... ');
        if (is_file("{$jsDir}/versions.json")) {
            $versions = @json_decode(@file_get_contents("{$jsDir}/versions.json"));
            if (!is_array($versions)) {
                fwrite(STDERR, "Error loading versions file!\n");
            }
        } else {
            $versions = [];
        }
        $encoder = new JsonEncoder();
        if (!in_array($version, $versions, true)) {
            $versions[] = $version;
            usort($versions, function ($versionA, $versionB) {
                return version_compare($versionB, $versionA);
            });
            if (@file_put_contents("{$jsDir}/versions.json", json_encode($versions, JSON_PRETTY_PRINT)) === false) {
                fwrite(STDERR, "Error saving versions file!\n");
                exit(1);
            }
        }
        if (@file_put_contents("{$jsDir}/{$version}.json", $encoder->setPrettyPrint(true)->stringify($data)) === false) {
            fwrite(STDERR, "Error saving data!\n");
            exit(1);
        }
        if (@file_put_contents("{$jsDir}/{$version}.min.json", $encoder->setPrettyPrint(false)->stringify($data)) === false) {
            fwrite(STDERR, "Error saving compressed data!\n");
            exit(1);
        }
        fwrite(STDOUT, "done.\n");
    });
} catch (RuntimeException $x) {
    fwrite(STDERR, $x->getMessage() . "\n");
    exit(1);
}

{
    "version": "2.13.3",
    "indent": "    ",
    "lineEnding": "\n",
    "fixers": {
        "align_multiline_comment": {
            "configuration": [
                {
                    "name": "comment_type",
                    "description": "Whether to fix PHPDoc comments only (`phpdocs_only`), any multi-line comment whose lines all start with an asterisk (`phpdocs_like`) or any multi-line comment (`all_multiline`).",
                    "defaultValue": "phpdocs_only",
                    "allowedValues": [
                        "phpdocs_only",
                        "phpdocs_like",
                        "all_multiline"
                    ]
                }
            ],
            "summary": "Each line of multi-line DocComments must have an asterisk [PSR-5] and must be aligned with the first one.",
            "codeSamples": [
                {
                    "from": "<?php\n    \/**\n            * This is a DOC Comment\nwith a line not prefixed with asterisk\n\n   *\/\n",
                    "to": "<?php\n    \/**\n     * This is a DOC Comment\n     * with a line not prefixed with asterisk\n     *\n     *\/\n"
                },
                {
                    "from": "<?php\n    \/*\n            * This is a doc-like multiline comment\n*\/\n",
                    "to": "<?php\n    \/*\n     * This is a doc-like multiline comment\n     *\/\n",
                    "configuration": {
                        "comment_type": "phpdocs_like"
                    }
                },
                {
                    "from": "<?php\n    \/*\n            * This is a doc-like multiline comment\nwith a line not prefixed with asterisk\n\n   *\/\n",
                    "to": "<?php\n    \/*\n     * This is a doc-like multiline comment\nwith a line not prefixed with asterisk\n\n     *\/\n",
                    "configuration": {
                        "comment_type": "all_multiline"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\AlignMultilineCommentFixer"
        },
        "array_indentation": {
            "summary": "Each element of an array must be indented exactly once.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = [\n   'bar' => [\n    'baz' => true,\n  ],\n];\n",
                    "to": "<?php\n$foo = [\n    'bar' => [\n        'baz' => true,\n    ],\n];\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\ArrayIndentationFixer"
        },
        "array_syntax": {
            "configuration": [
                {
                    "name": "syntax",
                    "description": "Whether to use the `long` or `short` array syntax.",
                    "defaultValue": "long",
                    "allowedValues": [
                        "long",
                        "short"
                    ]
                }
            ],
            "summary": "PHP arrays should be declared using the configured syntax.",
            "codeSamples": [
                {
                    "from": "<?php\n[1,2];\n",
                    "to": "<?php\narray(1,2);\n"
                },
                {
                    "from": "<?php\narray(1,2);\n",
                    "to": "<?php\n[1,2];\n",
                    "configuration": {
                        "syntax": "short"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\ArraySyntaxFixer"
        },
        "backtick_to_shell_exec": {
            "summary": "Converts backtick operators to `shell_exec` calls.",
            "description": "Conversion is done only when it is non risky, so when special chars like single-quotes, double-quotes and backticks are not used inside the command.",
            "codeSamples": [
                {
                    "from": "<?php\n$plain = `ls -lah`;\n$withVar = `ls -lah $var1 ${var2} {$var3} {$var4[0]} {$var5->call()}`;\n",
                    "to": "<?php\n$plain = shell_exec(\"ls -lah\");\n$withVar = shell_exec(\"ls -lah $var1 ${var2} {$var3} {$var4[0]} {$var5->call()}\");\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\BacktickToShellExecFixer"
        },
        "binary_operator_spaces": {
            "configuration": [
                {
                    "name": "align_double_arrow",
                    "description": "Whether to apply, remove or ignore double arrows alignment.",
                    "defaultValue": false,
                    "allowedValues": [
                        true,
                        false,
                        null
                    ]
                },
                {
                    "name": "align_equals",
                    "description": "Whether to apply, remove or ignore equals alignment.",
                    "defaultValue": false,
                    "allowedValues": [
                        true,
                        false,
                        null
                    ]
                },
                {
                    "name": "default",
                    "description": "Default fix strategy.",
                    "defaultValue": "single_space",
                    "allowedValues": [
                        "align",
                        "align_single_space",
                        "align_single_space_minimal",
                        "single_space",
                        "no_space",
                        null
                    ]
                },
                {
                    "name": "operators",
                    "description": "Dictionary of `binary operator` => `fix strategy` values that differ from the default strategy.",
                    "defaultValue": {},
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Binary operators should be surrounded by space as configured.",
            "codeSamples": [
                {
                    "from": "<?php\n$a= 1  + $b^ $d !==  $e or   $f;\n",
                    "to": "<?php\n$a = 1 + $b ^ $d !== $e or $f;\n"
                },
                {
                    "from": "<?php\n$aa=  1;\n$b=2;\n\n$c = $d    xor    $e;\n$f    -=  1;\n",
                    "to": "<?php\n$aa=  1;\n$b =2;\n\n$c = $d    xor    $e;\n$f -= 1;\n",
                    "configuration": {
                        "operators": {
                            "=": "align",
                            "xor": null
                        }
                    }
                },
                {
                    "from": "<?php\n$a = $b +=$c;\n$d = $ee+=$f;\n\n$g = $b     +=$c;\n$h = $ee+=$f;\n",
                    "to": "<?php\n$a = $b  += $c;\n$d = $ee += $f;\n\n$g = $b     += $c;\n$h = $ee    += $f;\n",
                    "configuration": {
                        "operators": {
                            "+=": "align_single_space"
                        }
                    }
                },
                {
                    "from": "<?php\n$a = $b===$c;\n$d = $f   ===  $g;\n$h = $i===  $j;\n",
                    "to": "<?php\n$a = $b === $c;\n$d = $f === $g;\n$h = $i === $j;\n",
                    "configuration": {
                        "operators": {
                            "===": "align_single_space_minimal"
                        }
                    }
                },
                {
                    "from": "<?php\n$foo = \\json_encode($bar, JSON_PRESERVE_ZERO_FRACTION | JSON_PRETTY_PRINT);\n",
                    "to": "<?php\n$foo = \\json_encode($bar, JSON_PRESERVE_ZERO_FRACTION|JSON_PRETTY_PRINT);\n",
                    "configuration": {
                        "operators": {
                            "|": "no_space"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\BinaryOperatorSpacesFixer"
        },
        "blank_line_after_namespace": {
            "summary": "There MUST be one blank line after the namespace declaration.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace Sample\\Sample;\n\n\n$a;\n",
                    "to": "<?php\nnamespace Sample\\Sample;\n\n$a;\n"
                },
                {
                    "from": "<?php\nnamespace Sample\\Sample;\nClass Test{}\n",
                    "to": "<?php\nnamespace Sample\\Sample;\n\nClass Test{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\BlankLineAfterNamespaceFixer"
        },
        "blank_line_after_opening_tag": {
            "summary": "Ensure there is no code on the same line as the PHP open tag and it is followed by a blank line.",
            "codeSamples": [
                {
                    "from": "<?php $a = 1;\n$b = 1;\n",
                    "to": "<?php\n\n$a = 1;\n$b = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\BlankLineAfterOpeningTagFixer"
        },
        "blank_line_before_return": {
            "summary": "An empty line feed should precede a return statement.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction A()\n{\n    echo 1;\n    return 1;\n}\n",
                    "to": "<?php\nfunction A()\n{\n    echo 1;\n\n    return 1;\n}\n"
                }
            ],
            "deprecated_switchTo": [
                "blank_line_before_statement"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ReturnNotation\\BlankLineBeforeReturnFixer"
        },
        "blank_line_before_statement": {
            "configuration": [
                {
                    "name": "statements",
                    "description": "List of statements which must be preceded by an empty line.",
                    "defaultValue": [
                        "break",
                        "continue",
                        "declare",
                        "return",
                        "throw",
                        "try"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "break",
                            "case",
                            "continue",
                            "declare",
                            "default",
                            "die",
                            "do",
                            "exit",
                            "for",
                            "foreach",
                            "goto",
                            "if",
                            "include",
                            "include_once",
                            "require",
                            "require_once",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "while",
                            "yield"
                        ]
                    ]
                }
            ],
            "summary": "An empty line feed must precede any configured statement.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction A() {\n    echo 1;\n    return 1;\n}\n",
                    "to": "<?php\nfunction A() {\n    echo 1;\n\n    return 1;\n}\n"
                },
                {
                    "from": "<?php\nswitch ($foo) {\n    case 42:\n        $bar->process();\n        break;\n    case 44:\n        break;\n}\n",
                    "to": "<?php\nswitch ($foo) {\n    case 42:\n        $bar->process();\n\n        break;\n    case 44:\n        break;\n}\n",
                    "configuration": {
                        "statements": [
                            "break"
                        ]
                    }
                },
                {
                    "from": "<?php\nforeach ($foo as $bar) {\n    if ($bar->isTired()) {\n        $bar->sleep();\n        continue;\n    }\n}\n",
                    "to": "<?php\nforeach ($foo as $bar) {\n    if ($bar->isTired()) {\n        $bar->sleep();\n\n        continue;\n    }\n}\n",
                    "configuration": {
                        "statements": [
                            "continue"
                        ]
                    }
                },
                {
                    "from": "<?php\nif ($foo === false) {\n    die(0);\n} else {\n    $bar = 9000;\n    die(1);\n}\n",
                    "to": "<?php\nif ($foo === false) {\n    die(0);\n} else {\n    $bar = 9000;\n\n    die(1);\n}\n",
                    "configuration": {
                        "statements": [
                            "die"
                        ]
                    }
                },
                {
                    "from": "<?php\n$i = 0;\ndo {\n    echo $i;\n} while ($i > 0);\n",
                    "to": "<?php\n$i = 0;\n\ndo {\n    echo $i;\n} while ($i > 0);\n",
                    "configuration": {
                        "statements": [
                            "do"
                        ]
                    }
                },
                {
                    "from": "<?php\nif ($foo === false) {\n    exit(0);\n} else {\n    $bar = 9000;\n    exit(1);\n}\n",
                    "to": "<?php\nif ($foo === false) {\n    exit(0);\n} else {\n    $bar = 9000;\n\n    exit(1);\n}\n",
                    "configuration": {
                        "statements": [
                            "exit"
                        ]
                    }
                },
                {
                    "from": "<?php\na:\n\nif ($foo === false) {\n    goto a;\n} else {\n    $bar = 9000;\n    goto b;\n}\n",
                    "to": "<?php\na:\n\nif ($foo === false) {\n    goto a;\n} else {\n    $bar = 9000;\n\n    goto b;\n}\n",
                    "configuration": {
                        "statements": [
                            "goto"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a = 9000;\nif (true) {\n    $foo = $bar;\n}\n",
                    "to": "<?php\n$a = 9000;\n\nif (true) {\n    $foo = $bar;\n}\n",
                    "configuration": {
                        "statements": [
                            "if"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nif (true) {\n    $foo = $bar;\n    return;\n}\n",
                    "to": "<?php\n\nif (true) {\n    $foo = $bar;\n\n    return;\n}\n",
                    "configuration": {
                        "statements": [
                            "return"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a = 9000;\nswitch ($a) {\n    case 42:\n        break;\n}\n",
                    "to": "<?php\n$a = 9000;\n\nswitch ($a) {\n    case 42:\n        break;\n}\n",
                    "configuration": {
                        "statements": [
                            "switch"
                        ]
                    }
                },
                {
                    "from": "<?php\nif (null === $a) {\n    $foo->bar();\n    throw new \\UnexpectedValueException(\"A cannot be null\");\n}\n",
                    "to": "<?php\nif (null === $a) {\n    $foo->bar();\n\n    throw new \\UnexpectedValueException(\"A cannot be null\");\n}\n",
                    "configuration": {
                        "statements": [
                            "throw"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a = 9000;\ntry {\n    $foo->bar();\n} catch (\\Exception $exception) {\n    $a = -1;\n}\n",
                    "to": "<?php\n$a = 9000;\n\ntry {\n    $foo->bar();\n} catch (\\Exception $exception) {\n    $a = -1;\n}\n",
                    "configuration": {
                        "statements": [
                            "try"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nif (true) {\n    $foo = $bar;\n    yield $foo;\n}\n",
                    "to": "<?php\n\nif (true) {\n    $foo = $bar;\n\n    yield $foo;\n}\n",
                    "configuration": {
                        "statements": [
                            "yield"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\BlankLineBeforeStatementFixer"
        },
        "braces": {
            "configuration": [
                {
                    "name": "allow_single_line_closure",
                    "description": "Whether single line lambda notation should be allowed.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "position_after_anonymous_constructs",
                    "description": "whether the opening brace should be placed on \"next\" or \"same\" line after anonymous constructs (anonymous classes and lambda functions).",
                    "defaultValue": "same",
                    "allowedValues": [
                        "next",
                        "same"
                    ]
                },
                {
                    "name": "position_after_control_structures",
                    "description": "whether the opening brace should be placed on \"next\" or \"same\" line after control structures.",
                    "defaultValue": "same",
                    "allowedValues": [
                        "next",
                        "same"
                    ]
                },
                {
                    "name": "position_after_functions_and_oop_constructs",
                    "description": "whether the opening brace should be placed on \"next\" or \"same\" line after classy constructs (non-anonymous classes, interfaces, traits, methods and non-lambda functions).",
                    "defaultValue": "next",
                    "allowedValues": [
                        "next",
                        "same"
                    ]
                }
            ],
            "summary": "The body of each structure MUST be enclosed by braces. Braces should be properly placed. Body of braces should be properly indented.",
            "codeSamples": [
                {
                    "from": "<?php\n\nclass Foo {\n    public function bar($baz) {\n        if ($baz = 900) echo \"Hello!\";\n\n        if ($baz = 9000)\n            echo \"Wait!\";\n\n        if ($baz == true)\n        {\n            echo \"Why?\";\n        }\n        else\n        {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz))\n            foreach ($baz as $b)\n            {\n                echo $b;\n            }\n    }\n}\n",
                    "to": "<?php\n\nclass Foo\n{\n    public function bar($baz)\n    {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n"
                },
                {
                    "from": "<?php\n$positive = function ($item) { return $item >= 0; };\n$negative = function ($item) {\n                return $item < 0; };\n",
                    "to": "<?php\n$positive = function ($item) { return $item >= 0; };\n$negative = function ($item) {\n    return $item < 0;\n};\n",
                    "configuration": {
                        "allow_single_line_closure": true
                    }
                },
                {
                    "from": "<?php\n\nclass Foo\n{\n    public function bar($baz)\n    {\n        if ($baz = 900) echo \"Hello!\";\n\n        if ($baz = 9000)\n            echo \"Wait!\";\n\n        if ($baz == true)\n        {\n            echo \"Why?\";\n        }\n        else\n        {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz))\n            foreach ($baz as $b)\n            {\n                echo $b;\n            }\n    }\n}\n",
                    "to": "<?php\n\nclass Foo {\n    public function bar($baz) {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n",
                    "configuration": {
                        "position_after_functions_and_oop_constructs": "same"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\BracesFixer"
        },
        "cast_spaces": {
            "configuration": [
                {
                    "name": "space",
                    "description": "spacing to apply between cast and variable.",
                    "defaultValue": "single",
                    "allowedValues": [
                        "none",
                        "single"
                    ]
                }
            ],
            "summary": "A single space or none should be between cast and variable.",
            "codeSamples": [
                {
                    "from": "<?php\n$bar = ( string )  $a;\n$foo = (int)$b;\n",
                    "to": "<?php\n$bar = (string) $a;\n$foo = (int) $b;\n"
                },
                {
                    "from": "<?php\n$bar = ( string )  $a;\n$foo = (int)$b;\n",
                    "to": "<?php\n$bar = (string) $a;\n$foo = (int) $b;\n",
                    "configuration": {
                        "space": "single"
                    }
                },
                {
                    "from": "<?php\n$bar = ( string )  $a;\n$foo = (int) $b;\n",
                    "to": "<?php\n$bar = (string)$a;\n$foo = (int)$b;\n",
                    "configuration": {
                        "space": "none"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\CastSpacesFixer"
        },
        "class_attributes_separation": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "List of classy elements; 'const', 'method', 'property'.",
                    "defaultValue": [
                        "const",
                        "method",
                        "property"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "const",
                            "method",
                            "property"
                        ]
                    ]
                }
            ],
            "summary": "Class, trait and interface elements must be separated with one blank line.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n    protected function bar()\n    {\n    }\n\n\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n\n    protected function bar()\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{private $a; \/\/ a is awesome\n    \/** second in a hour *\/\n    private $b;\n}\n",
                    "to": "<?php\nclass Sample\n{\nprivate $a; \/\/ a is awesome\n\n    \/** second in a hour *\/\n    private $b;\n}\n",
                    "configuration": {
                        "elements": [
                            "property"
                        ]
                    }
                },
                {
                    "from": "<?php\nclass Sample\n{\n    const A = 1;\n    \/** seconds in some hours *\/\n    const B = 3600;\n}\n",
                    "to": "<?php\nclass Sample\n{\n    const A = 1;\n\n    \/** seconds in some hours *\/\n    const B = 3600;\n}\n",
                    "configuration": {
                        "elements": [
                            "const"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\ClassAttributesSeparationFixer"
        },
        "class_definition": {
            "configuration": [
                {
                    "name": "multi_line_extends_each_single_line",
                    "alias": "multiLineExtendsEachSingleLine",
                    "description": "Whether definitions should be multiline.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "single_item_single_line",
                    "alias": "singleItemSingleLine",
                    "description": "Whether definitions should be single line when including a single item.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "single_line",
                    "alias": "singleLine",
                    "description": "Whether definitions should be single line.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Whitespace around the keywords of a class, trait or interfaces definition should be one space.",
            "codeSamples": [
                {
                    "from": "<?php\n\nclass  Foo  extends  Bar  implements  Baz,  BarBaz\n{\n}\n\nfinal  class  Foo  extends  Bar  implements  Baz,  BarBaz\n{\n}\n\ntrait  Foo\n{\n}\n",
                    "to": "<?php\n\nclass Foo extends Bar implements Baz, BarBaz\n{\n}\n\nfinal class Foo extends Bar implements Baz, BarBaz\n{\n}\n\ntrait Foo\n{\n}\n"
                },
                {
                    "from": "<?php\n\n$foo = new  class  extends  Bar  implements  Baz,  BarBaz {};\n",
                    "to": "<?php\n\n$foo = new class extends Bar implements Baz, BarBaz {};\n"
                },
                {
                    "from": "<?php\n\nclass Foo\nextends Bar\nimplements Baz, BarBaz\n{}\n",
                    "to": "<?php\n\nclass Foo extends Bar implements Baz, BarBaz\n{}\n",
                    "configuration": {
                        "single_line": true
                    }
                },
                {
                    "from": "<?php\n\nclass Foo\nextends Bar\nimplements Baz\n{}\n",
                    "to": "<?php\n\nclass Foo extends Bar implements Baz\n{}\n",
                    "configuration": {
                        "single_item_single_line": true
                    }
                },
                {
                    "from": "<?php\n\ninterface Bar extends\n    Bar, BarBaz, FooBarBaz\n{}\n",
                    "to": "<?php\n\ninterface Bar extends\n    Bar,\n    BarBaz,\n    FooBarBaz\n{}\n",
                    "configuration": {
                        "multi_line_extends_each_single_line": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\ClassDefinitionFixer"
        },
        "class_keyword_remove": {
            "summary": "Converts `::class` keywords to FQCN strings.",
            "codeSamples": [
                {
                    "from": "<?php\n\nuse Foo\\Bar\\Baz;\n\n$className = Baz::class;\n",
                    "to": "<?php\n\nuse Foo\\Bar\\Baz;\n\n$className = 'Foo\\Bar\\Baz';\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\ClassKeywordRemoveFixer"
        },
        "combine_consecutive_issets": {
            "summary": "Using `isset($var) &&` multiple times should be done in one call.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = isset($a) && isset($b);\n",
                    "to": "<?php\n$a = isset($a, $b)  ;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\CombineConsecutiveIssetsFixer"
        },
        "combine_consecutive_unsets": {
            "summary": "Calling `unset` on multiple items should be done in one call.",
            "codeSamples": [
                {
                    "from": "<?php\nunset($a); unset($b);\n",
                    "to": "<?php\nunset($a, $b); \n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\CombineConsecutiveUnsetsFixer"
        },
        "combine_nested_dirname": {
            "risky": true,
            "summary": "Replace multiple nested calls of `dirname` by only one call with second `$level` parameter. Requires PHP >= 7.0.",
            "riskyDescription": "Risky when the function `dirname` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\ndirname(dirname(dirname($path)));\n",
                    "to": "<?php\ndirname($path,3);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\CombineNestedDirnameFixer"
        },
        "comment_to_phpdoc": {
            "risky": true,
            "summary": "Comments with annotation should be docblock when used on structural elements.",
            "riskyDescription": "Risky as new docblocks might mean more, e.g. a Doctrine entity might have a new column in database",
            "codeSamples": [
                {
                    "from": "<?php \/* header *\/ $x = true; \/* @var bool $isFoo *\/ $isFoo = true;\n",
                    "to": "<?php \/* header *\/ $x = true; \/** @var bool $isFoo *\/ $isFoo = true;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\CommentToPhpdocFixer"
        },
        "compact_nullable_typehint": {
            "summary": "Remove extra spaces in a nullable typehint.",
            "description": "Rule is applied only in a PHP 7.1+ environment.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample(? string $str): ? string\n{}\n",
                    "to": "<?php\nfunction sample(?string $str): ?string\n{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\CompactNullableTypehintFixer"
        },
        "concat_space": {
            "configuration": [
                {
                    "name": "spacing",
                    "description": "Spacing to apply around concatenation operator.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "one",
                        "none"
                    ]
                }
            ],
            "summary": "Concatenation should be spaced according configuration.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = 'bar' . 3 . 'baz'.'qux';\n",
                    "to": "<?php\n$foo = 'bar'. 3 .'baz'.'qux';\n"
                },
                {
                    "from": "<?php\n$foo = 'bar' . 3 . 'baz'.'qux';\n",
                    "to": "<?php\n$foo = 'bar'. 3 .'baz'.'qux';\n",
                    "configuration": {
                        "spacing": "none"
                    }
                },
                {
                    "from": "<?php\n$foo = 'bar' . 3 . 'baz'.'qux';\n",
                    "to": "<?php\n$foo = 'bar' . 3 . 'baz' . 'qux';\n",
                    "configuration": {
                        "spacing": "one"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\ConcatSpaceFixer"
        },
        "date_time_immutable": {
            "risky": true,
            "summary": "Class `DateTimeImmutable` should be used instead of `DateTime`.",
            "riskyDescription": "Risky when the code relies on modifying `DateTime` objects or if any of the `date_create*` functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\nnew DateTime();\n",
                    "to": "<?php\nnew DateTimeImmutable();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassUsage\\DateTimeImmutableFixer"
        },
        "declare_equal_normalize": {
            "configuration": [
                {
                    "name": "space",
                    "description": "Spacing to apply around the equal sign.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "single",
                        "none"
                    ]
                }
            ],
            "summary": "Equal sign in declare statement should be surrounded by spaces or not following configuration.",
            "codeSamples": [
                {
                    "from": "<?php\ndeclare(ticks =  1);\n",
                    "to": "<?php\ndeclare(ticks=1);\n"
                },
                {
                    "from": "<?php\ndeclare(ticks=1);\n",
                    "to": "<?php\ndeclare(ticks = 1);\n",
                    "configuration": {
                        "space": "single"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\DeclareEqualNormalizeFixer"
        },
        "declare_strict_types": {
            "risky": true,
            "summary": "Force strict types declaration in all files. Requires PHP >= 7.0.",
            "riskyDescription": "Forcing strict types will stop non strict code from working.",
            "codeSamples": [
                {
                    "from": "<?php\n",
                    "to": "<?php declare(strict_types=1);"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Strict\\DeclareStrictTypesFixer"
        },
        "dir_constant": {
            "risky": true,
            "summary": "Replaces `dirname(__FILE__)` expression with equivalent `__DIR__` constant.",
            "riskyDescription": "Risky when the function `dirname` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = dirname(__FILE__);\n",
                    "to": "<?php\n$a = __DIR__;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\DirConstantFixer"
        },
        "doctrine_annotation_array_assignment": {
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "operator",
                    "description": "The operator to use.",
                    "defaultValue": "=",
                    "allowedValues": [
                        "=",
                        ":"
                    ]
                }
            ],
            "summary": "Doctrine annotations must use configured operator for assignment in arrays.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @Foo({bar : \"baz\"})\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo({bar = \"baz\"})\n *\/\nclass Bar {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @Foo({bar = \"baz\"})\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo({bar : \"baz\"})\n *\/\nclass Bar {}\n",
                    "configuration": {
                        "operator": ":"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationArrayAssignmentFixer"
        },
        "doctrine_annotation_braces": {
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "syntax",
                    "description": "Whether to add or remove braces.",
                    "defaultValue": "without_braces",
                    "allowedValues": [
                        "with_braces",
                        "without_braces"
                    ]
                }
            ],
            "summary": "Doctrine annotations without arguments must use the configured syntax.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo\n *\/\nclass Bar {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @Foo\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}\n",
                    "configuration": {
                        "syntax": "with_braces"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationBracesFixer"
        },
        "doctrine_annotation_indentation": {
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "indent_mixed_lines",
                    "description": "Whether to indent lines that have content before closing parenthesis.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Doctrine annotations must be indented with four spaces.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n *  @Foo(\n *   foo=\"foo\"\n *  )\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo(\n *     foo=\"foo\"\n * )\n *\/\nclass Bar {}\n"
                },
                {
                    "from": "<?php\n\/**\n *  @Foo({@Bar,\n *   @Baz})\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo({@Bar,\n *     @Baz})\n *\/\nclass Bar {}\n",
                    "configuration": {
                        "indent_mixed_lines": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationIndentationFixer"
        },
        "doctrine_annotation_spaces": {
            "configuration": [
                {
                    "name": "after_argument_assignments",
                    "description": "Whether to add, remove or ignore spaces after argument assignment operator.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "after_array_assignments_colon",
                    "description": "Whether to add, remove or ignore spaces after array assignment `:` operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "after_array_assignments_equals",
                    "description": "Whether to add, remove or ignore spaces after array assignment `=` operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "around_argument_assignments",
                    "description": "Whether to fix spaces around argument assignment operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "around_array_assignments",
                    "description": "Whether to fix spaces around array assignment operators.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "around_commas",
                    "description": "Whether to fix spaces around commas.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "around_parentheses",
                    "description": "Whether to fix spaces around parentheses.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "before_argument_assignments",
                    "description": "Whether to add, remove or ignore spaces before argument assignment operator.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "before_array_assignments_colon",
                    "description": "Whether to add, remove or ignore spaces before array `:` assignment operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "before_array_assignments_equals",
                    "description": "Whether to add, remove or ignore spaces before array `=` assignment operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Fixes spaces in Doctrine annotations.",
            "description": "There must not be any space around parentheses; commas must be preceded by no space and followed by one space; there must be no space around named arguments assignment operator; there must be one space around array assignment operator.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @Foo ( )\n *\/\nclass Bar {}\n\n\/**\n * @Foo(\"bar\" ,\"baz\")\n *\/\nclass Bar2 {}\n\n\/**\n * @Foo(foo = \"foo\", bar = {\"foo\":\"foo\", \"bar\"=\"bar\"})\n *\/\nclass Bar3 {}\n",
                    "to": "<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}\n\n\/**\n * @Foo(\"bar\", \"baz\")\n *\/\nclass Bar2 {}\n\n\/**\n * @Foo(foo=\"foo\", bar={\"foo\" : \"foo\", \"bar\" = \"bar\"})\n *\/\nclass Bar3 {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationSpacesFixer"
        },
        "elseif": {
            "summary": "The keyword `elseif` should be used instead of `else if` so that all control keywords look like single words.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($a) {\n} else if ($b) {\n}\n",
                    "to": "<?php\nif ($a) {\n} elseif ($b) {\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\ElseifFixer"
        },
        "encoding": {
            "summary": "PHP code MUST use only UTF-8 without BOM (remove BOM).",
            "codeSamples": [
                {
                    "from": "\ufeff<?php\n\necho \"Hello!\";\n",
                    "to": "<?php\n\necho \"Hello!\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\EncodingFixer"
        },
        "ereg_to_preg": {
            "risky": true,
            "summary": "Replace deprecated `ereg` regular expression functions with `preg`.",
            "riskyDescription": "Risky if the `ereg` function is overridden.",
            "codeSamples": [
                {
                    "from": "<?php $x = ereg('[A-Z]');\n",
                    "to": "<?php $x = preg_match('\/[A-Z]\/D');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\EregToPregFixer"
        },
        "error_suppression": {
            "risky": true,
            "configuration": [
                {
                    "name": "mute_deprecation_error",
                    "description": "Whether to add `@` in deprecation notices.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "noise_remaining_usages",
                    "description": "Whether to remove `@` in remaining usages.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "noise_remaining_usages_exclude",
                    "description": "List of global functions to exclude from removing `@`",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Error control operator should be added to deprecation notices and\/or removed from other cases.",
            "riskyDescription": "Risky because adding\/removing `@` might cause changes to code behaviour or if `trigger_error` function is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\ntrigger_error('Warning.', E_USER_DEPRECATED);\n",
                    "to": "<?php\n@trigger_error('Warning.', E_USER_DEPRECATED);\n"
                },
                {
                    "from": "<?php\n@mkdir($dir);\n@unlink($path);\n",
                    "to": "<?php\nmkdir($dir);\nunlink($path);\n",
                    "configuration": {
                        "noise_remaining_usages": true
                    }
                },
                {
                    "from": "<?php\n@mkdir($dir);\n@unlink($path);\n",
                    "to": "<?php\nmkdir($dir);\n@unlink($path);\n",
                    "configuration": {
                        "noise_remaining_usages": true,
                        "noise_remaining_usages_exclude": [
                            "unlink"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\ErrorSuppressionFixer"
        },
        "escape_implicit_backslashes": {
            "configuration": [
                {
                    "name": "double_quoted",
                    "description": "Whether to fix double-quoted strings.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "heredoc_syntax",
                    "description": "Whether to fix heredoc syntax.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "single_quoted",
                    "description": "Whether to fix single-quoted strings.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Escape implicit backslashes in strings and heredocs to ease the understanding of which are special chars interpreted by PHP and which not.",
            "description": "In PHP double-quoted strings and heredocs some chars like `n`, `$` or `u` have special meanings if preceded by a backslash (and some are special only if followed by other special chars), while a backslash preceding other chars are interpreted like a plain backslash. The precise list of those special chars is hard to remember and to identify quickly: this fixer escapes backslashes that do not start a special interpretation with the char after them.\nIt is possible to fix also single-quoted strings: in this case there is no special chars apart from single-quote and backslash itself, so the fixer simply ensure that all backslashes are escaped. Both single and double backslashes are allowed in single-quoted strings, so the purpose in this context is mainly to have a uniformed way to have them written all over the codebase.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\\\999\nHEREDOC;\n"
                },
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\\\" and My\\\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\\\999\nHEREDOC;\n",
                    "configuration": {
                        "single_quoted": true
                    }
                },
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\\\999\nHEREDOC;\n",
                    "configuration": {
                        "double_quoted": false
                    }
                },
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "configuration": {
                        "heredoc_syntax": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\EscapeImplicitBackslashesFixer"
        },
        "explicit_indirect_variable": {
            "summary": "Add curly braces to indirect variables to make them clear to understand. Requires PHP >= 7.0.",
            "codeSamples": [
                {
                    "from": "<?php\necho $$foo;\necho $$foo['bar'];\necho $foo->$bar['baz'];\necho $foo->$callback($baz);\n",
                    "to": "<?php\necho ${$foo};\necho ${$foo}['bar'];\necho $foo->{$bar}['baz'];\necho $foo->{$callback}($baz);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\ExplicitIndirectVariableFixer"
        },
        "explicit_string_variable": {
            "summary": "Converts implicit variables into explicit ones in double-quoted strings or heredoc syntax.",
            "description": "The reasoning behind this rule is the following:\n- When there are two valid ways of doing the same thing, using both is confusing, there should be a coding standard to follow\n- PHP manual marks `\"$var\"` syntax as implicit and `\"${var}\"` syntax as explicit: explicit code should always be preferred\n- Explicit syntax allows word concatenation inside strings, e.g. `\"${var}IsAVar\"`, implicit doesn't\n- Explicit syntax is easier to detect for IDE\/editors and therefore has colors\/hightlight with higher contrast, which is easier to read\nBacktick operator is skipped because it is harder to handle; you can use `backtick_to_shell_exec` fixer to normalize backticks to strings",
            "codeSamples": [
                {
                    "from": "<?php\n$a = \"My name is $name !\";\n$b = \"I live in $state->country !\";\n$c = \"I have $farm[0] chickens !\";\n",
                    "to": "<?php\n$a = \"My name is ${name} !\";\n$b = \"I live in {$state->country} !\";\n$c = \"I have {$farm[0]} chickens !\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\ExplicitStringVariableFixer"
        },
        "final_internal_class": {
            "risky": true,
            "configuration": [
                {
                    "name": "annotation-black-list",
                    "description": "Class level annotations tags that must be omitted to fix the class, even if all of the white list ones are used as well. (case insensitive)",
                    "defaultValue": [
                        "@final",
                        "@Entity",
                        "@ORM"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "annotation-white-list",
                    "description": "Class level annotations tags that must be set in order to fix the class. (case insensitive)",
                    "defaultValue": [
                        "@internal"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Internal classes should be `final`.",
            "riskyDescription": "Changing classes to `final` might cause code execution to break.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @internal\n *\/\nclass Sample\n{\n}\n",
                    "to": "<?php\n\/**\n * @internal\n *\/\nfinal class Sample\n{\n}\n"
                },
                {
                    "from": "<?php\n\/** @CUSTOM *\/class A{}\n",
                    "to": "<?php\n\/** @CUSTOM *\/final class A{}\n",
                    "configuration": {
                        "annotation-white-list": [
                            "@Custom"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\FinalInternalClassFixer"
        },
        "fopen_flag_order": {
            "risky": true,
            "summary": "Order the flags in `fopen` calls, `b` and `t` must be last.",
            "riskyDescription": "Risky when the function `fopen` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = fopen($foo, 'br+');\n",
                    "to": "<?php\n$a = fopen($foo, 'r+b');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FopenFlagOrderFixer"
        },
        "fopen_flags": {
            "risky": true,
            "configuration": [
                {
                    "name": "b_mode",
                    "description": "The `b` flag must be used (`true`) or omitted (`false`).",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "The flags in `fopen` calls must omit `t`, and `b` must be omitted or included consistently.",
            "riskyDescription": "Risky when the function `fopen` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = fopen($foo, 'rwt');\n",
                    "to": "<?php\n$a = fopen($foo, 'rwb');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FopenFlagsFixer"
        },
        "full_opening_tag": {
            "summary": "PHP code must use the long `<?php` tags or short-echo `<?=` tags and not other tag variations.",
            "codeSamples": [
                {
                    "from": "<?\n\necho \"Hello!\";\n",
                    "to": "<?php\n\necho \"Hello!\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\FullOpeningTagFixer"
        },
        "fully_qualified_strict_types": {
            "summary": "Transforms imported FQCN parameters and return types in function arguments to short version.",
            "codeSamples": [
                {
                    "from": "<?php\n\nuse Foo\\Bar;\n\nclass SomeClass\n{\n    public function doSomething(\\Foo\\Bar $foo)\n    {\n    }\n}\n",
                    "to": "<?php\n\nuse Foo\\Bar;\n\nclass SomeClass\n{\n    public function doSomething(Bar $foo)\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\n\nuse Foo\\Bar;\nuse Foo\\Bar\\Baz;\n\nclass SomeClass\n{\n    public function doSomething(\\Foo\\Bar $foo): \\Foo\\Bar\\Baz\n    {\n    }\n}\n",
                    "to": "<?php\n\nuse Foo\\Bar;\nuse Foo\\Bar\\Baz;\n\nclass SomeClass\n{\n    public function doSomething(Bar $foo): Baz\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\FullyQualifiedStrictTypesFixer"
        },
        "function_declaration": {
            "configuration": [
                {
                    "name": "closure_function_spacing",
                    "description": "Spacing to use before open parenthesis for closures.",
                    "defaultValue": "one",
                    "allowedValues": [
                        "none",
                        "one"
                    ]
                }
            ],
            "summary": "Spaces should be properly placed in a function declaration.",
            "codeSamples": [
                {
                    "from": "<?php\n\nclass Foo\n{\n    public static function  bar   ( $baz , $foo )\n    {\n        return false;\n    }\n}\n\nfunction  foo  ($bar, $baz)\n{\n    return false;\n}\n",
                    "to": "<?php\n\nclass Foo\n{\n    public static function bar($baz , $foo)\n    {\n        return false;\n    }\n}\n\nfunction foo($bar, $baz)\n{\n    return false;\n}\n"
                },
                {
                    "from": "<?php\n$f = function () {};\n",
                    "to": "<?php\n$f = function() {};\n",
                    "configuration": {
                        "closure_function_spacing": "none"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FunctionDeclarationFixer"
        },
        "function_to_constant": {
            "risky": true,
            "configuration": [
                {
                    "name": "functions",
                    "description": "List of function names to fix.",
                    "defaultValue": [
                        "get_class",
                        "php_sapi_name",
                        "phpversion",
                        "pi"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "get_called_class",
                            "get_class",
                            "php_sapi_name",
                            "phpversion",
                            "pi"
                        ]
                    ]
                }
            ],
            "summary": "Replace core functions calls returning constants with the constants.",
            "riskyDescription": "Risky when any of the configured functions to replace are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\necho phpversion();\necho pi();\necho php_sapi_name();\n",
                    "to": "<?php\necho PHP_VERSION;\necho M_PI;\necho PHP_SAPI;\n"
                },
                {
                    "from": "<?php\necho phpversion();\necho pi();\n",
                    "to": "<?php\necho PHP_VERSION;\necho pi();\n",
                    "configuration": {
                        "functions": [
                            "phpversion"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\FunctionToConstantFixer"
        },
        "function_typehint_space": {
            "summary": "Add missing space between function's argument and its typehint.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample(array$a)\n{}\n",
                    "to": "<?php\nfunction sample(array $a)\n{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FunctionTypehintSpaceFixer"
        },
        "general_phpdoc_annotation_remove": {
            "configuration": [
                {
                    "name": "annotations",
                    "description": "List of annotations to remove, e.g. `[\"author\"]`.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Configured annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @internal\n * @author someone\n *\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n * @internal\n *\/\nfunction foo() {}\n",
                    "configuration": {
                        "annotations": [
                            "author"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\GeneralPhpdocAnnotationRemoveFixer"
        },
        "hash_to_slash_comment": {
            "summary": "Single line comments should use double slashes `\/\/` and not hash `#`.",
            "codeSamples": [
                {
                    "from": "<?php # comment\n",
                    "to": "<?php \/\/ comment\n"
                }
            ],
            "deprecated_switchTo": [
                "single_line_comment_style"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\HashToSlashCommentFixer"
        },
        "header_comment": {
            "configuration": [
                {
                    "name": "comment_type",
                    "alias": "commentType",
                    "description": "Comment syntax type.",
                    "defaultValue": "comment",
                    "allowedValues": [
                        "PHPDoc",
                        "comment"
                    ]
                },
                {
                    "name": "header",
                    "description": "Proper header content.",
                    "allowedTypes": [
                        "string"
                    ]
                },
                {
                    "name": "location",
                    "description": "The location of the inserted header.",
                    "defaultValue": "after_declare_strict",
                    "allowedValues": [
                        "after_open",
                        "after_declare_strict"
                    ]
                },
                {
                    "name": "separate",
                    "description": "Whether the header should be separated from the file content with a new line.",
                    "defaultValue": "both",
                    "allowedValues": [
                        "both",
                        "top",
                        "bottom",
                        "none"
                    ]
                }
            ],
            "summary": "Add, replace or remove header comment.",
            "codeSamples": [
                {
                    "from": "<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "to": "<?php\ndeclare(strict_types=1);\n\n\/*\n * Made with love.\n *\/\n\nnamespace A\\B;\n\necho 1;\n",
                    "configuration": {
                        "header": "Made with love."
                    }
                },
                {
                    "from": "<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "to": "<?php\n\/**\n * Made with love.\n *\/\n\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "configuration": {
                        "header": "Made with love.",
                        "comment_type": "PHPDoc",
                        "location": "after_open",
                        "separate": "bottom"
                    }
                },
                {
                    "from": "<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "to": "<?php\ndeclare(strict_types=1);\n\n\/*\n * Made with love.\n *\/\n\nnamespace A\\B;\n\necho 1;\n",
                    "configuration": {
                        "header": "Made with love.",
                        "comment_type": "comment",
                        "location": "after_declare_strict"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\HeaderCommentFixer"
        },
        "heredoc_to_nowdoc": {
            "summary": "Convert `heredoc` to `nowdoc` where possible.",
            "codeSamples": [
                {
                    "from": "<?php $a = <<<\"TEST\"\nFoo\nTEST;\n",
                    "to": "<?php $a = <<<'TEST'\nFoo\nTEST;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\HeredocToNowdocFixer"
        },
        "implode_call": {
            "risky": true,
            "summary": "Function `implode` must be called with 2 arguments in the documented order.",
            "riskyDescription": "Risky when the function `implode` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\nimplode($pieces, '');\n",
                    "to": "<?php\nimplode('', $pieces);\n"
                },
                {
                    "from": "<?php\nimplode($pieces);\n",
                    "to": "<?php\nimplode('', $pieces);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\ImplodeCallFixer"
        },
        "include": {
            "summary": "Include\/Require and file path should be divided with a single space. File path should not be placed under brackets.",
            "codeSamples": [
                {
                    "from": "<?php\nrequire (\"sample1.php\");\nrequire_once  \"sample2.php\";\ninclude       \"sample3.php\";\ninclude_once(\"sample4.php\");\n",
                    "to": "<?php\nrequire \"sample1.php\";\nrequire_once \"sample2.php\";\ninclude \"sample3.php\";\ninclude_once \"sample4.php\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\IncludeFixer"
        },
        "increment_style": {
            "configuration": [
                {
                    "name": "style",
                    "description": "Whether to use pre- or post-increment and decrement operators.",
                    "defaultValue": "pre",
                    "allowedValues": [
                        "pre",
                        "post"
                    ]
                }
            ],
            "summary": "Pre- or post-increment and decrement operators should be used if possible.",
            "codeSamples": [
                {
                    "from": "<?php\n$a++;\n$b--;\n",
                    "to": "<?php\n++$a;\n--$b;\n"
                },
                {
                    "from": "<?php\n++$a;\n--$b;\n",
                    "to": "<?php\n$a++;\n$b--;\n",
                    "configuration": {
                        "style": "post"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\IncrementStyleFixer"
        },
        "indentation_type": {
            "summary": "Code MUST use configured indentation type.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif (true) {\n\techo 'Hello!';\n}\n",
                    "to": "<?php\n\nif (true) {\n    echo 'Hello!';\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\IndentationTypeFixer"
        },
        "is_null": {
            "risky": true,
            "configuration": [
                {
                    "name": "use_yoda_style",
                    "description": "Whether Yoda style conditions should be used.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Replaces `is_null($var)` expression with `null === $var`.",
            "riskyDescription": "Risky when the function `is_null` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = is_null($b);\n",
                    "to": "<?php\n$a = null === $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\IsNullFixer"
        },
        "line_ending": {
            "summary": "All PHP files must use same line ending.",
            "codeSamples": [
                {
                    "from": "<?php $b = \" $a \r\n 123\"; $a = <<<TEST\r\nAAAAA \r\n |\r\nTEST;\n",
                    "to": "<?php $b = \" $a \r\n 123\"; $a = <<<TEST\nAAAAA \n |\nTEST;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\LineEndingFixer"
        },
        "linebreak_after_opening_tag": {
            "summary": "Ensure there is no code on the same line as the PHP open tag.",
            "codeSamples": [
                {
                    "from": "<?php $a = 1;\n$b = 3;\n",
                    "to": "<?php\n$a = 1;\n$b = 3;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\LinebreakAfterOpeningTagFixer"
        },
        "list_syntax": {
            "configuration": [
                {
                    "name": "syntax",
                    "description": "Whether to use the `long` or `short` `list` syntax.",
                    "defaultValue": "long",
                    "allowedValues": [
                        "long",
                        "short"
                    ]
                }
            ],
            "summary": "List (`array` destructuring) assignment should be declared using the configured syntax. Requires PHP >= 7.1.",
            "codeSamples": [
                {
                    "from": "<?php\n[$sample] = $array;\n",
                    "to": "<?php\nlist($sample) = $array;\n"
                },
                {
                    "from": "<?php\nlist($sample) = $array;\n",
                    "to": "<?php\n[$sample] = $array;\n",
                    "configuration": {
                        "syntax": "short"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ListNotation\\ListSyntaxFixer"
        },
        "logical_operators": {
            "risky": true,
            "summary": "Use `&&` and `||` logical operators instead of `and` and `or`.",
            "riskyDescription": "Risky, because you must double-check if using and\/or with lower precedence was intentional.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif ($a == \"foo\" and ($b == \"bar\" or $c == \"baz\")) {\n}\n",
                    "to": "<?php\n\nif ($a == \"foo\" && ($b == \"bar\" || $c == \"baz\")) {\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\LogicalOperatorsFixer"
        },
        "lowercase_cast": {
            "summary": "Cast should be written in lower case.",
            "codeSamples": [
                {
                    "from": "<?php\n    $a = (BOOLEAN) $b;\n    $a = (BOOL) $b;\n    $a = (INTEGER) $b;\n    $a = (INT) $b;\n    $a = (DOUBLE) $b;\n    $a = (FLoaT) $b;\n    $a = (reaL) $b;\n    $a = (flOAT) $b;\n    $a = (sTRING) $b;\n    $a = (ARRAy) $b;\n    $a = (OBJect) $b;\n    $a = (UNset) $b;\n    $a = (Binary) $b;\n",
                    "to": "<?php\n    $a = (boolean) $b;\n    $a = (bool) $b;\n    $a = (integer) $b;\n    $a = (int) $b;\n    $a = (double) $b;\n    $a = (float) $b;\n    $a = (real) $b;\n    $a = (float) $b;\n    $a = (string) $b;\n    $a = (array) $b;\n    $a = (object) $b;\n    $a = (unset) $b;\n    $a = (binary) $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\LowercaseCastFixer"
        },
        "lowercase_constants": {
            "summary": "The PHP constants `true`, `false`, and `null` MUST be in lower case.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = FALSE;\n$b = True;\n$c = nuLL;\n",
                    "to": "<?php\n$a = false;\n$b = true;\n$c = null;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\LowercaseConstantsFixer"
        },
        "lowercase_keywords": {
            "summary": "PHP keywords MUST be in lower case.",
            "codeSamples": [
                {
                    "from": "<?php\n    FOREACH($a AS $B) {\n        TRY {\n            NEW $C($a, ISSET($B));\n            WHILE($B) {\n                INCLUDE \"test.php\";\n            }\n        } CATCH(\\Exception $e) {\n            EXIT(1);\n        }\n    }\n",
                    "to": "<?php\n    foreach($a as $B) {\n        try {\n            new $C($a, isset($B));\n            while($B) {\n                include \"test.php\";\n            }\n        } catch(\\Exception $e) {\n            exit(1);\n        }\n    }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\LowercaseKeywordsFixer"
        },
        "lowercase_static_reference": {
            "summary": "Class static references `self`, `static` and `parent` MUST be in lower case.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo extends Bar\n{\n    public function baz1()\n    {\n        return STATIC::baz2();\n    }\n\n    public function baz2($x)\n    {\n        return $x instanceof Self;\n    }\n\n    public function baz3(PaRent $x)\n    {\n        return true;\n    }\n}\n",
                    "to": "<?php\nclass Foo extends Bar\n{\n    public function baz1()\n    {\n        return static::baz2();\n    }\n\n    public function baz2($x)\n    {\n        return $x instanceof self;\n    }\n\n    public function baz3(parent $x)\n    {\n        return true;\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Foo extends Bar\n{\n    public function baz(?self $x) : SELF\n    {\n        return false;\n    }\n}\n",
                    "to": "<?php\nclass Foo extends Bar\n{\n    public function baz(?self $x) : self\n    {\n        return false;\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\LowercaseStaticReferenceFixer"
        },
        "magic_constant_casing": {
            "summary": "Magic constants should be referred to using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\necho __dir__;\n",
                    "to": "<?php\necho __DIR__;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\MagicConstantCasingFixer"
        },
        "magic_method_casing": {
            "summary": "Magic method definitions and calls must be using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo\n{\n    public function __Sleep()\n    {\n    }\n}\n",
                    "to": "<?php\nclass Foo\n{\n    public function __sleep()\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\n$foo->__INVOKE(1);\n",
                    "to": "<?php\n$foo->__invoke(1);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\MagicMethodCasingFixer"
        },
        "mb_str_functions": {
            "risky": true,
            "summary": "Replace non multibyte-safe functions with corresponding mb function.",
            "riskyDescription": "Risky when any of the functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = strlen($a);\n$a = strpos($a, $b);\n$a = strrpos($a, $b);\n$a = substr($a, $b);\n$a = strtolower($a);\n$a = strtoupper($a);\n$a = stripos($a, $b);\n$a = strripos($a, $b);\n$a = strstr($a, $b);\n$a = stristr($a, $b);\n$a = strrchr($a, $b);\n$a = substr_count($a, $b);\n",
                    "to": "<?php\n$a = mb_strlen($a);\n$a = mb_strpos($a, $b);\n$a = mb_strrpos($a, $b);\n$a = mb_substr($a, $b);\n$a = mb_strtolower($a);\n$a = mb_strtoupper($a);\n$a = mb_stripos($a, $b);\n$a = mb_strripos($a, $b);\n$a = mb_strstr($a, $b);\n$a = mb_stristr($a, $b);\n$a = mb_strrchr($a, $b);\n$a = mb_substr_count($a, $b);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\MbStrFunctionsFixer"
        },
        "method_argument_space": {
            "configuration": [
                {
                    "name": "ensure_fully_multiline",
                    "description": "ensure every argument of a multiline argument list is on its own line",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "keep_multiple_spaces_after_comma",
                    "description": "Whether keep multiple spaces after comma.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "on_multiline",
                    "description": "Defines how to handle function arguments lists that contain newlines.",
                    "defaultValue": "ignore",
                    "allowedValues": [
                        "ignore",
                        "ensure_single_line",
                        "ensure_fully_multiline"
                    ]
                }
            ],
            "summary": "In method arguments and method call, there MUST NOT be a space before each comma and there MUST be one space after each comma. Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);\n"
                },
                {
                    "from": "<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);\n",
                    "configuration": {
                        "keep_multiple_spaces_after_comma": false
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1,  2);\n",
                    "configuration": {
                        "keep_multiple_spaces_after_comma": true
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,\n    2);\n",
                    "to": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline"
                    }
                },
                {
                    "from": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);\n",
                    "configuration": {
                        "on_multiline": "ensure_single_line"
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,  \n    2);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');\n",
                    "to": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline",
                        "keep_multiple_spaces_after_comma": true
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,  \n    2);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');\n",
                    "to": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\nsample('foo', 'foobarbaz', 'baz');\nsample('foobar', 'bar', 'baz');\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline",
                        "keep_multiple_spaces_after_comma": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\MethodArgumentSpaceFixer"
        },
        "method_chaining_indentation": {
            "summary": "Method chaining MUST be properly indented. Method chaining with different levels of indentation is not supported.",
            "codeSamples": [
                {
                    "from": "<?php\n$user->setEmail('voff.web@gmail.com')\n         ->setPassword('233434');\n",
                    "to": "<?php\n$user->setEmail('voff.web@gmail.com')\n    ->setPassword('233434');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\MethodChainingIndentationFixer"
        },
        "method_separation": {
            "summary": "Methods must be separated with one blank line.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n    protected function bar()\n    {\n    }\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n\n    protected function bar()\n    {\n    }\n}\n"
                }
            ],
            "deprecated_switchTo": [
                "class_attributes_separation"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\MethodSeparationFixer"
        },
        "modernize_types_casting": {
            "risky": true,
            "summary": "Replaces `intval`, `floatval`, `doubleval`, `strval` and `boolval` function calls with according type casting operator.",
            "riskyDescription": "Risky if any of the functions `intval`, `floatval`, `doubleval`, `strval` or `boolval` are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n    $a = intval($b);\n    $a = floatval($b);\n    $a = doubleval($b);\n    $a = strval ($b);\n    $a = boolval($b);\n",
                    "to": "<?php\n    $a = (int) $b;\n    $a = (float) $b;\n    $a = (float) $b;\n    $a = (string) $b;\n    $a = (bool) $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\ModernizeTypesCastingFixer"
        },
        "multiline_comment_opening_closing": {
            "summary": "DocBlocks must start with two asterisks, multiline comments must start with a single asterisk, after the opening slash. Both must end with a single asterisk before the closing slash.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\/******\n * Multiline comment with arbitrary asterisks count\n ******\/\n\n\/**\\\n * Multiline comment that seems a DocBlock\n *\/\n\n\/**\n * DocBlock with arbitrary asterisk count at the end\n **\/\n",
                    "to": "<?php\n\n\/*\n * Multiline comment with arbitrary asterisks count\n *\/\n\n\/*\\\n * Multiline comment that seems a DocBlock\n *\/\n\n\/**\n * DocBlock with arbitrary asterisk count at the end\n *\/\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\MultilineCommentOpeningClosingFixer"
        },
        "multiline_whitespace_before_semicolons": {
            "configuration": [
                {
                    "name": "strategy",
                    "description": "Forbid multi-line whitespace or move the semicolon to the new line for chained calls.",
                    "defaultValue": "no_multi_line",
                    "allowedValues": [
                        "no_multi_line",
                        "new_line_for_chained_calls"
                    ]
                }
            ],
            "summary": "Forbid multi-line whitespace before the closing semicolon or move the semicolon to the new line for chained calls.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo () {\n    return 1 + 2\n        ;\n}\n",
                    "to": "<?php\nfunction foo () {\n    return 1 + 2;\n}\n"
                },
                {
                    "from": "<?php\n                        $this->method1()\n                            ->method2()\n                            ->method(3);\n                    ?>\n",
                    "to": "<?php\n                        $this->method1()\n                            ->method2()\n                            ->method(3)\n;\n                    ?>\n",
                    "configuration": {
                        "strategy": "new_line_for_chained_calls"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\MultilineWhitespaceBeforeSemicolonsFixer"
        },
        "native_constant_invocation": {
            "risky": true,
            "configuration": [
                {
                    "name": "exclude",
                    "description": "List of constants to ignore.",
                    "defaultValue": [
                        "null",
                        "false",
                        "true"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "fix_built_in",
                    "description": "Whether to fix constants returned by `get_defined_constants`. User constants are not accounted in this list and must be specified in the include one.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "include",
                    "description": "List of additional constants to fix.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "scope",
                    "description": "Only fix constant invocations that are made within a namespace or fix all.",
                    "defaultValue": "all",
                    "allowedValues": [
                        "all",
                        "namespaced"
                    ]
                }
            ],
            "summary": "Add leading `\\` before constant invocation of internal constant to speed up resolving. Constant name match is case-sensitive, except for `null`, `false` and `true`.",
            "riskyDescription": "Risky when any of the constants are namespaced or overridden.",
            "codeSamples": [
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(\\PHP_VERSION, \\M_PI, MY_CUSTOM_PI);\n"
                },
                {
                    "from": "<?php\nnamespace space1 {\n    echo PHP_VERSION;\n}\nnamespace {\n    echo M_PI;\n}\n",
                    "to": "<?php\nnamespace space1 {\n    echo \\PHP_VERSION;\n}\nnamespace {\n    echo M_PI;\n}\n",
                    "configuration": {
                        "scope": "namespaced"
                    }
                },
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(\\PHP_VERSION, \\M_PI, \\MY_CUSTOM_PI);\n",
                    "configuration": {
                        "include": [
                            "MY_CUSTOM_PI"
                        ]
                    }
                },
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(PHP_VERSION, M_PI, \\MY_CUSTOM_PI);\n",
                    "configuration": {
                        "fix_built_in": false,
                        "include": [
                            "MY_CUSTOM_PI"
                        ]
                    }
                },
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(\\PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "configuration": {
                        "exclude": [
                            "M_PI"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ConstantNotation\\NativeConstantInvocationFixer"
        },
        "native_function_casing": {
            "summary": "Function defined by PHP should be called using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\nSTRLEN($str);\n",
                    "to": "<?php\nstrlen($str);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\NativeFunctionCasingFixer"
        },
        "native_function_invocation": {
            "risky": true,
            "configuration": [
                {
                    "name": "exclude",
                    "description": "List of functions to ignore.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "include",
                    "description": "List of function names or sets to fix. Defined sets are `@internal` (all native functions), `@all` (all global functions) and `@compiler_optimized` (functions that are specially optimized by Zend).",
                    "defaultValue": [
                        "@internal"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "scope",
                    "description": "Only fix function calls that are made within a namespace or fix all.",
                    "defaultValue": "all",
                    "allowedValues": [
                        "all",
                        "namespaced"
                    ]
                }
            ],
            "summary": "Add leading `\\` before function invocation to speed up resolving.",
            "riskyDescription": "Risky when any of the functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n\nfunction baz($options)\n{\n    if (!array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}\n",
                    "to": "<?php\n\nfunction baz($options)\n{\n    if (!\\array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return \\json_encode($options);\n}\n"
                },
                {
                    "from": "<?php\n\nfunction baz($options)\n{\n    if (!array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}\n",
                    "to": "<?php\n\nfunction baz($options)\n{\n    if (!\\array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}\n",
                    "configuration": {
                        "exclude": [
                            "json_encode"
                        ]
                    }
                },
                {
                    "from": "<?php\nnamespace space1 {\n    echo count([1]);\n}\nnamespace {\n    echo count([1]);\n}\n",
                    "to": "<?php\nnamespace space1 {\n    echo \\count([1]);\n}\nnamespace {\n    echo \\count([1]);\n}\n",
                    "configuration": {
                        "scope": "all"
                    }
                },
                {
                    "from": "<?php\nnamespace space1 {\n    echo count([1]);\n}\nnamespace {\n    echo count([1]);\n}\n",
                    "to": "<?php\nnamespace space1 {\n    echo \\count([1]);\n}\nnamespace {\n    echo count([1]);\n}\n",
                    "configuration": {
                        "scope": "namespaced"
                    }
                },
                {
                    "from": "<?php\nmyGlobalFunction();\ncount();\n",
                    "to": "<?php\n\\myGlobalFunction();\ncount();\n",
                    "configuration": {
                        "include": [
                            "myGlobalFunction"
                        ]
                    }
                },
                {
                    "from": "<?php\nmyGlobalFunction();\ncount();\n",
                    "to": "<?php\n\\myGlobalFunction();\n\\count();\n",
                    "configuration": {
                        "include": [
                            "@all"
                        ]
                    }
                },
                {
                    "from": "<?php\nmyGlobalFunction();\ncount();\n",
                    "to": "<?php\nmyGlobalFunction();\n\\count();\n",
                    "configuration": {
                        "include": [
                            "@internal"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a .= str_repeat($a, 4);\n$c = get_class($d);\n",
                    "to": "<?php\n$a .= str_repeat($a, 4);\n$c = \\get_class($d);\n",
                    "configuration": {
                        "include": [
                            "@compiler_optimized"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NativeFunctionInvocationFixer"
        },
        "new_with_braces": {
            "summary": "All instances created with new keyword must be followed by braces.",
            "codeSamples": [
                {
                    "from": "<?php $x = new X;\n",
                    "to": "<?php $x = new X();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NewWithBracesFixer"
        },
        "no_alias_functions": {
            "risky": true,
            "configuration": [
                {
                    "name": "sets",
                    "description": "List of sets to fix. Defined sets are `@internal` (native functions), `@IMAP` (IMAP functions), `@mbreg` (from `ext-mbstring`) `@all` (all listed sets).",
                    "defaultValue": [
                        "@internal",
                        "@IMAP"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "@internal",
                            "@IMAP",
                            "@mbreg",
                            "@all"
                        ]
                    ]
                }
            ],
            "summary": "Master functions shall be used instead of aliases.",
            "riskyDescription": "Risky when any of the alias functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = chop($b);\nclose($b);\n$a = doubleval($b);\n$a = fputs($b, $c);\nini_alter($b, $c);\n$a = is_double($b);\n$a = is_integer($b);\n$a = is_long($b);\n$a = is_real($b);\n$a = is_writeable($b);\n$a = join($glue, $pieces);\n$a = key_exists($key, $array);\nmagic_quotes_runtime($new_setting);\n$a = pos($array);\n$a = show_source($filename, true);\n$a = sizeof($b);\n$a = strchr($haystack, $needle);\n$a = imap_header($imap_stream, 1);\nmbereg_search_getregs();\n",
                    "to": "<?php\n$a = rtrim($b);\nclosedir($b);\n$a = floatval($b);\n$a = fwrite($b, $c);\nini_set($b, $c);\n$a = is_float($b);\n$a = is_int($b);\n$a = is_int($b);\n$a = is_float($b);\n$a = is_writable($b);\n$a = implode($glue, $pieces);\n$a = array_key_exists($key, $array);\nset_magic_quotes_runtime($new_setting);\n$a = current($array);\n$a = highlight_file($filename, true);\n$a = count($b);\n$a = strstr($haystack, $needle);\n$a = imap_headerinfo($imap_stream, 1);\nmbereg_search_getregs();\n"
                },
                {
                    "from": "<?php\n$a = is_double($b);\nmbereg_search_getregs();\n",
                    "to": "<?php\n$a = is_double($b);\nmb_ereg_search_getregs();\n",
                    "configuration": {
                        "sets": [
                            "@mbreg"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\NoAliasFunctionsFixer"
        },
        "no_alternative_syntax": {
            "summary": "Replace control structure alternative syntax to use braces.",
            "codeSamples": [
                {
                    "from": "<?php\nif(true):echo 't';else:echo 'f';endif;\n",
                    "to": "<?php\nif(true) { echo 't';} else { echo 'f';}\n"
                },
                {
                    "from": "<?php\nwhile(true):echo 'red';endwhile;\n",
                    "to": "<?php\nwhile(true) { echo 'red';}\n"
                },
                {
                    "from": "<?php\nfor(;;):echo 'xc';endfor;\n",
                    "to": "<?php\nfor(;;) { echo 'xc';}\n"
                },
                {
                    "from": "<?php\nforeach(array('a') as $item):echo 'xc';endforeach;\n",
                    "to": "<?php\nforeach(array('a') as $item) { echo 'xc';}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoAlternativeSyntaxFixer"
        },
        "no_binary_string": {
            "summary": "There should not be a binary flag before strings.",
            "codeSamples": [
                {
                    "from": "<?php $a = b'foo';\n",
                    "to": "<?php $a = 'foo';\n"
                },
                {
                    "from": "<?php $a = b<<<EOT\nfoo\nEOT;\n",
                    "to": "<?php $a = <<<EOT\nfoo\nEOT;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\NoBinaryStringFixer"
        },
        "no_blank_lines_after_class_opening": {
            "summary": "There should be no empty lines after class opening brace.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n\n    protected function foo()\n    {\n    }\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoBlankLinesAfterClassOpeningFixer"
        },
        "no_blank_lines_after_phpdoc": {
            "summary": "There should not be blank lines between docblock and the documented element.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\/**\n * This is the bar class.\n *\/\n\n\nclass Bar {}\n",
                    "to": "<?php\n\n\/**\n * This is the bar class.\n *\/\nclass Bar {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\NoBlankLinesAfterPhpdocFixer"
        },
        "no_blank_lines_before_namespace": {
            "summary": "There should be no blank lines before a namespace declaration.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\n\nnamespace Example;\n",
                    "to": "<?php\nnamespace Example;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\NoBlankLinesBeforeNamespaceFixer"
        },
        "no_break_comment": {
            "configuration": [
                {
                    "name": "comment_text",
                    "description": "The text to use in the added comment and to detect it.",
                    "defaultValue": "no break",
                    "allowedTypes": [
                        "string"
                    ]
                }
            ],
            "summary": "There must be a comment when fall-through is intentional in a non-empty case body.",
            "description": "Adds a \"no break\" comment before fall-through cases, and removes it if there is no fall-through.",
            "codeSamples": [
                {
                    "from": "<?php\nswitch ($foo) {\n    case 1:\n        foo();\n    case 2:\n        bar();\n        \/\/ no break\n        break;\n    case 3:\n        baz();\n}\n",
                    "to": "<?php\nswitch ($foo) {\n    case 1:\n        foo();\n        \/\/ no break\n    case 2:\n        bar();\n        break;\n    case 3:\n        baz();\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoBreakCommentFixer"
        },
        "no_closing_tag": {
            "summary": "The closing `?>` tag MUST be omitted from files containing only PHP.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n}\n?>\n",
                    "to": "<?php\nclass Sample\n{\n}"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\NoClosingTagFixer"
        },
        "no_empty_comment": {
            "summary": "There should not be any empty comments.",
            "codeSamples": [
                {
                    "from": "<?php\n\/\/\n#\n\/* *\/\n",
                    "to": "<?php\n\n\n\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\NoEmptyCommentFixer"
        },
        "no_empty_phpdoc": {
            "summary": "There should not be empty PHPDoc blocks.",
            "codeSamples": [
                {
                    "from": "<?php \/**  *\/\n",
                    "to": "<?php \n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\NoEmptyPhpdocFixer"
        },
        "no_empty_statement": {
            "summary": "Remove useless semicolon statements.",
            "codeSamples": [
                {
                    "from": "<?php $a = 1;;\n",
                    "to": "<?php $a = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\NoEmptyStatementFixer"
        },
        "no_extra_blank_lines": {
            "configuration": [
                {
                    "name": "tokens",
                    "description": "List of tokens to fix.",
                    "defaultValue": [
                        "extra"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "break",
                            "case",
                            "continue",
                            "curly_brace_block",
                            "default",
                            "extra",
                            "parenthesis_brace_block",
                            "return",
                            "square_brace_block",
                            "switch",
                            "throw",
                            "use",
                            "useTrait",
                            "use_trait"
                        ]
                    ]
                }
            ],
            "summary": "Removes extra blank lines and\/or blank lines following configuration.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";\n",
                    "to": "<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";\n"
                },
                {
                    "from": "<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n\n    case 42:\n        break;\n}\n",
                    "to": "<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n    case 42:\n        break;\n}\n",
                    "configuration": {
                        "tokens": [
                            "break"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n\n    }\n}\n",
                    "to": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n    }\n}\n",
                    "configuration": {
                        "tokens": [
                            "continue"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n\n    echo $i;\n\n}\n",
                    "to": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    echo $i;\n}\n",
                    "configuration": {
                        "tokens": [
                            "curly_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";\n",
                    "to": "<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";\n",
                    "configuration": {
                        "tokens": [
                            "extra"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = array(\n\n    \"foo\"\n\n);\n",
                    "to": "<?php\n\n$foo = array(\n    \"foo\"\n);\n",
                    "configuration": {
                        "tokens": [
                            "parenthesis_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfunction foo($bar)\n{\n    return $bar;\n\n}\n",
                    "to": "<?php\n\nfunction foo($bar)\n{\n    return $bar;\n}\n",
                    "configuration": {
                        "tokens": [
                            "return"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = [\n\n    \"foo\"\n\n];\n",
                    "to": "<?php\n\n$foo = [\n    \"foo\"\n];\n",
                    "configuration": {
                        "tokens": [
                            "square_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n\n}\n",
                    "to": "<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n}\n",
                    "configuration": {
                        "tokens": [
                            "throw"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\n\nuse Baz\\Bar;\n\nclass Bar\n{\n}\n",
                    "to": "<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\nuse Baz\\Bar;\n\nclass Bar\n{\n}\n",
                    "configuration": {
                        "tokens": [
                            "use"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nclass Foo\n{\n    use Bar;\n\n    use Baz;\n}\n",
                    "to": "<?php\n\nclass Foo\n{\n    use Bar;\n    use Baz;\n}\n",
                    "configuration": {
                        "tokens": [
                            "use_trait"
                        ]
                    }
                },
                {
                    "from": "<?php\nswitch($a) {\n\n    case 1:\n\n    default:\n\n        echo 3;\n}\n",
                    "to": "<?php\nswitch($a) {\n    case 1:\n    default:\n        echo 3;\n}\n",
                    "configuration": {
                        "tokens": [
                            "switch",
                            "case",
                            "default"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoExtraBlankLinesFixer"
        },
        "no_extra_consecutive_blank_lines": {
            "configuration": [
                {
                    "name": "tokens",
                    "description": "List of tokens to fix.",
                    "defaultValue": [
                        "extra"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "break",
                            "case",
                            "continue",
                            "curly_brace_block",
                            "default",
                            "extra",
                            "parenthesis_brace_block",
                            "return",
                            "square_brace_block",
                            "switch",
                            "throw",
                            "use",
                            "useTrait",
                            "use_trait"
                        ]
                    ]
                }
            ],
            "summary": "Removes extra blank lines and\/or blank lines following configuration.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";\n",
                    "to": "<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";\n"
                },
                {
                    "from": "<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n\n    case 42:\n        break;\n}\n",
                    "to": "<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n    case 42:\n        break;\n}\n",
                    "configuration": {
                        "tokens": [
                            "break"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n\n    }\n}\n",
                    "to": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n    }\n}\n",
                    "configuration": {
                        "tokens": [
                            "continue"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n\n    echo $i;\n\n}\n",
                    "to": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    echo $i;\n}\n",
                    "configuration": {
                        "tokens": [
                            "curly_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";\n",
                    "to": "<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";\n",
                    "configuration": {
                        "tokens": [
                            "extra"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = array(\n\n    \"foo\"\n\n);\n",
                    "to": "<?php\n\n$foo = array(\n    \"foo\"\n);\n",
                    "configuration": {
                        "tokens": [
                            "parenthesis_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfunction foo($bar)\n{\n    return $bar;\n\n}\n",
                    "to": "<?php\n\nfunction foo($bar)\n{\n    return $bar;\n}\n",
                    "configuration": {
                        "tokens": [
                            "return"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = [\n\n    \"foo\"\n\n];\n",
                    "to": "<?php\n\n$foo = [\n    \"foo\"\n];\n",
                    "configuration": {
                        "tokens": [
                            "square_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n\n}\n",
                    "to": "<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n}\n",
                    "configuration": {
                        "tokens": [
                            "throw"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\n\nuse Baz\\Bar;\n\nclass Bar\n{\n}\n",
                    "to": "<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\nuse Baz\\Bar;\n\nclass Bar\n{\n}\n",
                    "configuration": {
                        "tokens": [
                            "use"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nclass Foo\n{\n    use Bar;\n\n    use Baz;\n}\n",
                    "to": "<?php\n\nclass Foo\n{\n    use Bar;\n    use Baz;\n}\n",
                    "configuration": {
                        "tokens": [
                            "use_trait"
                        ]
                    }
                },
                {
                    "from": "<?php\nswitch($a) {\n\n    case 1:\n\n    default:\n\n        echo 3;\n}\n",
                    "to": "<?php\nswitch($a) {\n    case 1:\n    default:\n        echo 3;\n}\n",
                    "configuration": {
                        "tokens": [
                            "switch",
                            "case",
                            "default"
                        ]
                    }
                }
            ],
            "deprecated_switchTo": [
                "no_extra_blank_lines"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoExtraConsecutiveBlankLinesFixer"
        },
        "no_homoglyph_names": {
            "risky": true,
            "summary": "Replace accidental usage of homoglyphs (non ascii characters) in names.",
            "riskyDescription": "Renames classes and cannot rename the files. You might have string references to renamed code (`$$name`).",
            "codeSamples": [
                {
                    "from": "<?php $n\u0430m\u0435 = 'wrong \"a\" character';\n",
                    "to": "<?php $name = 'wrong \"a\" character';\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Naming\\NoHomoglyphNamesFixer"
        },
        "no_leading_import_slash": {
            "summary": "Remove leading slashes in `use` clauses.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace Foo;\nuse \\Bar;\n",
                    "to": "<?php\nnamespace Foo;\nuse Bar;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\NoLeadingImportSlashFixer"
        },
        "no_leading_namespace_whitespace": {
            "summary": "The namespace declaration line shouldn't contain leading whitespace.",
            "codeSamples": [
                {
                    "from": "<?php\n namespace Test8a;\n    namespace Test8b;\n",
                    "to": "<?php\nnamespace Test8a;\nnamespace Test8b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\NoLeadingNamespaceWhitespaceFixer"
        },
        "no_mixed_echo_print": {
            "configuration": [
                {
                    "name": "use",
                    "description": "The desired language construct.",
                    "defaultValue": "echo",
                    "allowedValues": [
                        "print",
                        "echo"
                    ]
                }
            ],
            "summary": "Either language construct `print` or `echo` should be used.",
            "codeSamples": [
                {
                    "from": "<?php print 'example';\n",
                    "to": "<?php echo 'example';\n"
                },
                {
                    "from": "<?php echo('example');\n",
                    "to": "<?php print('example');\n",
                    "configuration": {
                        "use": "print"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\NoMixedEchoPrintFixer"
        },
        "no_multiline_whitespace_around_double_arrow": {
            "summary": "Operator `=>` should not be surrounded by multi-line whitespaces.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = array(1\n\n=> 2);\n",
                    "to": "<?php\n$a = array(1 => 2);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NoMultilineWhitespaceAroundDoubleArrowFixer"
        },
        "no_multiline_whitespace_before_semicolons": {
            "summary": "Multi-line whitespace before closing semicolon are prohibited.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo () {\n    return 1 + 2\n        ;\n}\n",
                    "to": "<?php\nfunction foo () {\n    return 1 + 2;\n}\n"
                }
            ],
            "deprecated_switchTo": [
                "multiline_whitespace_before_semicolons"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\NoMultilineWhitespaceBeforeSemicolonsFixer"
        },
        "no_null_property_initialization": {
            "summary": "Properties MUST not be explicitly initialized with `null`.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo {\n    public $foo = null;\n}\n",
                    "to": "<?php\nclass Foo {\n    public $foo;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoNullPropertyInitializationFixer"
        },
        "no_php4_constructor": {
            "risky": true,
            "summary": "Convert PHP4-style constructors to `__construct`.",
            "riskyDescription": "Risky when old style constructor being fixed is overridden or overrides parent one.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo\n{\n    public function Foo($bar)\n    {\n    }\n}\n",
                    "to": "<?php\nclass Foo\n{\n    public function __construct($bar)\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoPhp4ConstructorFixer"
        },
        "no_short_bool_cast": {
            "summary": "Short cast `bool` using double exclamation mark should not be used.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = !!$b;\n",
                    "to": "<?php\n$a = (bool)$b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\NoShortBoolCastFixer"
        },
        "no_short_echo_tag": {
            "summary": "Replace short-echo `<?=` with long format `<?php echo` syntax.",
            "codeSamples": [
                {
                    "from": "<?= \"foo\";\n",
                    "to": "<?php echo \"foo\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\NoShortEchoTagFixer"
        },
        "no_singleline_whitespace_before_semicolons": {
            "summary": "Single-line whitespace before closing semicolon are prohibited.",
            "codeSamples": [
                {
                    "from": "<?php $this->foo() ;\n",
                    "to": "<?php $this->foo();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\NoSinglelineWhitespaceBeforeSemicolonsFixer"
        },
        "no_spaces_after_function_name": {
            "summary": "When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis.",
            "codeSamples": [
                {
                    "from": "<?php\nrequire ('sample.php');\necho (test (3));\nexit  (1);\n$func ();\n",
                    "to": "<?php\nrequire('sample.php');\necho(test(3));\nexit(1);\n$func();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NoSpacesAfterFunctionNameFixer"
        },
        "no_spaces_around_offset": {
            "configuration": [
                {
                    "name": "positions",
                    "description": "Whether spacing should be fixed inside and\/or outside the offset braces.",
                    "defaultValue": [
                        "inside",
                        "outside"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "inside",
                            "outside"
                        ]
                    ]
                }
            ],
            "summary": "There MUST NOT be spaces around offset braces.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = $b [ 'a' ] [ 'b' ];\n",
                    "to": "<?php\n$sample = $b['a']['b'];\n"
                },
                {
                    "from": "<?php\n$sample = $b [ 'a' ] [ 'b' ];\n",
                    "to": "<?php\n$sample = $b ['a'] ['b'];\n",
                    "configuration": {
                        "positions": [
                            "inside"
                        ]
                    }
                },
                {
                    "from": "<?php\n$sample = $b [ 'a' ] [ 'b' ];\n",
                    "to": "<?php\n$sample = $b[ 'a' ][ 'b' ];\n",
                    "configuration": {
                        "positions": [
                            "outside"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoSpacesAroundOffsetFixer"
        },
        "no_spaces_inside_parenthesis": {
            "summary": "There MUST NOT be a space after the opening parenthesis. There MUST NOT be a space before the closing parenthesis.",
            "codeSamples": [
                {
                    "from": "<?php\nif ( $a ) {\n    foo( );\n}\n",
                    "to": "<?php\nif ($a) {\n    foo();\n}\n"
                },
                {
                    "from": "<?php\nfunction foo( $bar, $baz )\n{\n}\n",
                    "to": "<?php\nfunction foo($bar, $baz)\n{\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoSpacesInsideParenthesisFixer"
        },
        "no_superfluous_elseif": {
            "summary": "Replaces superfluous `elseif` with `if`.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($a) {\n    return 1;\n} elseif ($b) {\n    return 2;\n}\n",
                    "to": "<?php\nif ($a) {\n    return 1;\n}\nif ($b) {\n    return 2;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoSuperfluousElseifFixer"
        },
        "no_superfluous_phpdoc_tags": {
            "summary": "Removes `@param` and `@return` tags that don't provide any useful information.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo {\n    \/**\n     * @param Bar $bar\n     *\/\n    public function doFoo(Bar $bar) {}\n}\n",
                    "to": "<?php\nclass Foo {\n    \/**\n     *\/\n    public function doFoo(Bar $bar) {}\n}\n"
                },
                {
                    "from": "<?php\nclass Foo {\n    \/**\n     * @param Bar $bar\n     *\n     * @return Baz\n     *\/\n    public function doFoo(Bar $bar): Baz {}\n}\n",
                    "to": "<?php\nclass Foo {\n    \/**\n     *\n     *\/\n    public function doFoo(Bar $bar): Baz {}\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\NoSuperfluousPhpdocTagsFixer"
        },
        "no_trailing_comma_in_list_call": {
            "summary": "Remove trailing commas in list function calls.",
            "codeSamples": [
                {
                    "from": "<?php\nlist($a, $b,) = foo();\n",
                    "to": "<?php\nlist($a, $b) = foo();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoTrailingCommaInListCallFixer"
        },
        "no_trailing_comma_in_singleline_array": {
            "summary": "PHP single-line arrays should not have trailing comma.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = array('sample',  );\n",
                    "to": "<?php\n$a = array('sample');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NoTrailingCommaInSinglelineArrayFixer"
        },
        "no_trailing_whitespace": {
            "summary": "Remove trailing whitespace at the end of non-blank lines.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = 1;     \n",
                    "to": "<?php\n$a = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoTrailingWhitespaceFixer"
        },
        "no_trailing_whitespace_in_comment": {
            "summary": "There MUST be no trailing spaces inside comment or PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/\/ This is \n\/\/ a comment. \n",
                    "to": "<?php\n\/\/ This is\n\/\/ a comment.\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\NoTrailingWhitespaceInCommentFixer"
        },
        "no_unneeded_control_parentheses": {
            "configuration": [
                {
                    "name": "statements",
                    "description": "List of control statements to fix.",
                    "defaultValue": [
                        "break",
                        "clone",
                        "continue",
                        "echo_print",
                        "return",
                        "switch_case",
                        "yield"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Removes unneeded parentheses around control statements.",
            "codeSamples": [
                {
                    "from": "<?php\nwhile ($x) { while ($y) { break (2); } }\nclone($a);\nwhile ($y) { continue (2); }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n",
                    "to": "<?php\nwhile ($x) { while ($y) { break 2; } }\nclone $a;\nwhile ($y) { continue 2; }\necho \"foo\";\nprint \"foo\";\nreturn 1 + 2;\nswitch ($a) { case $x; }\nyield 2;\n"
                },
                {
                    "from": "<?php\nwhile ($x) { while ($y) { break (2); } }\nclone($a);\nwhile ($y) { continue (2); }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n",
                    "to": "<?php\nwhile ($x) { while ($y) { break 2; } }\nclone($a);\nwhile ($y) { continue 2; }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n",
                    "configuration": {
                        "statements": [
                            "break",
                            "continue"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoUnneededControlParenthesesFixer"
        },
        "no_unneeded_curly_braces": {
            "summary": "Removes unneeded curly braces that are superfluous and aren't part of a control structure's body.",
            "codeSamples": [
                {
                    "from": "<?php {\n    echo 1;\n}\n\nswitch ($b) {\n    case 1: {\n        break;\n    }\n}\n",
                    "to": "<?php \n    echo 1;\n\n\nswitch ($b) {\n    case 1: \n        break;\n    \n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoUnneededCurlyBracesFixer"
        },
        "no_unneeded_final_method": {
            "summary": "A final class must not have final methods.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Foo {\n    final public function foo() {}\n    final protected function bar() {}\n    final private function baz() {}\n}\n",
                    "to": "<?php\nfinal class Foo {\n    public function foo() {}\n    protected function bar() {}\n    private function baz() {}\n}\n"
                },
                {
                    "from": "<?php\nclass Foo {\n    final private function bar() {}\n}\n",
                    "to": "<?php\nclass Foo {\n    private function bar() {}\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoUnneededFinalMethodFixer"
        },
        "no_unreachable_default_argument_value": {
            "risky": true,
            "summary": "In function arguments there must not be arguments with default values before non-default ones.",
            "riskyDescription": "Modifies the signature of functions; therefore risky when using systems (such as some Symfony components) that rely on those (for example through reflection).",
            "codeSamples": [
                {
                    "from": "<?php\nfunction example($foo = \"two words\", $bar) {}\n",
                    "to": "<?php\nfunction example($foo, $bar) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NoUnreachableDefaultArgumentValueFixer"
        },
        "no_unset_on_property": {
            "risky": true,
            "summary": "Properties should be set to `null` instead of using `unset`.",
            "riskyDescription": "Changing variables to `null` instead of unsetting them will mean they still show up when looping over class variables.",
            "codeSamples": [
                {
                    "from": "<?php\nunset($this->a);\n",
                    "to": "<?php\n$this->a = null;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\NoUnsetOnPropertyFixer"
        },
        "no_unused_imports": {
            "summary": "Unused `use` statements must be removed.",
            "codeSamples": [
                {
                    "from": "<?php\nuse \\DateTime;\nuse \\Exception;\n\nnew DateTime();\n",
                    "to": "<?php\nuse \\DateTime;\n\nnew DateTime();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\NoUnusedImportsFixer"
        },
        "no_useless_else": {
            "summary": "There should not be useless `else` cases.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($a) {\n    return 1;\n} else {\n    return 2;\n}\n",
                    "to": "<?php\nif ($a) {\n    return 1;\n}  \n    return 2;\n\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoUselessElseFixer"
        },
        "no_useless_return": {
            "summary": "There should not be an empty `return` statement at the end of a function.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction example($b) {\n    if ($b) {\n        return;\n    }\n    return;\n}\n",
                    "to": "<?php\nfunction example($b) {\n    if ($b) {\n        return;\n    }\n    \n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ReturnNotation\\NoUselessReturnFixer"
        },
        "no_whitespace_before_comma_in_array": {
            "summary": "In array declaration, there MUST NOT be a whitespace before each comma.",
            "codeSamples": [
                {
                    "from": "<?php $x = array(1 , \"2\");\n",
                    "to": "<?php $x = array(1, \"2\");\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NoWhitespaceBeforeCommaInArrayFixer"
        },
        "no_whitespace_in_blank_line": {
            "summary": "Remove trailing whitespace at the end of blank lines.",
            "codeSamples": [
                {
                    "from": "<?php\n   \n$a = 1;\n",
                    "to": "<?php\n\n$a = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoWhitespaceInBlankLineFixer"
        },
        "non_printable_character": {
            "risky": true,
            "configuration": [
                {
                    "name": "use_escape_sequences_in_strings",
                    "description": "Whether characters should be replaced with escape sequences in strings.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Remove Zero-width space (ZWSP), Non-breaking space (NBSP) and other invisible unicode symbols.",
            "riskyDescription": "Risky when strings contain intended invisible characters.",
            "codeSamples": [
                {
                    "from": "<?php echo \"\u200bHello\u2007World\u00a0!\";\n",
                    "to": "<?php echo \"Hello World !\";\n"
                },
                {
                    "from": "<?php echo \"\u200bHello\u2007World\u00a0!\";\n",
                    "to": "<?php echo \"\\u{200b}Hello\\u{2007}World\\u{a0}!\";\n",
                    "configuration": {
                        "use_escape_sequences_in_strings": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\NonPrintableCharacterFixer"
        },
        "normalize_index_brace": {
            "summary": "Array index should always be written by using square braces.",
            "codeSamples": [
                {
                    "from": "<?php\necho $sample{$index};\n",
                    "to": "<?php\necho $sample[$index];\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NormalizeIndexBraceFixer"
        },
        "not_operator_with_space": {
            "summary": "Logical NOT operators (`!`) should have leading and trailing whitespaces.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif (!$bar) {\n    echo \"Help!\";\n}\n",
                    "to": "<?php\n\nif ( ! $bar) {\n    echo \"Help!\";\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NotOperatorWithSpaceFixer"
        },
        "not_operator_with_successor_space": {
            "summary": "Logical NOT operators (`!`) should have one trailing whitespace.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif (!$bar) {\n    echo \"Help!\";\n}\n",
                    "to": "<?php\n\nif (! $bar) {\n    echo \"Help!\";\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NotOperatorWithSuccessorSpaceFixer"
        },
        "object_operator_without_whitespace": {
            "summary": "There should not be space before or after object `T_OBJECT_OPERATOR` `->`.",
            "codeSamples": [
                {
                    "from": "<?php $a  ->  b;\n",
                    "to": "<?php $a->b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\ObjectOperatorWithoutWhitespaceFixer"
        },
        "ordered_class_elements": {
            "configuration": [
                {
                    "name": "order",
                    "description": "List of strings defining order of elements.",
                    "defaultValue": [
                        "use_trait",
                        "constant_public",
                        "constant_protected",
                        "constant_private",
                        "property_public",
                        "property_protected",
                        "property_private",
                        "construct",
                        "destruct",
                        "magic",
                        "phpunit",
                        "method_public",
                        "method_protected",
                        "method_private"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "use_trait",
                            "public",
                            "protected",
                            "private",
                            "constant",
                            "constant_public",
                            "constant_protected",
                            "constant_private",
                            "property",
                            "property_static",
                            "property_public",
                            "property_protected",
                            "property_private",
                            "property_public_static",
                            "property_protected_static",
                            "property_private_static",
                            "method",
                            "method_static",
                            "method_public",
                            "method_protected",
                            "method_private",
                            "method_public_static",
                            "method_protected_static",
                            "method_private_static",
                            "construct",
                            "destruct",
                            "magic",
                            "phpunit"
                        ]
                    ]
                },
                {
                    "name": "sortAlgorithm",
                    "description": "How multiple occurrences of same type statements should be sorted",
                    "defaultValue": "none",
                    "allowedValues": [
                        "none",
                        "alpha"
                    ]
                }
            ],
            "summary": "Orders the elements of classes\/interfaces\/traits.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Example\n{\n    use BarTrait;\n    use BazTrait;\n    const C1 = 1;\n    const C2 = 2;\n    protected static $protStatProp;\n    public static $pubStatProp1;\n    public $pubProp1;\n    protected $protProp;\n    var $pubProp2;\n    private static $privStatProp;\n    private $privProp;\n    public static $pubStatProp2;\n    public $pubProp3;\n    protected function __construct() {}\n    private static function privStatFunc() {}\n    public function pubFunc1() {}\n    public function __toString() {}\n    protected function protFunc() {}\n    function pubFunc2() {}\n    public static function pubStatFunc1() {}\n    public function pubFunc3() {}\n    static function pubStatFunc2() {}\n    private function privFunc() {}\n    public static function pubStatFunc3() {}\n    protected static function protStatFunc() {}\n    public function __destruct() {}\n}\n",
                    "to": "<?php\nfinal class Example\n{\n    use BarTrait;\n    use BazTrait;\n    const C1 = 1;\n    const C2 = 2;\n    public static $pubStatProp1;\n    public $pubProp1;\n    var $pubProp2;\n    public static $pubStatProp2;\n    public $pubProp3;\n    protected static $protStatProp;\n    protected $protProp;\n    private static $privStatProp;\n    private $privProp;\n    protected function __construct() {}\n    public function __destruct() {}\n    public function __toString() {}\n    public function pubFunc1() {}\n    function pubFunc2() {}\n    public static function pubStatFunc1() {}\n    public function pubFunc3() {}\n    static function pubStatFunc2() {}\n    public static function pubStatFunc3() {}\n    protected function protFunc() {}\n    protected static function protStatFunc() {}\n    private static function privStatFunc() {}\n    private function privFunc() {}\n}\n"
                },
                {
                    "from": "<?php\nclass Example\n{\n    public function A(){}\n    private function B(){}\n}\n",
                    "to": "<?php\nclass Example\n{\n    private function B(){}\n    public function A(){}\n}\n",
                    "configuration": {
                        "order": [
                            "method_private",
                            "method_public"
                        ]
                    }
                },
                {
                    "from": "<?php\nclass Example\n{\n    public function D(){}\n    public function B(){}\n    public function A(){}\n    public function C(){}\n}\n",
                    "to": "<?php\nclass Example\n{\n    public function A(){}\n    public function B(){}\n    public function C(){}\n    public function D(){}\n}\n",
                    "configuration": {
                        "order": [
                            "method_public"
                        ],
                        "sortAlgorithm": "alpha"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer"
        },
        "ordered_imports": {
            "configuration": [
                {
                    "name": "imports_order",
                    "alias": "importsOrder",
                    "description": "Defines the order of import types.",
                    "defaultValue": null,
                    "allowedTypes": [
                        "array",
                        "null"
                    ]
                },
                {
                    "name": "sort_algorithm",
                    "alias": "sortAlgorithm",
                    "description": "whether the statements should be sorted alphabetically or by length, or not sorted",
                    "defaultValue": "alpha",
                    "allowedValues": [
                        "alpha",
                        "length",
                        "none"
                    ]
                }
            ],
            "summary": "Ordering `use` statements.",
            "codeSamples": [
                {
                    "from": "<?php\nuse Z; use A;\n",
                    "to": "<?php\nuse A; use Z;\n"
                },
                {
                    "from": "<?php\nuse Acme\\Bar;\nuse Bar1;\nuse Acme;\nuse Bar;\n",
                    "to": "<?php\nuse Bar;\nuse Acme;\nuse Bar1;\nuse Acme\\Bar;\n",
                    "configuration": {
                        "sort_algorithm": "length"
                    }
                },
                {
                    "from": "<?php\nuse function AAC;\nuse const AAB;\nuse AAA;\n",
                    "to": "<?php\nuse AAA;\nuse const AAB;\nuse function AAC;\n"
                },
                {
                    "from": "<?php\nuse const AAAA;\nuse const BBB;\n\nuse Bar;\nuse AAC;\nuse Acme;\n\nuse function CCC\\AA;\nuse function DDD;\n",
                    "to": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse AAC;\nuse Bar;\nuse Acme;\n\nuse function DDD;\nuse function CCC\\AA;\n",
                    "configuration": {
                        "sort_algorithm": "length",
                        "imports_order": [
                            "const",
                            "class",
                            "function"
                        ]
                    }
                },
                {
                    "from": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse Acme;\nuse AAC;\nuse Bar;\n\nuse function DDD;\nuse function CCC\\AA;\n",
                    "to": "<?php\nuse const AAAA;\nuse const BBB;\n\nuse AAC;\nuse Acme;\nuse Bar;\n\nuse function CCC\\AA;\nuse function DDD;\n",
                    "configuration": {
                        "sort_algorithm": "alpha",
                        "imports_order": [
                            "const",
                            "class",
                            "function"
                        ]
                    }
                },
                {
                    "from": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse function DDD;\nuse function CCC\\AA;\n\nuse Acme;\nuse AAC;\nuse Bar;\n",
                    "to": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse Acme;\nuse AAC;\n\nuse Bar;\nuse function DDD;\nuse function CCC\\AA;\n",
                    "configuration": {
                        "sort_algorithm": "none",
                        "imports_order": [
                            "const",
                            "class",
                            "function"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\OrderedImportsFixer"
        },
        "php_unit_construct": {
            "risky": true,
            "configuration": [
                {
                    "name": "assertions",
                    "description": "List of assertion methods to fix.",
                    "defaultValue": [
                        "assertEquals",
                        "assertSame",
                        "assertNotEquals",
                        "assertNotSame"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "assertSame",
                            "assertEquals",
                            "assertNotEquals",
                            "assertNotSame"
                        ]
                    ]
                }
            ],
            "summary": "PHPUnit assertion method calls like `->assertSame(true, $foo)` should be written with dedicated method like `->assertTrue($foo)`.",
            "riskyDescription": "Fixer could be risky if one is overriding PHPUnit's native methods.",
            "codeSamples": [
                {
                    "from": "<?php\n$this->assertEquals(false, $b);\n$this->assertSame(true, $a);\n$this->assertNotEquals(null, $c);\n$this->assertNotSame(null, $d);\n",
                    "to": "<?php\n$this->assertFalse($b);\n$this->assertTrue($a);\n$this->assertNotNull($c);\n$this->assertNotNull($d);\n"
                },
                {
                    "from": "<?php\n$this->assertEquals(false, $b);\n$this->assertSame(true, $a);\n$this->assertNotEquals(null, $c);\n$this->assertNotSame(null, $d);\n",
                    "to": "<?php\n$this->assertEquals(false, $b);\n$this->assertTrue($a);\n$this->assertNotEquals(null, $c);\n$this->assertNotNull($d);\n",
                    "configuration": {
                        "assertions": [
                            "assertSame",
                            "assertNotSame"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitConstructFixer"
        },
        "php_unit_dedicate_assert": {
            "risky": true,
            "configuration": [
                {
                    "name": "functions",
                    "description": "List of assertions to fix (overrides `target`).",
                    "defaultValue": null,
                    "allowedTypes": [
                        "null",
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "array_key_exists",
                            "empty",
                            "file_exists",
                            "is_array",
                            "is_bool",
                            "is_callable",
                            "is_double",
                            "is_float",
                            "is_infinite",
                            "is_int",
                            "is_integer",
                            "is_long",
                            "is_nan",
                            "is_null",
                            "is_numeric",
                            "is_object",
                            "is_real",
                            "is_resource",
                            "is_scalar",
                            "is_string"
                        ],
                        null
                    ]
                },
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "5.0",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "3.0",
                        "3.5",
                        "5.0",
                        "5.6",
                        "newest"
                    ]
                }
            ],
            "summary": "PHPUnit assertions like `assertInternalType`, `assertFileExists`, should be used over `assertTrue`.",
            "riskyDescription": "Fixer could be risky if one is overriding PHPUnit's native methods.",
            "codeSamples": [
                {
                    "from": "<?php\n$this->assertTrue(is_float( $a), \"my message\");\n$this->assertTrue(is_nan($a));\n",
                    "to": "<?php\n$this->assertInternalType('float', $a, \"my message\");\n$this->assertNan($a);\n"
                },
                {
                    "from": "<?php\n$this->assertTrue(is_dir($a));\n$this->assertTrue(is_writable($a));\n$this->assertTrue(is_readable($a));\n",
                    "to": "<?php\n$this->assertDirectoryExists($a);\n$this->assertIsWritable($a);\n$this->assertIsReadable($a);\n",
                    "configuration": {
                        "target": "5.6"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertFixer"
        },
        "php_unit_expectation": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "5.2",
                        "5.6",
                        "newest"
                    ]
                }
            ],
            "summary": "Usages of `->setExpectedException*` methods MUST be replaced by `->expectException*` methods.",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->setExpectedException(\"RuntimeException\", \"Msg\", 123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessage(\"Msg\");\n        $this->expectExceptionCode(123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessageRegExp(\"\/Msg.*\/\");\n        $this->expectExceptionCode(123);\n        bar();\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->setExpectedException(\"RuntimeException\", null, 123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionCode(123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessageRegExp(\"\/Msg.*\/\");\n        $this->expectExceptionCode(123);\n        bar();\n    }\n}\n",
                    "configuration": {
                        "target": "5.6"
                    }
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->setExpectedException(\"RuntimeException\", \"Msg\", 123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessage(\"Msg\");\n        $this->expectExceptionCode(123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "configuration": {
                        "target": "5.2"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitExpectationFixer"
        },
        "php_unit_fqcn_annotation": {
            "summary": "PHPUnit annotations should be a FQCNs including a root namespace.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException InvalidArgumentException\n     * @covers Project\\NameSpace\\Something\n     * @coversDefaultClass Project\\Default\n     * @uses Project\\Test\\Util\n     *\/\n    public function testSomeTest()\n    {\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException \\InvalidArgumentException\n     * @covers \\Project\\NameSpace\\Something\n     * @coversDefaultClass \\Project\\Default\n     * @uses \\Project\\Test\\Util\n     *\/\n    public function testSomeTest()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitFqcnAnnotationFixer"
        },
        "php_unit_internal_class": {
            "configuration": [
                {
                    "name": "types",
                    "description": "What types of classes to mark as internal",
                    "defaultValue": [
                        "normal",
                        "final"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "normal",
                            "final",
                            "abstract"
                        ]
                    ]
                }
            ],
            "summary": "All PHPUnit test classes should be marked as internal.",
            "codeSamples": [
                {
                    "from": "<?php\nclass MyTest extends TestCase {}\n",
                    "to": "<?php\n\/**\n * @internal\n *\/\nclass MyTest extends TestCase {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitInternalClassFixer"
        },
        "php_unit_method_casing": {
            "configuration": [
                {
                    "name": "case",
                    "description": "Apply camel or snake case to test methods",
                    "defaultValue": "camel_case",
                    "allowedValues": [
                        "camel_case",
                        "snake_case"
                    ]
                }
            ],
            "summary": "Enforce camel (or snake) case for PHPUnit test methods, following configuration.",
            "codeSamples": [
                {
                    "from": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function test_my_code() {}\n}\n",
                    "to": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function testMyCode() {}\n}\n"
                },
                {
                    "from": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function testMyCode() {}\n}\n",
                    "to": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function test_my_code() {}\n}\n",
                    "configuration": {
                        "case": "snake_case"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMethodCasingFixer"
        },
        "php_unit_mock": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "5.4",
                        "5.5",
                        "newest"
                    ]
                }
            ],
            "summary": "Usages of `->getMock` and `->getMockWithoutInvokingTheOriginalConstructor` methods MUST be replaced by `->createMock` or `->createPartialMock` methods.",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock = $this->getMockWithoutInvokingTheOriginalConstructor(\"Foo\");\n        $mock1 = $this->getMock(\"Foo\");\n        $mock1 = $this->getMock(\"Bar\", [\"aaa\"]);\n        $mock1 = $this->getMock(\"Baz\", [\"aaa\"], [\"argument\"]); \/\/ version with more than 2 params is not supported\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock = $this->createMock(\"Foo\");\n        $mock1 = $this->createMock(\"Foo\");\n        $mock1 = $this->createPartialMock(\"Bar\", [\"aaa\"]);\n        $mock1 = $this->getMock(\"Baz\", [\"aaa\"], [\"argument\"]); \/\/ version with more than 2 params is not supported\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock1 = $this->getMock(\"Foo\");\n        $mock1 = $this->getMock(\"Bar\", [\"aaa\"]); \/\/ version with multiple params is not supported\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock1 = $this->createMock(\"Foo\");\n        $mock1 = $this->getMock(\"Bar\", [\"aaa\"]); \/\/ version with multiple params is not supported\n    }\n}\n",
                    "configuration": {
                        "target": "5.4"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMockFixer"
        },
        "php_unit_namespaced": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "4.8",
                        "5.7",
                        "6.0",
                        "newest"
                    ]
                }
            ],
            "summary": "PHPUnit classes MUST be used in namespaced version, eg `\\PHPUnit\\Framework\\TestCase` instead of `\\PHPUnit_Framework_TestCase`.",
            "description": "PHPUnit v6 has finally fully switched to namespaces.\nYou could start preparing the upgrade by switching from non-namespaced TestCase to namespaced one.\nForward compatibility layer (`\\PHPUnit\\Framework\\TestCase` class) was backported to PHPUnit v4.8.35 and PHPUnit v5.4.0.\nExtended forward compatibility layer (`PHPUnit\\Framework\\Assert`, `PHPUnit\\Framework\\BaseTestListener`, `PHPUnit\\Framework\\TestListener` classes) was introduced in v5.7.0.\n",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitNamespacedFixer"
        },
        "php_unit_no_expectation_annotation": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "3.2",
                        "4.3",
                        "newest"
                    ]
                },
                {
                    "name": "use_class_const",
                    "description": "Use ::class notation.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Usages of `@expectedException*` annotations MUST be replaced by `->setExpectedException*` methods.",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionMessageRegExp \/foo.*$\/\n     * @expectedExceptionCode 123\n     *\/\n    function testAaa()\n    {\n        aaa();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     *\/\n    function testAaa()\n    {\n        $this->setExpectedExceptionRegExp(\\FooException::class, '\/foo.*$\/', 123);\n\n        aaa();\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionCode 123\n     *\/\n    function testBbb()\n    {\n        bbb();\n    }\n\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionMessageRegExp \/foo.*$\/\n     *\/\n    function testCcc()\n    {\n        ccc();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     *\/\n    function testBbb()\n    {\n        $this->setExpectedException(\\FooException::class, null, 123);\n\n        bbb();\n    }\n\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionMessageRegExp \/foo.*$\/\n     *\/\n    function testCcc()\n    {\n        ccc();\n    }\n}\n",
                    "configuration": {
                        "target": "3.2"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitNoExpectationAnnotationFixer"
        },
        "php_unit_ordered_covers": {
            "summary": "Order `@covers` annotation of PHPUnit tests.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @covers Foo\n * @covers Bar\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n",
                    "to": "<?php\n\/**\n * @covers Bar\n * @covers Foo\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitOrderedCoversFixer"
        },
        "php_unit_set_up_tear_down_visibility": {
            "risky": true,
            "summary": "Changes the visibility of the `setUp()` and `tearDown()` functions of PHPUnit to `protected`, to match the PHPUnit TestCase.",
            "riskyDescription": "This fixer may change functions named `setUp()` or `tearDown()` outside of PHPUnit tests, when a class is wrongly seen as a PHPUnit test.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    private $hello;\n    public function setUp()\n    {\n        $this->hello = \"hello\";\n    }\n\n    public function tearDown()\n    {\n        $this->hello = null;\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    private $hello;\n    protected function setUp()\n    {\n        $this->hello = \"hello\";\n    }\n\n    protected function tearDown()\n    {\n        $this->hello = null;\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitSetUpTearDownVisibilityFixer"
        },
        "php_unit_strict": {
            "risky": true,
            "configuration": [
                {
                    "name": "assertions",
                    "description": "List of assertion methods to fix.",
                    "defaultValue": [
                        "assertAttributeEquals",
                        "assertAttributeNotEquals",
                        "assertEquals",
                        "assertNotEquals"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "assertAttributeEquals",
                            "assertAttributeNotEquals",
                            "assertEquals",
                            "assertNotEquals"
                        ]
                    ]
                }
            ],
            "summary": "PHPUnit methods like `assertSame` should be used instead of `assertEquals`.",
            "riskyDescription": "Risky when any of the functions are overridden or when testing object equality.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertEquals(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeSame(a(), b());\n        $this->assertAttributeNotSame(a(), b());\n        $this->assertSame(a(), b());\n        $this->assertNotSame(a(), b());\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertEquals(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertSame(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}\n",
                    "configuration": {
                        "assertions": [
                            "assertEquals"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitStrictFixer"
        },
        "php_unit_test_annotation": {
            "risky": true,
            "configuration": [
                {
                    "name": "case",
                    "description": "Whether to camel or snake case when adding the test prefix",
                    "defaultValue": "camel",
                    "allowedValues": [
                        "camel",
                        "snake"
                    ]
                },
                {
                    "name": "style",
                    "description": "Whether to use the @test annotation or not.",
                    "defaultValue": "prefix",
                    "allowedValues": [
                        "prefix",
                        "annotation"
                    ]
                }
            ],
            "summary": "Adds or removes @test annotations from tests, following configuration.",
            "riskyDescription": "This fixer may change the name of your tests, and could cause incompatibility with abstract classes or interfaces.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\n    \/**\n     * @test\n     *\/\n    public function itDoesSomething() {} }\n",
                    "to": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\n    \/**\n     *\n     *\/\n    public function testItDoesSomething() {} }\n"
                },
                {
                    "from": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\npublic function testItDoesSomething() {}}\n",
                    "to": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\n\/**\n * @test\n *\/\npublic function itDoesSomething() {}}\n",
                    "configuration": {
                        "style": "annotation"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestAnnotationFixer"
        },
        "php_unit_test_case_static_method_calls": {
            "risky": true,
            "configuration": [
                {
                    "name": "call_type",
                    "description": "The call type to use for referring to PHPUnit methods.",
                    "defaultValue": "static",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "this",
                        "self",
                        "static"
                    ]
                },
                {
                    "name": "methods",
                    "description": "Dictionary of `method` => `call_type` values that differ from the default strategy.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Calls to `PHPUnit\\Framework\\TestCase` static methods must all be of the same type, either `$this->`, `self::` or `static::`.",
            "riskyDescription": "Risky when PHPUnit methods are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        $this->assertSame(1, 2);\n        self::assertSame(1, 2);\n        static::assertSame(1, 2);\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        static::assertSame(1, 2);\n        static::assertSame(1, 2);\n        static::assertSame(1, 2);\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestCaseStaticMethodCallsFixer"
        },
        "php_unit_test_class_requires_covers": {
            "summary": "Adds a default `@coversNothing` annotation to PHPUnit test classes that have no `@covers*` annotation.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertSame(a(), b());\n    }\n}\n",
                    "to": "<?php\n\n\/**\n * @coversNothing\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertSame(a(), b());\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestClassRequiresCoversFixer"
        },
        "phpdoc_add_missing_param_annotation": {
            "configuration": [
                {
                    "name": "only_untyped",
                    "description": "Whether to add missing `@param` annotations for untyped parameters only.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "PHPDoc should contain `@param` for all params.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "to": "<?php\n\/**\n * @param int $bar\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "to": "<?php\n\/**\n * @param int $bar\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "configuration": {
                        "only_untyped": true
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "to": "<?php\n\/**\n * @param int $bar\n * @param string $foo\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "configuration": {
                        "only_untyped": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAddMissingParamAnnotationFixer"
        },
        "phpdoc_align": {
            "configuration": [
                {
                    "name": "align",
                    "description": "Align comments",
                    "defaultValue": "vertical",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "left",
                        "vertical"
                    ]
                },
                {
                    "name": "tags",
                    "description": "The tags that should be aligned.",
                    "defaultValue": [
                        "param",
                        "return",
                        "throws",
                        "type",
                        "var"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "param",
                            "property",
                            "return",
                            "throws",
                            "type",
                            "var",
                            "method"
                        ]
                    ]
                }
            ],
            "summary": "All items of the given phpdoc tags must be either left-aligned or (by default) aligned vertically.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param  EngineInterface $templating\n * @param string      $format\n * @param  int  $code       an HTTP response status code\n * @param    bool         $debug\n * @param  mixed    &$reference     a parameter passed by reference\n *\/\n",
                    "to": "<?php\n\/**\n * @param EngineInterface $templating\n * @param string          $format\n * @param int             $code       an HTTP response status code\n * @param bool            $debug\n * @param mixed           &$reference a parameter passed by reference\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @param  EngineInterface $templating\n * @param string      $format\n * @param  int  $code       an HTTP response status code\n * @param    bool         $debug\n * @param  mixed    &$reference     a parameter passed by reference\n *\/\n",
                    "to": "<?php\n\/**\n * @param EngineInterface $templating\n * @param string          $format\n * @param int             $code       an HTTP response status code\n * @param bool            $debug\n * @param mixed           &$reference a parameter passed by reference\n *\/\n",
                    "configuration": {
                        "align": "vertical"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param  EngineInterface $templating\n * @param string      $format\n * @param  int  $code       an HTTP response status code\n * @param    bool         $debug\n * @param  mixed    &$reference     a parameter passed by reference\n *\/\n",
                    "to": "<?php\n\/**\n * @param EngineInterface $templating\n * @param string $format\n * @param int $code an HTTP response status code\n * @param bool $debug\n * @param mixed &$reference a parameter passed by reference\n *\/\n",
                    "configuration": {
                        "align": "left"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAlignFixer"
        },
        "phpdoc_annotation_without_dot": {
            "summary": "PHPDoc annotation descriptions should not be a sentence.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param string $bar Some string.\n *\/\nfunction foo ($bar) {}\n",
                    "to": "<?php\n\/**\n * @param string $bar some string\n *\/\nfunction foo ($bar) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAnnotationWithoutDotFixer"
        },
        "phpdoc_indent": {
            "summary": "Docblocks should have the same indentation as the documented subject.",
            "codeSamples": [
                {
                    "from": "<?php\nclass DocBlocks\n{\n\/**\n * Test constants\n *\/\n    const INDENT = 1;\n}\n",
                    "to": "<?php\nclass DocBlocks\n{\n    \/**\n     * Test constants\n     *\/\n    const INDENT = 1;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocIndentFixer"
        },
        "phpdoc_inline_tag": {
            "summary": "Fix PHPDoc inline tags, make `@inheritdoc` always inline.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @{TUTORIAL}\n * {{ @link }}\n * {@examples}\n * @inheritdocs\n *\/\n",
                    "to": "<?php\n\/**\n * {@tutorial}\n * {@link}\n * {@example}\n * {@inheritdoc}\n *\/\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocInlineTagFixer"
        },
        "phpdoc_no_access": {
            "summary": "`@access` annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo\n{\n    \/**\n     * @internal\n     * @access private\n     *\/\n    private $bar;\n}\n",
                    "to": "<?php\nclass Foo\n{\n    \/**\n     * @internal\n     *\/\n    private $bar;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoAccessFixer"
        },
        "phpdoc_no_alias_tag": {
            "configuration": [
                {
                    "name": "replacements",
                    "description": "Mapping between replaced annotations with new ones.",
                    "defaultValue": {
                        "property-read": "property",
                        "property-write": "property",
                        "type": "var",
                        "link": "see"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "No alias PHPDoc tags should be used.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @link baz\n *\/\nfinal class Example\n{\n}\n",
                    "to": "<?php\n\/**\n * @property string $foo\n * @property string $bar\n *\n * @see baz\n *\/\nfinal class Example\n{\n}\n"
                },
                {
                    "from": "<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @link baz\n *\/\nfinal class Example\n{\n}\n",
                    "to": "<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @website baz\n *\/\nfinal class Example\n{\n}\n",
                    "configuration": {
                        "replacements": {
                            "link": "website"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoAliasTagFixer"
        },
        "phpdoc_no_empty_return": {
            "summary": "`@return void` and `@return null` annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @return null\n*\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n*\/\nfunction foo() {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @return void\n*\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n*\/\nfunction foo() {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoEmptyReturnFixer"
        },
        "phpdoc_no_package": {
            "summary": "`@package` and `@subpackage` annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @internal\n * @package Foo\n * subpackage Bar\n *\/\nclass Baz\n{\n}\n",
                    "to": "<?php\n\/**\n * @internal\n *\/\nclass Baz\n{\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoPackageFixer"
        },
        "phpdoc_no_useless_inheritdoc": {
            "summary": "Classy that does not inherit must not have `@inheritdoc` tags.",
            "codeSamples": [
                {
                    "from": "<?php\n\/** {@inheritdoc} *\/\nclass Sample\n{\n}\n",
                    "to": "<?php\n\/** *\/\nclass Sample\n{\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{\n    \/**\n     * @inheritdoc\n     *\/\n    public function Test()\n    {\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    \/**\n     * \n     *\/\n    public function Test()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoUselessInheritdocFixer"
        },
        "phpdoc_order": {
            "summary": "Annotations in PHPDoc should be ordered so that `@param` annotations come first, then `@throws` annotations, then `@return` annotations.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @throws Exception|RuntimeException dfsdf\n * @custom Test!\n * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @custom Test!\n * @param string $foo\n * @param bool   $bar Bar\n * @throws Exception|RuntimeException dfsdf\n * @return int  Return the number of changes.\n *\/\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocOrderFixer"
        },
        "phpdoc_return_self_reference": {
            "configuration": [
                {
                    "name": "replacements",
                    "description": "Mapping between replaced return types with new ones.",
                    "defaultValue": {
                        "this": "$this",
                        "@this": "$this",
                        "$self": "self",
                        "@self": "self",
                        "$static": "static",
                        "@static": "static"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "The type of `@return` annotations of methods returning a reference to itself must the configured one.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n    \/**\n     * @return this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    \/**\n     * @return $this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{\n    \/**\n     * @return this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    \/**\n     * @return self\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n",
                    "configuration": {
                        "replacements": {
                            "this": "self"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocReturnSelfReferenceFixer"
        },
        "phpdoc_scalar": {
            "configuration": [
                {
                    "name": "types",
                    "description": "A map of types to fix.",
                    "defaultValue": [
                        "boolean",
                        "double",
                        "integer",
                        "real",
                        "str"
                    ],
                    "allowedValues": [
                        [
                            "boolean",
                            "callback",
                            "double",
                            "integer",
                            "real",
                            "str"
                        ]
                    ]
                }
            ],
            "summary": "Scalar types should always be written in the same form. `int` not `integer`, `bool` not `boolean`, `float` not `real` or `double`.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param integer $a\n * @param boolean $b\n * @param real $c\n *\n * @return double\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n",
                    "to": "<?php\n\/**\n * @param int $a\n * @param bool $b\n * @param float $c\n *\n * @return float\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocScalarFixer"
        },
        "phpdoc_separation": {
            "summary": "Annotations in PHPDoc should be grouped together so that annotations of the same type immediately follow each other, and annotations of a different type are separated by a single blank line.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Description.\n * @param string $foo\n *\n *\n * @param bool   $bar Bar\n * @throws Exception|RuntimeException\n * @return bool\n *\/\nfunction fnc($foo, $bar) {}\n",
                    "to": "<?php\n\/**\n * Description.\n *\n * @param string $foo\n * @param bool   $bar Bar\n *\n * @throws Exception|RuntimeException\n *\n * @return bool\n *\/\nfunction fnc($foo, $bar) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSeparationFixer"
        },
        "phpdoc_single_line_var_spacing": {
            "summary": "Single line `@var` PHPDoc should have proper spacing.",
            "codeSamples": [
                {
                    "from": "<?php \/**@var   MyClass   $a   *\/\n$a = test();\n",
                    "to": "<?php \/** @var MyClass $a *\/\n$a = test();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSingleLineVarSpacingFixer"
        },
        "phpdoc_summary": {
            "summary": "PHPDoc summary should end in either a full stop, exclamation mark, or question mark.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Foo function is great\n *\/\nfunction foo () {}\n",
                    "to": "<?php\n\/**\n * Foo function is great.\n *\/\nfunction foo () {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSummaryFixer"
        },
        "phpdoc_to_comment": {
            "summary": "Docblocks should only be used on structural elements.",
            "codeSamples": [
                {
                    "from": "<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/** This should not be a docblock *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n",
                    "to": "<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/* This should not be a docblock *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocToCommentFixer"
        },
        "phpdoc_to_return_type": {
            "risky": true,
            "configuration": [
                {
                    "name": "scalar_types",
                    "description": "Fix also scalar types; may have unexpected behaviour due to PHP bad type coercion system.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "EXPERIMENTAL: Takes `@return` annotation of non-mixed types and adjusts accordingly the function signature. Requires PHP >= 7.0.",
            "riskyDescription": "[1] This rule is EXPERIMENTAL and is not covered with backward compatibility promise. [2] `@return` annotation is mandatory for the fixer to make changes, signatures of methods without it (no docblock, inheritdocs) will not be fixed. [3] Manual actions are required if inherited signatures are not properly documented. [4] `@inheritdocs` support is under construction.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\/** @return \\My\\Bar *\/\nfunction my_foo()\n{}\n",
                    "to": "<?php\n\n\/** @return \\My\\Bar *\/\nfunction my_foo(): \\My\\Bar\n{}\n"
                },
                {
                    "from": "<?php\n\n\/** @return void *\/\nfunction my_foo()\n{}\n",
                    "to": "<?php\n\n\/** @return void *\/\nfunction my_foo(): void\n{}\n"
                },
                {
                    "from": "<?php\n\n\/** @return object *\/\nfunction my_foo()\n{}\n",
                    "to": "<?php\n\n\/** @return object *\/\nfunction my_foo(): object\n{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\PhpdocToReturnTypeFixer"
        },
        "phpdoc_trim": {
            "summary": "PHPDoc should start and end with content, excluding the very first and last line of the docblocks.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n *\n * Foo must be final class.\n *\n *\n *\/\nfinal class Foo {}\n",
                    "to": "<?php\n\/**\n * Foo must be final class.\n *\/\nfinal class Foo {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTrimFixer"
        },
        "phpdoc_trim_consecutive_blank_line_separation": {
            "summary": "Removes extra blank lines after summary and after description in PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Summary.\n *\n *\n * Description that contain 4 lines,\n *\n *\n * while 2 of them are blank!\n *\n *\n * @param string $foo\n *\n *\n * @dataProvider provideFixCases\n *\/\nfunction fnc($foo) {}\n",
                    "to": "<?php\n\/**\n * Summary.\n *\n * Description that contain 4 lines,\n *\n *\n * while 2 of them are blank!\n *\n * @param string $foo\n *\n * @dataProvider provideFixCases\n *\/\nfunction fnc($foo) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTrimConsecutiveBlankLineSeparationFixer"
        },
        "phpdoc_types": {
            "configuration": [
                {
                    "name": "groups",
                    "description": "Type groups to fix.",
                    "defaultValue": [
                        "simple",
                        "alias",
                        "meta"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "simple",
                            "alias",
                            "meta"
                        ]
                    ]
                }
            ],
            "summary": "The correct case must be used for standard PHP types in PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param STRING|String[] $bar\n *\n * @return inT[]\n *\/\n",
                    "to": "<?php\n\/**\n * @param string|string[] $bar\n *\n * @return int[]\n *\/\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTypesFixer"
        },
        "phpdoc_types_order": {
            "configuration": [
                {
                    "name": "null_adjustment",
                    "description": "Forces the position of `null` (overrides `sort_algorithm`).",
                    "defaultValue": "always_first",
                    "allowedValues": [
                        "always_first",
                        "always_last",
                        "none"
                    ]
                },
                {
                    "name": "sort_algorithm",
                    "description": "The sorting algorithm to apply.",
                    "defaultValue": "alpha",
                    "allowedValues": [
                        "alpha",
                        "none"
                    ]
                }
            ],
            "summary": "Sorts PHPDoc types.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param string|null $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param null|string $bar\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @param null|string $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param string|null $bar\n *\/\n",
                    "configuration": {
                        "null_adjustment": "always_last"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param null|\\Foo|int|string $bar\n *\/\n",
                    "configuration": {
                        "sort_algorithm": "alpha"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param \\Foo|int|string|null $bar\n *\/\n",
                    "configuration": {
                        "sort_algorithm": "alpha",
                        "null_adjustment": "always_last"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param \\Foo|int|null|string $bar\n *\/\n",
                    "configuration": {
                        "sort_algorithm": "alpha",
                        "null_adjustment": "none"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTypesOrderFixer"
        },
        "phpdoc_var_without_name": {
            "summary": "`@var` and `@type` annotations should not contain the variable name.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Foo\n{\n    \/**\n     * @var int $bar\n     *\/\n    public $bar;\n\n    \/**\n     * @type $baz float\n     *\/\n    public $baz;\n}\n",
                    "to": "<?php\nfinal class Foo\n{\n    \/**\n     * @var int\n     *\/\n    public $bar;\n\n    \/**\n     * @type float\n     *\/\n    public $baz;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocVarWithoutNameFixer"
        },
        "pow_to_exponentiation": {
            "risky": true,
            "summary": "Converts `pow` to the `**` operator.",
            "riskyDescription": "Risky when the function `pow` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n pow($a, 1);\n",
                    "to": "<?php\n $a** 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\PowToExponentiationFixer"
        },
        "pre_increment": {
            "summary": "Pre incrementation\/decrementation should be used if possible.",
            "codeSamples": [
                {
                    "from": "<?php\n$a++;\n$b--;\n",
                    "to": "<?php\n++$a;\n--$b;\n"
                }
            ],
            "deprecated_switchTo": [
                "increment_style"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\PreIncrementFixer"
        },
        "protected_to_private": {
            "summary": "Converts `protected` variables and methods to `private` where possible.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n    protected $a;\n\n    protected function test()\n    {\n    }\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    private $a;\n\n    private function test()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\ProtectedToPrivateFixer"
        },
        "psr0": {
            "risky": true,
            "configuration": [
                {
                    "name": "dir",
                    "description": "The directory where the project code is placed.",
                    "defaultValue": "",
                    "allowedTypes": [
                        "string"
                    ]
                }
            ],
            "summary": "Classes must be in a path that matches their namespace, be at least one namespace deep and the class name should match the file name.",
            "riskyDescription": "This fixer may change your class name, which will break the code that is depended on old name.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n",
                    "to": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass Psr0Fixer {}\n"
                },
                {
                    "from": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n",
                    "to": "<?php\nnamespace PhpCsFixer\\Fixer\\Basic;\nclass Psr0Fixer {}\n",
                    "configuration": {
                        "dir": "\/path\/to\/vendor\/friendsofphp\/php-cs-fixer\/src"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\Psr0Fixer"
        },
        "psr4": {
            "risky": true,
            "summary": "Class names should match the file name.",
            "riskyDescription": "This fixer may change your class name, which will break the code that is depended on old name.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n",
                    "to": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass Psr4Fixer {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\Psr4Fixer"
        },
        "random_api_migration": {
            "risky": true,
            "configuration": [
                {
                    "name": "replacements",
                    "description": "Mapping between replaced functions with the new ones.",
                    "defaultValue": {
                        "getrandmax": "mt_getrandmax",
                        "rand": "mt_rand",
                        "srand": "mt_srand"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Replaces `rand`, `srand`, `getrandmax` functions calls with their `mt_*` analogs.",
            "riskyDescription": "Risky when the configured functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = getrandmax();\n$a = rand($b, $c);\n$a = srand();\n",
                    "to": "<?php\n$a = mt_getrandmax();\n$a = mt_rand($b, $c);\n$a = mt_srand();\n"
                },
                {
                    "from": "<?php\n$a = getrandmax();\n$a = rand($b, $c);\n$a = srand();\n",
                    "to": "<?php\n$a = mt_getrandmax();\n$a = rand($b, $c);\n$a = srand();\n",
                    "configuration": {
                        "replacements": {
                            "getrandmax": "mt_getrandmax"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\RandomApiMigrationFixer"
        },
        "return_assignment": {
            "summary": "Local, dynamic and directly referenced variables should not be assigned and directly returned by a function or method.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction a() {\n    $a = 1;\n    return $a;\n}\n",
                    "to": "<?php\nfunction a() {\n    return 1;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ReturnNotation\\ReturnAssignmentFixer"
        },
        "return_type_declaration": {
            "configuration": [
                {
                    "name": "space_before",
                    "description": "Spacing to apply before colon.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "one",
                        "none"
                    ]
                }
            ],
            "summary": "There should be one or no space before colon, and one space after it in return type declarations, according to configuration.",
            "description": "Rule is applied only in a PHP 7+ environment.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo(int $a):string {};\n",
                    "to": "<?php\nfunction foo(int $a): string {};\n"
                },
                {
                    "from": "<?php\nfunction foo(int $a):string {};\n",
                    "to": "<?php\nfunction foo(int $a): string {};\n",
                    "configuration": {
                        "space_before": "none"
                    }
                },
                {
                    "from": "<?php\nfunction foo(int $a):string {};\n",
                    "to": "<?php\nfunction foo(int $a) : string {};\n",
                    "configuration": {
                        "space_before": "one"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\ReturnTypeDeclarationFixer"
        },
        "self_accessor": {
            "risky": true,
            "summary": "Inside class or interface element `self` should be preferred to the class name itself.",
            "riskyDescription": "Risky when using dynamic calls like get_called_class() or late static binding.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n    const BAZ = 1;\n    const BAR = Sample::BAZ;\n\n    public function getBar()\n    {\n        return Sample::BAR;\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    const BAZ = 1;\n    const BAR = self::BAZ;\n\n    public function getBar()\n    {\n        return self::BAR;\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\SelfAccessorFixer"
        },
        "semicolon_after_instruction": {
            "summary": "Instructions must be terminated with a semicolon.",
            "codeSamples": [
                {
                    "from": "<?php echo 1 ?>\n",
                    "to": "<?php echo 1; ?>\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\SemicolonAfterInstructionFixer"
        },
        "set_type_to_cast": {
            "risky": true,
            "summary": "Cast shall be used, not `settype`.",
            "riskyDescription": "Risky when the `settype` function is overridden or when used as the 2nd or 3rd expression in a `for` loop .",
            "codeSamples": [
                {
                    "from": "<?php\nsettype($foo, \"integer\");\nsettype($bar, \"string\");\nsettype($bar, \"null\");\n",
                    "to": "<?php\n$foo = (int) $foo;\n$bar = (string) $bar;\n$bar = null;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\SetTypeToCastFixer"
        },
        "short_scalar_cast": {
            "summary": "Cast `(boolean)` and `(integer)` should be written as `(bool)` and `(int)`, `(double)` and `(real)` as `(float)`, `(binary)` as `(string)`.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = (boolean) $b;\n$a = (integer) $b;\n$a = (double) $b;\n$a = (real) $b;\n\n$a = (binary) $b;\n",
                    "to": "<?php\n$a = (bool) $b;\n$a = (int) $b;\n$a = (float) $b;\n$a = (float) $b;\n\n$a = (string) $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\ShortScalarCastFixer"
        },
        "silenced_deprecation_error": {
            "risky": true,
            "summary": "Ensures deprecation notices are silenced.",
            "riskyDescription": "Silencing of deprecation errors might cause changes to code behaviour.",
            "codeSamples": [
                {
                    "from": "<?php\ntrigger_error('Warning.', E_USER_DEPRECATED);\n",
                    "to": "<?php\n@trigger_error('Warning.', E_USER_DEPRECATED);\n"
                }
            ],
            "deprecated_switchTo": [
                "error_suppression"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\SilencedDeprecationErrorFixer"
        },
        "simplified_null_return": {
            "summary": "A return statement wishing to return `void` should not return `null`.",
            "codeSamples": [
                {
                    "from": "<?php return null;\n",
                    "to": "<?php return;\n"
                },
                {
                    "from": "<?php\nfunction foo() { return null; }\nfunction bar(): int { return null; }\nfunction baz(): ?int { return null; }\nfunction xyz(): void { return null; }\n",
                    "to": "<?php\nfunction foo() { return; }\nfunction bar(): int { return null; }\nfunction baz(): ?int { return null; }\nfunction xyz(): void { return; }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ReturnNotation\\SimplifiedNullReturnFixer"
        },
        "single_blank_line_at_eof": {
            "summary": "A PHP file without end tag must always end with a single empty line feed.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = 1;",
                    "to": "<?php\n$a = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\SingleBlankLineAtEofFixer"
        },
        "single_blank_line_before_namespace": {
            "summary": "There should be exactly one blank line before a namespace declaration.",
            "codeSamples": [
                {
                    "from": "<?php  namespace A {}\n",
                    "to": "<?php\n\nnamespace A {}\n"
                },
                {
                    "from": "<?php\n\n\nnamespace A{}\n",
                    "to": "<?php\n\nnamespace A{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\SingleBlankLineBeforeNamespaceFixer"
        },
        "single_class_element_per_statement": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "List of strings which element should be modified.",
                    "defaultValue": [
                        "const",
                        "property"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "const",
                            "property"
                        ]
                    ]
                }
            ],
            "summary": "There MUST NOT be more than one property or constant declared per statement.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n",
                    "to": "<?php\nfinal class Example\n{\n    const FOO_1 = 1;\n    const FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n"
                },
                {
                    "from": "<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n",
                    "to": "<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n",
                    "configuration": {
                        "elements": [
                            "property"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\SingleClassElementPerStatementFixer"
        },
        "single_import_per_statement": {
            "summary": "There MUST be one use keyword per declaration.",
            "codeSamples": [
                {
                    "from": "<?php\nuse Foo, Sample, Sample\\Sample as Sample2;\n",
                    "to": "<?php\nuse Foo;\nuse Sample;\nuse Sample\\Sample as Sample2;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\SingleImportPerStatementFixer"
        },
        "single_line_after_imports": {
            "summary": "Each namespace use MUST go on its own line and there MUST be one blank line after the use statements block.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\nfinal class Example\n{\n}\n",
                    "to": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\nfinal class Example\n{\n}\n"
                },
                {
                    "from": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\n\nfinal class Example\n{\n}\n",
                    "to": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\nfinal class Example\n{\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\SingleLineAfterImportsFixer"
        },
        "single_line_comment_style": {
            "configuration": [
                {
                    "name": "comment_types",
                    "description": "List of comment types to fix",
                    "defaultValue": [
                        "asterisk",
                        "hash"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "asterisk",
                            "hash"
                        ]
                    ]
                }
            ],
            "summary": "Single-line comments and multi-line comments with only one line of actual content should use the `\/\/` syntax.",
            "codeSamples": [
                {
                    "from": "<?php\n\/* asterisk comment *\/\n$a = 1;\n\n# hash comment\n$b = 2;\n\n\/*\n * multi-line\n * comment\n *\/\n$c = 3;\n",
                    "to": "<?php\n\/\/ asterisk comment\n$a = 1;\n\n\/\/ hash comment\n$b = 2;\n\n\/*\n * multi-line\n * comment\n *\/\n$c = 3;\n"
                },
                {
                    "from": "<?php\n\/* first comment *\/\n$a = 1;\n\n\/*\n * second comment\n *\/\n$b = 2;\n\n\/*\n * third\n * comment\n *\/\n$c = 3;\n",
                    "to": "<?php\n\/\/ first comment\n$a = 1;\n\n\/\/ second comment\n$b = 2;\n\n\/*\n * third\n * comment\n *\/\n$c = 3;\n",
                    "configuration": {
                        "comment_types": [
                            "asterisk"
                        ]
                    }
                },
                {
                    "from": "<?php # comment\n",
                    "to": "<?php \/\/ comment\n",
                    "configuration": {
                        "comment_types": [
                            "hash"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\SingleLineCommentStyleFixer"
        },
        "single_quote": {
            "configuration": [
                {
                    "name": "strings_containing_single_quote_chars",
                    "description": "Whether to fix double-quoted strings that contains single-quotes.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Convert double quotes to single quotes for simple strings.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$a = \"sample\";\n$b = \"sample with 'single-quotes'\";\n",
                    "to": "<?php\n\n$a = 'sample';\n$b = \"sample with 'single-quotes'\";\n"
                },
                {
                    "from": "<?php\n\n$a = \"sample\";\n$b = \"sample with 'single-quotes'\";\n",
                    "to": "<?php\n\n$a = 'sample';\n$b = 'sample with \\'single-quotes\\'';\n",
                    "configuration": {
                        "strings_containing_single_quote_chars": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\SingleQuoteFixer"
        },
        "space_after_semicolon": {
            "configuration": [
                {
                    "name": "remove_in_empty_for_expressions",
                    "description": "Whether spaces should be removed for empty `for` expressions.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Fix whitespace after a semicolon.",
            "codeSamples": [
                {
                    "from": "<?php\n                        sample();     $test = 1;\n                        sample();$test = 2;\n                        for ( ;;++$sample) {\n                        }\n",
                    "to": "<?php\n                        sample(); $test = 1;\n                        sample(); $test = 2;\n                        for ( ; ; ++$sample) {\n                        }\n"
                },
                {
                    "from": "<?php\nfor ($i = 0; ; ++$i) {\n}\n",
                    "to": "<?php\nfor ($i = 0;; ++$i) {\n}\n",
                    "configuration": {
                        "remove_in_empty_for_expressions": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\SpaceAfterSemicolonFixer"
        },
        "standardize_increment": {
            "summary": "Increment and decrement operators should be used if possible.",
            "codeSamples": [
                {
                    "from": "<?php\n$i += 1;\n",
                    "to": "<?php\n++$i;\n"
                },
                {
                    "from": "<?php\n$i -= 1;\n",
                    "to": "<?php\n--$i;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\StandardizeIncrementFixer"
        },
        "standardize_not_equals": {
            "summary": "Replace all `<>` with `!=`.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = $b <> $c;\n",
                    "to": "<?php\n$a = $b != $c;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\StandardizeNotEqualsFixer"
        },
        "static_lambda": {
            "risky": true,
            "summary": "Lambdas not (indirect) referencing `$this` must be declared `static`.",
            "riskyDescription": "Risky when using \"->bindTo\" on lambdas without referencing to `$this`.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = function () use ($b)\n{   echo $b;\n};\n",
                    "to": "<?php\n$a = static function () use ($b)\n{   echo $b;\n};\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\StaticLambdaFixer"
        },
        "strict_comparison": {
            "risky": true,
            "summary": "Comparisons should be strict.",
            "riskyDescription": "Changing comparisons to strict might change code behavior.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = 1== $b;\n",
                    "to": "<?php\n$a = 1=== $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Strict\\StrictComparisonFixer"
        },
        "strict_param": {
            "risky": true,
            "summary": "Functions should be used with `$strict` param set to `true`.",
            "description": "The functions \"array_keys\", \"array_search\", \"base64_decode\", \"in_array\" and \"mb_detect_encoding\" should be used with $strict param.",
            "riskyDescription": "Risky when the fixed function is overridden or if the code relies on non-strict usage.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = array_keys($b);\n$a = array_search($b, $c);\n$a = base64_decode($b);\n$a = in_array($b, $c);\n$a = mb_detect_encoding($b, $c);\n",
                    "to": "<?php\n$a = array_keys($b);\n$a = array_search($b, $c, true);\n$a = base64_decode($b, true);\n$a = in_array($b, $c, true);\n$a = mb_detect_encoding($b, $c, true);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Strict\\StrictParamFixer"
        },
        "string_line_ending": {
            "risky": true,
            "summary": "All multi-line strings must use correct line ending.",
            "riskyDescription": "Changing the line endings of multi-line strings might affect string comparisons and outputs.",
            "codeSamples": [
                {
                    "from": "<?php $a = 'my\r\nmulti\nline\r\nstring';\r\n",
                    "to": "<?php $a = 'my\nmulti\nline\nstring';\r\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\StringLineEndingFixer"
        },
        "switch_case_semicolon_to_colon": {
            "summary": "A case should be followed by a colon and not a semicolon.",
            "codeSamples": [
                {
                    "from": "<?php\n    switch ($a) {\n        case 1;\n            break;\n        default;\n            break;\n    }\n",
                    "to": "<?php\n    switch ($a) {\n        case 1:\n            break;\n        default:\n            break;\n    }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\SwitchCaseSemicolonToColonFixer"
        },
        "switch_case_space": {
            "summary": "Removes extra spaces between colon and case value.",
            "codeSamples": [
                {
                    "from": "<?php\n    switch($a) {\n        case 1   :\n            break;\n        default     :\n            return 2;\n    }\n",
                    "to": "<?php\n    switch($a) {\n        case 1:\n            break;\n        default:\n            return 2;\n    }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\SwitchCaseSpaceFixer"
        },
        "ternary_operator_spaces": {
            "summary": "Standardize spaces around ternary operator.",
            "codeSamples": [
                {
                    "from": "<?php $a = $a   ?1 :0;\n",
                    "to": "<?php $a = $a ? 1 : 0;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\TernaryOperatorSpacesFixer"
        },
        "ternary_to_null_coalescing": {
            "summary": "Use `null` coalescing operator `??` where possible. Requires PHP >= 7.0.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = isset($a) ? $a : $b;\n",
                    "to": "<?php\n$sample = $a ?? $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\TernaryToNullCoalescingFixer"
        },
        "trailing_comma_in_multiline_array": {
            "summary": "PHP multi-line arrays should have a trailing comma.",
            "codeSamples": [
                {
                    "from": "<?php\narray(\n    1,\n    2\n);\n",
                    "to": "<?php\narray(\n    1,\n    2,\n);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\TrailingCommaInMultilineArrayFixer"
        },
        "trim_array_spaces": {
            "summary": "Arrays should be formatted like function\/method arguments, without leading or trailing single line space.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = array( );\n$sample = array( 'a', 'b' );\n",
                    "to": "<?php\n$sample = array();\n$sample = array('a', 'b');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\TrimArraySpacesFixer"
        },
        "unary_operator_spaces": {
            "summary": "Unary operators should be placed adjacent to their operands.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample ++;\n-- $sample;\n$sample = ! ! $a;\n$sample = ~  $c;\nfunction & foo(){}\n",
                    "to": "<?php\n$sample++;\n--$sample;\n$sample = !!$a;\n$sample = ~$c;\nfunction &foo(){}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\UnaryOperatorSpacesFixer"
        },
        "visibility_required": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "The structural elements to fix (PHP >= 7.1 required for `const`).",
                    "defaultValue": [
                        "property",
                        "method"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "property",
                            "method",
                            "const"
                        ]
                    ]
                }
            ],
            "summary": "Visibility MUST be declared on all properties and methods; `abstract` and `final` MUST be declared before the visibility; `static` MUST be declared after the visibility.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n    var $a;\n    static protected $var_foo2;\n\n    function A()\n    {\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    public $a;\n    protected static $var_foo2;\n\n    public function A()\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{\n    const SAMPLE = 1;\n}\n",
                    "to": "<?php\nclass Sample\n{\n    public const SAMPLE = 1;\n}\n",
                    "configuration": {
                        "elements": [
                            "const"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\VisibilityRequiredFixer"
        },
        "void_return": {
            "risky": true,
            "summary": "Add void return type to functions with missing or empty return statements, but priority is given to `@return` annotations. Requires PHP >= 7.1.",
            "riskyDescription": "Modifies the signature of functions.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo($a) {};\n",
                    "to": "<?php\nfunction foo($a): void {};\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\VoidReturnFixer"
        },
        "whitespace_after_comma_in_array": {
            "summary": "In array declaration, there MUST be a whitespace after each comma.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = array(1,'a',$b,);\n",
                    "to": "<?php\n$sample = array(1, 'a', $b, );\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\WhitespaceAfterCommaInArrayFixer"
        },
        "yoda_style": {
            "configuration": [
                {
                    "name": "always_move_variable",
                    "description": "Whether variables should always be on non assignable side when applying Yoda style.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "equal",
                    "description": "Style for equal (`==`, `!=`) statements.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool",
                        "null"
                    ]
                },
                {
                    "name": "identical",
                    "description": "Style for identical (`===`, `!==`) statements.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool",
                        "null"
                    ]
                },
                {
                    "name": "less_and_greater",
                    "description": "Style for less and greater than (`<`, `<=`, `>`, `>=`) statements.",
                    "defaultValue": null,
                    "allowedTypes": [
                        "bool",
                        "null"
                    ]
                }
            ],
            "summary": "Write conditions in Yoda style (`true`), non-Yoda style (`false`) or ignore those conditions (`null`) based on configuration.",
            "codeSamples": [
                {
                    "from": "<?php\n    if ($a === null) {\n        echo \"null\";\n    }\n",
                    "to": "<?php\n    if (null === $a) {\n        echo \"null\";\n    }\n"
                },
                {
                    "from": "<?php\n    $b = $c != 1;  \/\/ equal\n    $a = 1 === $b; \/\/ identical\n    $c = $c > 3;   \/\/ less than\n",
                    "to": "<?php\n    $b = 1 != $c;  \/\/ equal\n    $a = $b === 1; \/\/ identical\n    $c = $c > 3;   \/\/ less than\n",
                    "configuration": {
                        "equal": true,
                        "identical": false,
                        "less_and_greater": null
                    }
                },
                {
                    "from": "<?php\nreturn $foo === count($bar);\n",
                    "to": "<?php\nreturn count($bar) === $foo;\n",
                    "configuration": {
                        "always_move_variable": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\YodaStyleFixer"
        }
    },
    "sets": {
        "@DoctrineAnnotation": {
            "rules": {
                "doctrine_annotation_array_assignment": {
                    "operator": ":"
                },
                "doctrine_annotation_braces": null,
                "doctrine_annotation_indentation": null,
                "doctrine_annotation_spaces": {
                    "before_array_assignments_colon": false
                }
            }
        },
        "@PHP56Migration": {
            "rules": []
        },
        "@PHP56Migration:risky": {
            "rules": {
                "pow_to_exponentiation": null
            }
        },
        "@PHP70Migration": {
            "rules": {
                "ternary_to_null_coalescing": null
            }
        },
        "@PHP70Migration:risky": {
            "rules": {
                "combine_nested_dirname": null,
                "declare_strict_types": null,
                "non_printable_character": {
                    "use_escape_sequences_in_strings": true
                },
                "pow_to_exponentiation": null,
                "random_api_migration": {
                    "replacements": {
                        "mt_rand": "random_int",
                        "rand": "random_int"
                    }
                }
            }
        },
        "@PHP71Migration": {
            "rules": {
                "ternary_to_null_coalescing": null,
                "visibility_required": {
                    "elements": [
                        "const",
                        "method",
                        "property"
                    ]
                }
            }
        },
        "@PHP71Migration:risky": {
            "rules": {
                "combine_nested_dirname": null,
                "declare_strict_types": null,
                "non_printable_character": {
                    "use_escape_sequences_in_strings": true
                },
                "pow_to_exponentiation": null,
                "random_api_migration": {
                    "replacements": {
                        "mt_rand": "random_int",
                        "rand": "random_int"
                    }
                },
                "void_return": null
            }
        },
        "@PHPUnit30Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "3.0"
                }
            }
        },
        "@PHPUnit32Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "3.0"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "3.2"
                }
            }
        },
        "@PHPUnit35Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "3.5"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "3.2"
                }
            }
        },
        "@PHPUnit43Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "3.5"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit48Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "3.5"
                },
                "php_unit_namespaced": {
                    "target": "4.8"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit50Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.0"
                },
                "php_unit_namespaced": {
                    "target": "4.8"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit52Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.0"
                },
                "php_unit_expectation": {
                    "target": "5.2"
                },
                "php_unit_namespaced": {
                    "target": "4.8"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit54Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.0"
                },
                "php_unit_expectation": {
                    "target": "5.2"
                },
                "php_unit_mock": {
                    "target": "5.4"
                },
                "php_unit_namespaced": {
                    "target": "4.8"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit55Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.0"
                },
                "php_unit_expectation": {
                    "target": "5.2"
                },
                "php_unit_mock": {
                    "target": "5.5"
                },
                "php_unit_namespaced": {
                    "target": "4.8"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit56Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.6"
                },
                "php_unit_expectation": {
                    "target": "5.6"
                },
                "php_unit_mock": {
                    "target": "5.5"
                },
                "php_unit_namespaced": {
                    "target": "4.8"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit57Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.6"
                },
                "php_unit_expectation": {
                    "target": "5.6"
                },
                "php_unit_mock": {
                    "target": "5.5"
                },
                "php_unit_namespaced": {
                    "target": "5.7"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PHPUnit60Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.6"
                },
                "php_unit_expectation": {
                    "target": "5.6"
                },
                "php_unit_mock": {
                    "target": "5.5"
                },
                "php_unit_namespaced": {
                    "target": "6.0"
                },
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            }
        },
        "@PSR1": {
            "rules": {
                "encoding": null,
                "full_opening_tag": null
            }
        },
        "@PSR2": {
            "rules": {
                "blank_line_after_namespace": null,
                "braces": null,
                "class_definition": null,
                "elseif": null,
                "encoding": null,
                "full_opening_tag": null,
                "function_declaration": null,
                "indentation_type": null,
                "line_ending": null,
                "lowercase_constants": null,
                "lowercase_keywords": null,
                "method_argument_space": {
                    "on_multiline": "ensure_fully_multiline"
                },
                "no_break_comment": null,
                "no_closing_tag": null,
                "no_spaces_after_function_name": null,
                "no_spaces_inside_parenthesis": null,
                "no_trailing_whitespace": null,
                "no_trailing_whitespace_in_comment": null,
                "single_blank_line_at_eof": null,
                "single_class_element_per_statement": {
                    "elements": [
                        "property"
                    ]
                },
                "single_import_per_statement": null,
                "single_line_after_imports": null,
                "switch_case_semicolon_to_colon": null,
                "switch_case_space": null,
                "visibility_required": null
            }
        },
        "@PhpCsFixer": {
            "rules": {
                "align_multiline_comment": null,
                "array_indentation": null,
                "array_syntax": {
                    "syntax": "short"
                },
                "binary_operator_spaces": null,
                "blank_line_after_namespace": null,
                "blank_line_after_opening_tag": null,
                "blank_line_before_statement": null,
                "braces": {
                    "allow_single_line_closure": true
                },
                "cast_spaces": null,
                "class_attributes_separation": {
                    "elements": [
                        "method"
                    ]
                },
                "class_definition": {
                    "single_line": true
                },
                "combine_consecutive_issets": null,
                "combine_consecutive_unsets": null,
                "compact_nullable_typehint": null,
                "concat_space": {
                    "spacing": "none"
                },
                "declare_equal_normalize": null,
                "elseif": null,
                "encoding": null,
                "escape_implicit_backslashes": null,
                "explicit_indirect_variable": null,
                "explicit_string_variable": null,
                "full_opening_tag": null,
                "fully_qualified_strict_types": null,
                "function_declaration": null,
                "function_typehint_space": null,
                "heredoc_to_nowdoc": null,
                "include": null,
                "increment_style": null,
                "indentation_type": null,
                "line_ending": null,
                "lowercase_cast": null,
                "lowercase_constants": null,
                "lowercase_keywords": null,
                "lowercase_static_reference": null,
                "magic_constant_casing": null,
                "magic_method_casing": null,
                "method_argument_space": {
                    "on_multiline": "ensure_fully_multiline"
                },
                "method_chaining_indentation": null,
                "multiline_comment_opening_closing": null,
                "multiline_whitespace_before_semicolons": {
                    "strategy": "new_line_for_chained_calls"
                },
                "native_function_casing": null,
                "new_with_braces": null,
                "no_alternative_syntax": null,
                "no_binary_string": null,
                "no_blank_lines_after_class_opening": null,
                "no_blank_lines_after_phpdoc": null,
                "no_break_comment": null,
                "no_closing_tag": null,
                "no_empty_comment": null,
                "no_empty_phpdoc": null,
                "no_empty_statement": null,
                "no_extra_blank_lines": {
                    "tokens": [
                        "break",
                        "continue",
                        "curly_brace_block",
                        "extra",
                        "parenthesis_brace_block",
                        "return",
                        "square_brace_block",
                        "throw",
                        "use"
                    ]
                },
                "no_leading_import_slash": null,
                "no_leading_namespace_whitespace": null,
                "no_mixed_echo_print": {
                    "use": "echo"
                },
                "no_multiline_whitespace_around_double_arrow": null,
                "no_null_property_initialization": null,
                "no_short_bool_cast": null,
                "no_short_echo_tag": null,
                "no_singleline_whitespace_before_semicolons": null,
                "no_spaces_after_function_name": null,
                "no_spaces_around_offset": null,
                "no_spaces_inside_parenthesis": null,
                "no_superfluous_elseif": null,
                "no_trailing_comma_in_list_call": null,
                "no_trailing_comma_in_singleline_array": null,
                "no_trailing_whitespace": null,
                "no_trailing_whitespace_in_comment": null,
                "no_unneeded_control_parentheses": null,
                "no_unneeded_curly_braces": null,
                "no_unneeded_final_method": null,
                "no_unused_imports": null,
                "no_useless_else": null,
                "no_useless_return": null,
                "no_whitespace_before_comma_in_array": null,
                "no_whitespace_in_blank_line": null,
                "normalize_index_brace": null,
                "object_operator_without_whitespace": null,
                "ordered_class_elements": null,
                "ordered_imports": null,
                "php_unit_fqcn_annotation": null,
                "php_unit_internal_class": null,
                "php_unit_method_casing": null,
                "php_unit_ordered_covers": null,
                "php_unit_test_class_requires_covers": null,
                "phpdoc_add_missing_param_annotation": null,
                "phpdoc_align": {
                    "tags": [
                        "method",
                        "param",
                        "property",
                        "return",
                        "throws",
                        "type",
                        "var"
                    ]
                },
                "phpdoc_annotation_without_dot": null,
                "phpdoc_indent": null,
                "phpdoc_inline_tag": null,
                "phpdoc_no_access": null,
                "phpdoc_no_alias_tag": null,
                "phpdoc_no_empty_return": null,
                "phpdoc_no_package": null,
                "phpdoc_no_useless_inheritdoc": null,
                "phpdoc_order": null,
                "phpdoc_return_self_reference": null,
                "phpdoc_scalar": null,
                "phpdoc_separation": null,
                "phpdoc_single_line_var_spacing": null,
                "phpdoc_summary": null,
                "phpdoc_to_comment": null,
                "phpdoc_trim": null,
                "phpdoc_trim_consecutive_blank_line_separation": null,
                "phpdoc_types": null,
                "phpdoc_types_order": null,
                "phpdoc_var_without_name": null,
                "protected_to_private": null,
                "return_assignment": null,
                "return_type_declaration": null,
                "semicolon_after_instruction": null,
                "short_scalar_cast": null,
                "single_blank_line_at_eof": null,
                "single_blank_line_before_namespace": null,
                "single_class_element_per_statement": null,
                "single_import_per_statement": null,
                "single_line_after_imports": null,
                "single_line_comment_style": null,
                "single_quote": null,
                "space_after_semicolon": {
                    "remove_in_empty_for_expressions": true
                },
                "standardize_increment": null,
                "standardize_not_equals": null,
                "switch_case_semicolon_to_colon": null,
                "switch_case_space": null,
                "ternary_operator_spaces": null,
                "trailing_comma_in_multiline_array": null,
                "trim_array_spaces": null,
                "unary_operator_spaces": null,
                "visibility_required": null,
                "whitespace_after_comma_in_array": null,
                "yoda_style": null
            }
        },
        "@PhpCsFixer:risky": {
            "rules": {
                "comment_to_phpdoc": null,
                "dir_constant": null,
                "ereg_to_preg": null,
                "error_suppression": null,
                "final_internal_class": null,
                "fopen_flag_order": null,
                "fopen_flags": {
                    "b_mode": false
                },
                "function_to_constant": {
                    "functions": [
                        "get_called_class",
                        "get_class",
                        "php_sapi_name",
                        "phpversion",
                        "pi"
                    ]
                },
                "implode_call": null,
                "is_null": null,
                "logical_operators": null,
                "modernize_types_casting": null,
                "native_constant_invocation": {
                    "fix_built_in": false,
                    "include": [
                        "DIRECTORY_SEPARATOR",
                        "PHP_SAPI",
                        "PHP_VERSION_ID"
                    ],
                    "scope": "namespaced"
                },
                "native_function_invocation": {
                    "include": [
                        "@compiler_optimized"
                    ],
                    "scope": "namespaced"
                },
                "no_alias_functions": null,
                "no_homoglyph_names": null,
                "no_unreachable_default_argument_value": null,
                "no_unset_on_property": null,
                "non_printable_character": {
                    "use_escape_sequences_in_strings": false
                },
                "php_unit_construct": null,
                "php_unit_set_up_tear_down_visibility": null,
                "php_unit_strict": null,
                "php_unit_test_annotation": null,
                "php_unit_test_case_static_method_calls": {
                    "call_type": "this"
                },
                "psr4": null,
                "self_accessor": null,
                "set_type_to_cast": null,
                "strict_comparison": null,
                "strict_param": null,
                "string_line_ending": null
            }
        },
        "@Symfony": {
            "rules": {
                "binary_operator_spaces": null,
                "blank_line_after_namespace": null,
                "blank_line_after_opening_tag": null,
                "blank_line_before_statement": {
                    "statements": [
                        "return"
                    ]
                },
                "braces": {
                    "allow_single_line_closure": true
                },
                "cast_spaces": null,
                "class_attributes_separation": {
                    "elements": [
                        "method"
                    ]
                },
                "class_definition": {
                    "single_line": true
                },
                "concat_space": {
                    "spacing": "none"
                },
                "declare_equal_normalize": null,
                "elseif": null,
                "encoding": null,
                "full_opening_tag": null,
                "function_declaration": null,
                "function_typehint_space": null,
                "include": null,
                "increment_style": null,
                "indentation_type": null,
                "line_ending": null,
                "lowercase_cast": null,
                "lowercase_constants": null,
                "lowercase_keywords": null,
                "lowercase_static_reference": null,
                "magic_constant_casing": null,
                "magic_method_casing": null,
                "method_argument_space": null,
                "native_function_casing": null,
                "new_with_braces": null,
                "no_blank_lines_after_class_opening": null,
                "no_blank_lines_after_phpdoc": null,
                "no_break_comment": null,
                "no_closing_tag": null,
                "no_empty_comment": null,
                "no_empty_phpdoc": null,
                "no_empty_statement": null,
                "no_extra_blank_lines": {
                    "tokens": [
                        "curly_brace_block",
                        "extra",
                        "parenthesis_brace_block",
                        "square_brace_block",
                        "throw",
                        "use"
                    ]
                },
                "no_leading_import_slash": null,
                "no_leading_namespace_whitespace": null,
                "no_mixed_echo_print": {
                    "use": "echo"
                },
                "no_multiline_whitespace_around_double_arrow": null,
                "no_short_bool_cast": null,
                "no_singleline_whitespace_before_semicolons": null,
                "no_spaces_after_function_name": null,
                "no_spaces_around_offset": null,
                "no_spaces_inside_parenthesis": null,
                "no_trailing_comma_in_list_call": null,
                "no_trailing_comma_in_singleline_array": null,
                "no_trailing_whitespace": null,
                "no_trailing_whitespace_in_comment": null,
                "no_unneeded_control_parentheses": null,
                "no_unneeded_curly_braces": null,
                "no_unneeded_final_method": null,
                "no_unused_imports": null,
                "no_whitespace_before_comma_in_array": null,
                "no_whitespace_in_blank_line": null,
                "normalize_index_brace": null,
                "object_operator_without_whitespace": null,
                "php_unit_fqcn_annotation": null,
                "phpdoc_align": {
                    "tags": [
                        "method",
                        "param",
                        "property",
                        "return",
                        "throws",
                        "type",
                        "var"
                    ]
                },
                "phpdoc_annotation_without_dot": null,
                "phpdoc_indent": null,
                "phpdoc_inline_tag": null,
                "phpdoc_no_access": null,
                "phpdoc_no_alias_tag": null,
                "phpdoc_no_empty_return": null,
                "phpdoc_no_package": null,
                "phpdoc_no_useless_inheritdoc": null,
                "phpdoc_return_self_reference": null,
                "phpdoc_scalar": null,
                "phpdoc_separation": null,
                "phpdoc_single_line_var_spacing": null,
                "phpdoc_summary": null,
                "phpdoc_to_comment": null,
                "phpdoc_trim": null,
                "phpdoc_types": null,
                "phpdoc_var_without_name": null,
                "protected_to_private": null,
                "return_type_declaration": null,
                "semicolon_after_instruction": null,
                "short_scalar_cast": null,
                "single_blank_line_at_eof": null,
                "single_blank_line_before_namespace": null,
                "single_class_element_per_statement": null,
                "single_import_per_statement": null,
                "single_line_after_imports": null,
                "single_line_comment_style": {
                    "comment_types": [
                        "hash"
                    ]
                },
                "single_quote": null,
                "space_after_semicolon": {
                    "remove_in_empty_for_expressions": true
                },
                "standardize_increment": null,
                "standardize_not_equals": null,
                "switch_case_semicolon_to_colon": null,
                "switch_case_space": null,
                "ternary_operator_spaces": null,
                "trailing_comma_in_multiline_array": null,
                "trim_array_spaces": null,
                "unary_operator_spaces": null,
                "visibility_required": null,
                "whitespace_after_comma_in_array": null,
                "yoda_style": null
            }
        },
        "@Symfony:risky": {
            "rules": {
                "dir_constant": null,
                "ereg_to_preg": null,
                "error_suppression": null,
                "fopen_flag_order": null,
                "fopen_flags": {
                    "b_mode": false
                },
                "function_to_constant": null,
                "implode_call": null,
                "is_null": null,
                "modernize_types_casting": null,
                "native_constant_invocation": {
                    "fix_built_in": false,
                    "include": [
                        "DIRECTORY_SEPARATOR",
                        "PHP_SAPI",
                        "PHP_VERSION_ID"
                    ],
                    "scope": "namespaced"
                },
                "native_function_invocation": {
                    "include": [
                        "@compiler_optimized"
                    ],
                    "scope": "namespaced"
                },
                "no_alias_functions": null,
                "no_homoglyph_names": null,
                "non_printable_character": {
                    "use_escape_sequences_in_strings": false
                },
                "php_unit_construct": null,
                "psr4": null,
                "self_accessor": null,
                "set_type_to_cast": null
            }
        }
    }
}
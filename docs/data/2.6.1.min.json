{"version":"2.6.1","indent":"    ","lineEnding":"\n","fixers":{"align_multiline_comment":{"configuration":[{"name":"comment_type","description":"Whether to fix PHPDoc comments only (`phpdocs_only`), any multi-line comment whose lines all start with an asterisk (`phpdocs_like`) or any multi-line comment (`all_multiline`).","defaultValue":"phpdocs_only","allowedValues":["phpdocs_only","phpdocs_like","all_multiline"]}],"summary":"Each line of multi-line DocComments must have an asterisk [PSR-5] and must be aligned with the first one.","codeSamples":[{"from":"<?php\n    \/**\n            * This is a DOC Comment\nwith a line not prefixed with asterisk\n\n   *\/","to":"<?php\n    \/**\n     * This is a DOC Comment\n     * with a line not prefixed with asterisk\n     *\n     *\/"},{"from":"<?php\n    \/*\n            * This is a doc-like multiline comment\n*\/","to":"<?php\n    \/*\n     * This is a doc-like multiline comment\n     *\/","configuration":{"comment_type":"phpdocs_like"}},{"from":"<?php\n    \/*\n            * This is a doc-like multiline comment\nwith a line not prefixed with asterisk\n\n   *\/","to":"<?php\n    \/*\n     * This is a doc-like multiline comment\nwith a line not prefixed with asterisk\n\n     *\/","configuration":{"comment_type":"all_multiline"}}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\AlignMultilineCommentFixer"},"array_syntax":{"configuration":[{"name":"syntax","description":"Whether to use the `long` or `short` array syntax.","defaultValue":"long","allowedValues":["long","short"]}],"summary":"PHP arrays should be declared using the configured syntax.","codeSamples":[{"from":"<?php\n[1,2];","to":"<?php\narray(1,2);"},{"from":"<?php\narray(1,2);","to":"<?php\n[1,2];","configuration":{"syntax":"short"}}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\ArraySyntaxFixer"},"binary_operator_spaces":{"configuration":[{"name":"align_double_arrow","description":"Whether to apply, remove or ignore double arrows alignment.","defaultValue":false,"allowedValues":[true,false,null]},{"name":"align_equals","description":"Whether to apply, remove or ignore equals alignment.","defaultValue":false,"allowedValues":[true,false,null]}],"summary":"Binary operators should be surrounded by at least one space.","codeSamples":[{"from":"<?php\n\n$a   = 9000;\n$abc = 90001;\n\n$foo = array(\n    \"a\"   => 9000,\n    \"abc\" => 9001,\n);\n","to":"<?php\n\n$a = 9000;\n$abc = 90001;\n\n$foo = array(\n    \"a\" => 9000,\n    \"abc\" => 9001,\n);\n"},{"from":"<?php\n\n$a   = 9000;\n$abc = 90001;\n","to":"<?php\n\n$a = 9000;\n$abc = 90001;\n","configuration":{"align_equals":false}},{"from":"<?php\n\n$a = 9000;\n$abc = 90001;\n","to":"<?php\n\n$a   = 9000;\n$abc = 90001;\n","configuration":{"align_equals":true}},{"from":"<?php\n\n$foo = array(\n    \"a\"   => 9000,\n    \"abc\" => 9001,\n);\n","to":"<?php\n\n$foo = array(\n    \"a\" => 9000,\n    \"abc\" => 9001,\n);\n","configuration":{"align_double_arrow":false}},{"from":"<?php\n\n$foo = array(\n    \"a\" => 9000,\n    \"abc\" => 9001,\n);\n","to":"<?php\n\n$foo = array(\n    \"a\"   => 9000,\n    \"abc\" => 9001,\n);\n","configuration":{"align_double_arrow":true}}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\BinaryOperatorSpacesFixer"},"blank_line_after_namespace":{"summary":"There MUST be one blank line after the namespace declaration.","codeSamples":[{"from":"<?php\nnamespace Sample\\Sample;\n\n\n$a;","to":"<?php\nnamespace Sample\\Sample;\n\n$a;"},{"from":"<?php\nnamespace Sample\\Sample;\nClass Test{}","to":"<?php\nnamespace Sample\\Sample;\n\nClass Test{}"}],"fullClassName":"PhpCsFixer\\Fixer\\NamespaceNotation\\BlankLineAfterNamespaceFixer"},"blank_line_after_opening_tag":{"summary":"Ensure there is no code on the same line as the PHP open tag and it is followed by a blank line.","codeSamples":[{"from":"<?php $a = 1;\n$b = 1;","to":"<?php\n\n$a = 1;\n$b = 1;"}],"fullClassName":"PhpCsFixer\\Fixer\\PhpTag\\BlankLineAfterOpeningTagFixer"},"blank_line_before_return":{"summary":"An empty line feed should precede a return statement (deprecated, use `blank_line_before_statement` instead).","codeSamples":[{"from":"<?php\nfunction A()\n{\n    echo 1;\n    return 1;\n}","to":"<?php\nfunction A()\n{\n    echo 1;\n\n    return 1;\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ReturnNotation\\BlankLineBeforeReturnFixer"},"blank_line_before_statement":{"configuration":[{"name":"statements","description":"List of statements which must be preceded by an empty line.","defaultValue":["break","continue","declare","return","throw","try"],"allowedTypes":["array"]}],"summary":"An empty line feed must precede any configured statement.","codeSamples":[{"from":"<?php\nfunction A() {\n    echo 1;\n    return 1;\n}","to":"<?php\nfunction A() {\n    echo 1;\n\n    return 1;\n}"},{"from":"<?php\nswitch ($foo) {\n    case 42:\n        $bar->process();\n        break;\n    case 44:\n        break;\n}","to":"<?php\nswitch ($foo) {\n    case 42:\n        $bar->process();\n\n        break;\n    case 44:\n        break;\n}","configuration":{"statements":["break"]}},{"from":"<?php\nforeach ($foo as $bar) {\n    if ($bar->isTired()) {\n        $bar->sleep();\n        continue;\n    }\n}","to":"<?php\nforeach ($foo as $bar) {\n    if ($bar->isTired()) {\n        $bar->sleep();\n\n        continue;\n    }\n}","configuration":{"statements":["continue"]}},{"from":"<?php\nif ($foo === false) {\n    die(0);\n} else {\n    $bar = 9000;\n    die(1);\n}","to":"<?php\nif ($foo === false) {\n    die(0);\n} else {\n    $bar = 9000;\n\n    die(1);\n}","configuration":{"statements":["die"]}},{"from":"<?php\n$i = 0;\ndo {\n    echo $i;\n} while ($i > 0);\n","to":"<?php\n$i = 0;\n\ndo {\n    echo $i;\n} while ($i > 0);\n","configuration":{"statements":["do"]}},{"from":"<?php\nif ($foo === false) {\n    exit(0);\n} else {\n    $bar = 9000;\n    exit(1);\n}","to":"<?php\nif ($foo === false) {\n    exit(0);\n} else {\n    $bar = 9000;\n\n    exit(1);\n}","configuration":{"statements":["exit"]}},{"from":"<?php\na:\n\nif ($foo === false) {\n    goto a;\n} else {\n    $bar = 9000;\n    goto b;\n}","to":"<?php\na:\n\nif ($foo === false) {\n    goto a;\n} else {\n    $bar = 9000;\n\n    goto b;\n}","configuration":{"statements":["goto"]}},{"from":"<?php\n$a = 9000;\nif (true) {\n    $foo = $bar;\n}","to":"<?php\n$a = 9000;\n\nif (true) {\n    $foo = $bar;\n}","configuration":{"statements":["if"]}},{"from":"<?php\n\nif (true) {\n    $foo = $bar;\n    return;\n}","to":"<?php\n\nif (true) {\n    $foo = $bar;\n\n    return;\n}","configuration":{"statements":["return"]}},{"from":"<?php\n$a = 9000;\nswitch ($a) {\n    case 42:\n        break;\n}","to":"<?php\n$a = 9000;\n\nswitch ($a) {\n    case 42:\n        break;\n}","configuration":{"statements":["switch"]}},{"from":"<?php\nif (null === $a) {\n    $foo->bar();\n    throw new \\UnexpectedValueException(\"A cannot be null\");\n}","to":"<?php\nif (null === $a) {\n    $foo->bar();\n\n    throw new \\UnexpectedValueException(\"A cannot be null\");\n}","configuration":{"statements":["throw"]}},{"from":"<?php\n$a = 9000;\ntry {\n    $foo->bar();\n} catch (\\Exception $exception) {\n    $a = -1;\n}","to":"<?php\n$a = 9000;\n\ntry {\n    $foo->bar();\n} catch (\\Exception $exception) {\n    $a = -1;\n}","configuration":{"statements":["try"]}},{"from":"<?php\n\nif (true) {\n    $foo = $bar;\n    yield $foo;\n}","to":"<?php\n\nif (true) {\n    $foo = $bar;\n\n    yield $foo;\n}","configuration":{"statements":["yield"]}}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\BlankLineBeforeStatementFixer"},"braces":{"configuration":[{"name":"allow_single_line_closure","description":"Whether single line lambda notation should be allowed.","defaultValue":false,"allowedTypes":["bool"]},{"name":"position_after_anonymous_constructs","description":"whether the opening brace should be placed on \"next\" or \"same\" line after anonymous constructs (anonymous classes and lambda functions).","defaultValue":"same","allowedValues":["next","same"]},{"name":"position_after_control_structures","description":"whether the opening brace should be placed on \"next\" or \"same\" line after control structures.","defaultValue":"same","allowedValues":["next","same"]},{"name":"position_after_functions_and_oop_constructs","description":"whether the opening brace should be placed on \"next\" or \"same\" line after classy constructs (non-anonymous classes, interfaces, traits, methods and non-lambda functions).","defaultValue":"next","allowedValues":["next","same"]}],"summary":"The body of each structure MUST be enclosed by braces. Braces should be properly placed. Body of braces should be properly indented.","codeSamples":[{"from":"<?php\n\nclass Foo {\n    public function bar($baz) {\n        if ($baz = 900) echo \"Hello!\";\n\n        if ($baz = 9000)\n            echo \"Wait!\";\n\n        if ($baz == true)\n        {\n            echo \"Why?\";\n        }\n        else\n        {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz))\n            foreach ($baz as $b)\n            {\n                echo $b;\n            }\n    }\n}\n","to":"<?php\n\nclass Foo\n{\n    public function bar($baz)\n    {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n"},{"from":"<?php\n$positive = function ($item) { return $item >= 0; };\n$negative = function ($item) {\n                return $item < 0; };\n","to":"<?php\n$positive = function ($item) { return $item >= 0; };\n$negative = function ($item) {\n    return $item < 0;\n};\n","configuration":{"allow_single_line_closure":true}},{"from":"<?php\n\nclass Foo\n{\n    public function bar($baz)\n    {\n        if ($baz = 900) echo \"Hello!\";\n\n        if ($baz = 9000)\n            echo \"Wait!\";\n\n        if ($baz == true)\n        {\n            echo \"Why?\";\n        }\n        else\n        {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz))\n            foreach ($baz as $b)\n            {\n                echo $b;\n            }\n    }\n}\n","to":"<?php\n\nclass Foo {\n    public function bar($baz) {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n","configuration":{"position_after_functions_and_oop_constructs":"same"}}],"fullClassName":"PhpCsFixer\\Fixer\\Basic\\BracesFixer"},"cast_spaces":{"configuration":[{"name":"space","description":"spacing to apply between cast and variable.","defaultValue":"single","allowedValues":["none","single"]}],"summary":"A single space or none should be between cast and variable.","codeSamples":[{"from":"<?php\n$bar = ( string )  $a;\n$foo = (int)$b;","to":"<?php\n$bar = (string) $a;\n$foo = (int) $b;"},{"from":"<?php\n$bar = ( string )  $a;\n$foo = (int)$b;","to":"<?php\n$bar = (string) $a;\n$foo = (int) $b;","configuration":{"space":"single"}},{"from":"<?php\n$bar = ( string )  $a;\n$foo = (int) $b;","to":"<?php\n$bar = (string)$a;\n$foo = (int)$b;","configuration":{"space":"none"}}],"fullClassName":"PhpCsFixer\\Fixer\\CastNotation\\CastSpacesFixer"},"class_definition":{"configuration":[{"name":"multiLineExtendsEachSingleLine","description":"Whether definitions should be multiline.","defaultValue":false,"allowedTypes":["bool"]},{"name":"singleItemSingleLine","description":"Whether definitions should be single line when including a single item.","defaultValue":false,"allowedTypes":["bool"]},{"name":"singleLine","description":"Whether definitions should be single line.","defaultValue":false,"allowedTypes":["bool"]}],"summary":"Whitespace around the keywords of a class, trait or interfaces definition should be one space.","codeSamples":[{"from":"<?php\n\nclass  Foo  extends  Bar  implements  Baz,  BarBaz\n{\n}\n\nfinal  class  Foo  extends  Bar  implements  Baz,  BarBaz\n{\n}\n\ntrait  Foo\n{\n}\n","to":"<?php\n\nclass Foo extends Bar implements Baz, BarBaz\n{\n}\n\nfinal class Foo extends Bar implements Baz, BarBaz\n{\n}\n\ntrait Foo\n{\n}\n"},{"from":"<?php\n\n$foo = new  class  extends  Bar  implements  Baz,  BarBaz {};\n","to":"<?php\n\n$foo = new class extends Bar implements Baz, BarBaz {};\n"},{"from":"<?php\n\nclass Foo\nextends Bar\nimplements Baz, BarBaz\n{}\n","to":"<?php\n\nclass Foo extends Bar implements Baz, BarBaz\n{}\n","configuration":{"singleLine":true}},{"from":"<?php\n\nclass Foo\nextends Bar\nimplements Baz\n{}\n","to":"<?php\n\nclass Foo extends Bar implements Baz\n{}\n","configuration":{"singleItemSingleLine":true}},{"from":"<?php\n\ninterface Bar extends\n    Bar, BarBaz, FooBarBaz\n{}\n","to":"<?php\n\ninterface Bar extends\n    Bar,\n    BarBaz,\n    FooBarBaz\n{}\n","configuration":{"multiLineExtendsEachSingleLine":true}}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\ClassDefinitionFixer"},"class_keyword_remove":{"summary":"Converts `::class` keywords to FQCN strings.","codeSamples":[{"from":"<?php\n\nuse Foo\\Bar\\Baz;\n\n$className = Baz::class;\n","to":"<?php\n\nuse Foo\\Bar\\Baz;\n\n$className = 'Foo\\Bar\\Baz';\n"}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\ClassKeywordRemoveFixer"},"combine_consecutive_issets":{"summary":"Using `isset(X) &&` multiple times should be done in one call.","codeSamples":[{"from":"<?php\n$a = isset($a) && isset($b);","to":"<?php\n$a = isset($a, $b)  ;"}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\CombineConsecutiveIssetsFixer"},"combine_consecutive_unsets":{"summary":"Calling `unset` on multiple items should be done in one call.","codeSamples":[{"from":"<?php\nunset($a); unset($b);","to":"<?php\nunset($a, $b); "}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\CombineConsecutiveUnsetsFixer"},"concat_space":{"configuration":[{"name":"spacing","description":"Spacing to apply around concatenation operator.","defaultValue":"none","allowedValues":["one","none"]}],"summary":"Concatenation should be spaced according configuration.","codeSamples":[{"from":"<?php\n$foo = 'bar' . 3 . 'baz'.'qux';","to":"<?php\n$foo = 'bar'. 3 .'baz'.'qux';"},{"from":"<?php\n$foo = 'bar' . 3 . 'baz'.'qux';","to":"<?php\n$foo = 'bar'. 3 .'baz'.'qux';","configuration":{"spacing":"none"}},{"from":"<?php\n$foo = 'bar' . 3 . 'baz'.'qux';","to":"<?php\n$foo = 'bar' . 3 . 'baz' . 'qux';","configuration":{"spacing":"one"}}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\ConcatSpaceFixer"},"declare_equal_normalize":{"configuration":[{"name":"space","description":"Spacing to apply around the equal sign.","defaultValue":"none","allowedValues":["single","none"]}],"summary":"Equal sign in declare statement should be surrounded by spaces or not following configuration.","codeSamples":[{"from":"<?php\ndeclare(ticks =  1);","to":"<?php\ndeclare(ticks=1);"},{"from":"<?php\ndeclare(ticks=1);","to":"<?php\ndeclare(ticks = 1);","configuration":{"space":"single"}}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\DeclareEqualNormalizeFixer"},"declare_strict_types":{"risky":true,"summary":"Force strict types declaration in all files. Requires PHP >= 7.0.","riskyDescription":"Forcing strict types will stop non strict code from working.","codeSamples":[{"from":"<?php ","to":"<?php declare(strict_types=1);"}],"fullClassName":"PhpCsFixer\\Fixer\\Strict\\DeclareStrictTypesFixer"},"dir_constant":{"risky":true,"summary":"Replaces `dirname(__FILE__)` expression with equivalent `__DIR__` constant.","riskyDescription":"Risky when the function `dirname()` is overridden.","codeSamples":[{"from":"<?php\n$a = dirname(__FILE__);","to":"<?php\n$a = __DIR__;"}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\DirConstantFixer"},"doctrine_annotation_array_assignment":{"configuration":[{"name":"ignored_tags","description":"List of tags that must not be treated as Doctrine Annotations.","defaultValue":["abstract","access","code","deprec","encode","exception","final","ingroup","inheritdoc","inheritDoc","magic","name","toc","tutorial","private","static","staticvar","staticVar","throw","api","author","category","copyright","deprecated","example","filesource","global","ignore","internal","license","link","method","package","param","property","property-read","property-write","return","see","since","source","subpackage","throws","todo","TODO","usedBy","uses","var","version","after","afterClass","backupGlobals","backupStaticAttributes","before","beforeClass","codeCoverageIgnore","codeCoverageIgnoreStart","codeCoverageIgnoreEnd","covers","coversDefaultClass","coversNothing","dataProvider","depends","expectedException","expectedExceptionCode","expectedExceptionMessage","expectedExceptionMessageRegExp","group","large","medium","preserveGlobalState","requires","runTestsInSeparateProcesses","runInSeparateProcess","small","test","testdox","ticket","uses","SuppressWarnings","noinspection","package_version","enduml","startuml","fix","FIXME","fixme","override"],"allowedTypes":["array"]},{"name":"operator","description":"The operator to use.","defaultValue":"=","allowedValues":["=",":"]}],"summary":"Doctrine annotations must use configured operator for assignment in arrays.","codeSamples":[{"from":"<?php\n\/**\n * @Foo({bar : \"baz\"})\n *\/\nclass Bar {}","to":"<?php\n\/**\n * @Foo({bar = \"baz\"})\n *\/\nclass Bar {}"},{"from":"<?php\n\/**\n * @Foo({bar = \"baz\"})\n *\/\nclass Bar {}","to":"<?php\n\/**\n * @Foo({bar : \"baz\"})\n *\/\nclass Bar {}","configuration":{"operator":":"}}],"fullClassName":"PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationArrayAssignmentFixer"},"doctrine_annotation_braces":{"configuration":[{"name":"ignored_tags","description":"List of tags that must not be treated as Doctrine Annotations.","defaultValue":["abstract","access","code","deprec","encode","exception","final","ingroup","inheritdoc","inheritDoc","magic","name","toc","tutorial","private","static","staticvar","staticVar","throw","api","author","category","copyright","deprecated","example","filesource","global","ignore","internal","license","link","method","package","param","property","property-read","property-write","return","see","since","source","subpackage","throws","todo","TODO","usedBy","uses","var","version","after","afterClass","backupGlobals","backupStaticAttributes","before","beforeClass","codeCoverageIgnore","codeCoverageIgnoreStart","codeCoverageIgnoreEnd","covers","coversDefaultClass","coversNothing","dataProvider","depends","expectedException","expectedExceptionCode","expectedExceptionMessage","expectedExceptionMessageRegExp","group","large","medium","preserveGlobalState","requires","runTestsInSeparateProcesses","runInSeparateProcess","small","test","testdox","ticket","uses","SuppressWarnings","noinspection","package_version","enduml","startuml","fix","FIXME","fixme","override"],"allowedTypes":["array"]},{"name":"syntax","description":"Whether to add or remove braces.","defaultValue":"without_braces","allowedValues":["with_braces","without_braces"]}],"summary":"Doctrine annotations without arguments must use the configured syntax.","codeSamples":[{"from":"<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}","to":"<?php\n\/**\n * @Foo\n *\/\nclass Bar {}"},{"from":"<?php\n\/**\n * @Foo\n *\/\nclass Bar {}","to":"<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}","configuration":{"syntax":"with_braces"}}],"fullClassName":"PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationBracesFixer"},"doctrine_annotation_indentation":{"configuration":[{"name":"ignored_tags","description":"List of tags that must not be treated as Doctrine Annotations.","defaultValue":["abstract","access","code","deprec","encode","exception","final","ingroup","inheritdoc","inheritDoc","magic","name","toc","tutorial","private","static","staticvar","staticVar","throw","api","author","category","copyright","deprecated","example","filesource","global","ignore","internal","license","link","method","package","param","property","property-read","property-write","return","see","since","source","subpackage","throws","todo","TODO","usedBy","uses","var","version","after","afterClass","backupGlobals","backupStaticAttributes","before","beforeClass","codeCoverageIgnore","codeCoverageIgnoreStart","codeCoverageIgnoreEnd","covers","coversDefaultClass","coversNothing","dataProvider","depends","expectedException","expectedExceptionCode","expectedExceptionMessage","expectedExceptionMessageRegExp","group","large","medium","preserveGlobalState","requires","runTestsInSeparateProcesses","runInSeparateProcess","small","test","testdox","ticket","uses","SuppressWarnings","noinspection","package_version","enduml","startuml","fix","FIXME","fixme","override"],"allowedTypes":["array"]},{"name":"indent_mixed_lines","description":"Whether to indent lines that have content before closing parenthesis.","defaultValue":false,"allowedTypes":["bool"]}],"summary":"Doctrine annotations must be indented with four spaces.","codeSamples":[{"from":"<?php\n\/**\n *  @Foo(\n *   foo=\"foo\"\n *  )\n *\/\nclass Bar {}","to":"<?php\n\/**\n * @Foo(\n *     foo=\"foo\"\n * )\n *\/\nclass Bar {}"},{"from":"<?php\n\/**\n *  @Foo({@Bar,\n *   @Baz})\n *\/\nclass Bar {}","to":"<?php\n\/**\n * @Foo({@Bar,\n *     @Baz})\n *\/\nclass Bar {}","configuration":{"indent_mixed_lines":true}}],"fullClassName":"PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationIndentationFixer"},"doctrine_annotation_spaces":{"configuration":[{"name":"after_argument_assignments","description":"Whether to add, remove or ignore spaces after argument assignment operator.","defaultValue":false,"allowedTypes":["null","bool"]},{"name":"after_array_assignments_colon","description":"Whether to add, remove or ignore spaces after array assignment `:` operator.","defaultValue":true,"allowedTypes":["null","bool"]},{"name":"after_array_assignments_equals","description":"Whether to add, remove or ignore spaces after array assignment `=` operator.","defaultValue":true,"allowedTypes":["null","bool"]},{"name":"around_argument_assignments","description":"Whether to fix spaces around argument assignment operator (deprecated, use `before_argument_assignments` and `after_argument_assignments` options instead).","defaultValue":true,"allowedTypes":["bool"]},{"name":"around_array_assignments","description":"Whether to fix spaces around array assignment operators (deprecated, use `before_array_assignments_*` and `after_array_assignments_*` options instead).","defaultValue":true,"allowedTypes":["bool"]},{"name":"around_commas","description":"Whether to fix spaces around commas.","defaultValue":true,"allowedTypes":["bool"]},{"name":"around_parentheses","description":"Whether to fix spaces around parentheses.","defaultValue":true,"allowedTypes":["bool"]},{"name":"before_argument_assignments","description":"Whether to add, remove or ignore spaces before argument assignment operator.","defaultValue":false,"allowedTypes":["null","bool"]},{"name":"before_array_assignments_colon","description":"Whether to add, remove or ignore spaces before array `:` assignment operator.","defaultValue":true,"allowedTypes":["null","bool"]},{"name":"before_array_assignments_equals","description":"Whether to add, remove or ignore spaces before array `=` assignment operator.","defaultValue":true,"allowedTypes":["null","bool"]},{"name":"ignored_tags","description":"List of tags that must not be treated as Doctrine Annotations.","defaultValue":["abstract","access","code","deprec","encode","exception","final","ingroup","inheritdoc","inheritDoc","magic","name","toc","tutorial","private","static","staticvar","staticVar","throw","api","author","category","copyright","deprecated","example","filesource","global","ignore","internal","license","link","method","package","param","property","property-read","property-write","return","see","since","source","subpackage","throws","todo","TODO","usedBy","uses","var","version","after","afterClass","backupGlobals","backupStaticAttributes","before","beforeClass","codeCoverageIgnore","codeCoverageIgnoreStart","codeCoverageIgnoreEnd","covers","coversDefaultClass","coversNothing","dataProvider","depends","expectedException","expectedExceptionCode","expectedExceptionMessage","expectedExceptionMessageRegExp","group","large","medium","preserveGlobalState","requires","runTestsInSeparateProcesses","runInSeparateProcess","small","test","testdox","ticket","uses","SuppressWarnings","noinspection","package_version","enduml","startuml","fix","FIXME","fixme","override"],"allowedTypes":["array"]}],"summary":"Fixes spaces in Doctrine annotations.","description":"There must not be any space around parentheses; commas must be preceded by no space and followed by one space; there must be no space around named arguments assignment operator; there must be one space around array assignment operator.","codeSamples":[{"from":"<?php\n\/**\n * @Foo ( )\n *\/\nclass Bar {}\n\n\/**\n * @Foo(\"bar\" ,\"baz\")\n *\/\nclass Bar2 {}\n\n\/**\n * @Foo(foo = \"foo\", bar = {\"foo\":\"foo\", \"bar\"=\"bar\"})\n *\/\nclass Bar3 {}","to":"<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}\n\n\/**\n * @Foo(\"bar\", \"baz\")\n *\/\nclass Bar2 {}\n\n\/**\n * @Foo(foo=\"foo\", bar={\"foo\" : \"foo\", \"bar\" = \"bar\"})\n *\/\nclass Bar3 {}"}],"fullClassName":"PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationSpacesFixer"},"elseif":{"summary":"The keyword `elseif` should be used instead of `else if` so that all control keywords look like single words.","codeSamples":[{"from":"<?php\nif ($a) {\n} else if ($b) {\n}","to":"<?php\nif ($a) {\n} elseif ($b) {\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\ElseifFixer"},"encoding":{"summary":"PHP code MUST use only UTF-8 without BOM (remove BOM).","codeSamples":[{"from":"\ufeff<?php\n\necho \"Hello!\";\n","to":"<?php\n\necho \"Hello!\";\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Basic\\EncodingFixer"},"ereg_to_preg":{"risky":true,"summary":"Replace deprecated `ereg` regular expression functions with preg.","riskyDescription":"Risky if the `ereg` funcion is overridden.","codeSamples":[{"from":"<?php $x = ereg('[A-Z]');","to":"<?php $x = preg_match('\/[A-Z]\/D');"}],"fullClassName":"PhpCsFixer\\Fixer\\Alias\\EregToPregFixer"},"full_opening_tag":{"summary":"PHP code must use the long `<?php` tags or short-echo `<?=` tags and not other tag variations.","codeSamples":[{"from":"<?\n\necho \"Hello!\";\n","to":"<?php\n\necho \"Hello!\";\n"}],"fullClassName":"PhpCsFixer\\Fixer\\PhpTag\\FullOpeningTagFixer"},"function_declaration":{"configuration":[{"name":"closure_function_spacing","description":"Spacing to use before open parenthesis for closures.","defaultValue":"one","allowedValues":["none","one"]}],"summary":"Spaces should be properly placed in a function declaration.","codeSamples":[{"from":"<?php\n\nclass Foo\n{\n    public static function  bar   ( $baz , $foo )\n    {\n        return false;\n    }\n}\n\nfunction  foo  ($bar, $baz)\n{\n    return false;\n}\n","to":"<?php\n\nclass Foo\n{\n    public static function bar($baz , $foo)\n    {\n        return false;\n    }\n}\n\nfunction foo($bar, $baz)\n{\n    return false;\n}\n"},{"from":"<?php\n$f = function () {};\n","to":"<?php\n$f = function() {};\n","configuration":{"closure_function_spacing":"none"}}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\FunctionDeclarationFixer"},"function_to_constant":{"risky":true,"configuration":[{"name":"functions","description":"List of function names to fix.","defaultValue":["get_class","php_sapi_name","phpversion","pi"],"allowedTypes":["array"]}],"summary":"Replace core functions calls returning constants with the constants.","riskyDescription":"Risky when any of the configured functions to replace are overridden.","codeSamples":[{"from":"<?php\necho phpversion();\necho pi();\necho php_sapi_name();","to":"<?php\necho PHP_VERSION;\necho M_PI;\necho PHP_SAPI;"},{"from":"<?php\necho phpversion();\necho pi();","to":"<?php\necho PHP_VERSION;\necho pi();","configuration":{"functions":["phpversion"]}}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\FunctionToConstantFixer"},"function_typehint_space":{"summary":"Add missing space between function's argument and its typehint.","codeSamples":[{"from":"<?php\nfunction sample(array$a)\n{}","to":"<?php\nfunction sample(array $a)\n{}"}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\FunctionTypehintSpaceFixer"},"general_phpdoc_annotation_remove":{"configuration":[{"name":"annotations","description":"List of annotations to remove, e.g. `[\"author\"]`.","defaultValue":[],"allowedTypes":["array"]}],"summary":"Configured annotations should be omitted from phpdocs.","codeSamples":[{"from":"<?php\n\/**\n * @internal\n * @author someone\n *\/\nfunction foo() {}","to":"<?php\n\/**\n * @internal\n *\/\nfunction foo() {}","configuration":{"annotations":["author"]}}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\GeneralPhpdocAnnotationRemoveFixer"},"hash_to_slash_comment":{"summary":"Single line comments should use double slashes `\/\/` and not hash `#`. DEPRECATED: Use \"single_line_comment_style\" instead.","codeSamples":[{"from":"<?php # comment","to":"<?php \/\/ comment"}],"fullClassName":"PhpCsFixer\\Fixer\\Comment\\HashToSlashCommentFixer"},"header_comment":{"configuration":[{"name":"commentType","description":"Comment syntax type.","defaultValue":"comment","allowedValues":["PHPDoc","comment"]},{"name":"header","description":"Proper header content.","allowedTypes":["string"]},{"name":"location","description":"The location of the inserted header.","defaultValue":"after_declare_strict","allowedValues":["after_open","after_declare_strict"]},{"name":"separate","description":"Whether the header should be separated from the file content with a new line.","defaultValue":"both","allowedValues":["both","top","bottom","none"]}],"summary":"Add, replace or remove header comment.","codeSamples":[{"from":"<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n","to":"<?php\ndeclare(strict_types=1);\n\n\/*\n * Made with love.\n *\/\n\nnamespace A\\B;\n\necho 1;\n","configuration":{"header":"Made with love."}},{"from":"<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n","to":"<?php\n\/**\n * Made with love.\n *\/\n\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n","configuration":{"header":"Made with love.","commentType":"PHPDoc","location":"after_open","separate":"bottom"}},{"from":"<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n","to":"<?php\ndeclare(strict_types=1);\n\n\/*\n * Made with love.\n *\/\n\nnamespace A\\B;\n\necho 1;\n","configuration":{"header":"Made with love.","commentType":"comment","location":"after_declare_strict"}}],"fullClassName":"PhpCsFixer\\Fixer\\Comment\\HeaderCommentFixer"},"heredoc_to_nowdoc":{"summary":"Convert `heredoc` to `nowdoc` where possible.","codeSamples":[{"from":"<?php $a = <<<\"TEST\"\nFoo\nTEST;\n","to":"<?php $a = <<<'TEST'\nFoo\nTEST;\n"}],"fullClassName":"PhpCsFixer\\Fixer\\StringNotation\\HeredocToNowdocFixer"},"include":{"summary":"Include\/Require and file path should be divided with a single space. File path should not be placed under brackets.","codeSamples":[{"from":"<?php\nrequire (\"sample1.php\");\nrequire_once  \"sample2.php\";\ninclude       \"sample3.php\";\ninclude_once(\"sample4.php\");\n","to":"<?php\nrequire \"sample1.php\";\nrequire_once \"sample2.php\";\ninclude \"sample3.php\";\ninclude_once \"sample4.php\";\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\IncludeFixer"},"indentation_type":{"summary":"Code MUST use configured indentation type.","codeSamples":[{"from":"<?php\n\nif (true) {\n\techo 'Hello!';\n}","to":"<?php\n\nif (true) {\n    echo 'Hello!';\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\IndentationTypeFixer"},"is_null":{"risky":true,"configuration":[{"name":"use_yoda_style","description":"Whether Yoda style conditions should be used.","defaultValue":true,"allowedTypes":["bool"]}],"summary":"Replaces is_null(parameter) expression with `null === parameter`.","riskyDescription":"Risky when the function `is_null()` is overridden.","codeSamples":[{"from":"<?php\n$a = is_null($b);","to":"<?php\n$a = null === $b;"},{"from":"<?php\n$a = is_null($b);","to":"<?php\n$a = $b === null;","configuration":{"use_yoda_style":false}}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\IsNullFixer"},"line_ending":{"summary":"All PHP files must use same line ending.","codeSamples":[{"from":"<?php $b = \" $a \r\n 123\"; $a = <<<TEST\r\nAAAAA \r\n |\r\nTEST;\n","to":"<?php $b = \" $a \r\n 123\"; $a = <<<TEST\nAAAAA \n |\nTEST;\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\LineEndingFixer"},"linebreak_after_opening_tag":{"summary":"Ensure there is no code on the same line as the PHP open tag.","codeSamples":[{"from":"<?php $a = 1;\n$b = 3;","to":"<?php\n$a = 1;\n$b = 3;"}],"fullClassName":"PhpCsFixer\\Fixer\\PhpTag\\LinebreakAfterOpeningTagFixer"},"list_syntax":{"configuration":[{"name":"syntax","description":"Whether to use the `long` or `short` `list` syntax.","defaultValue":"long","allowedValues":["long","short"]}],"summary":"List (`array` destructuring) assignment should be declared using the configured syntax. Requires PHP >= 7.1.","codeSamples":[{"from":"<?php\n[$sample] = $array;","to":"<?php\nlist($sample) = $array;"},{"from":"<?php\nlist($sample) = $array;","to":"<?php\n[$sample] = $array;","configuration":{"syntax":"short"}}],"fullClassName":"PhpCsFixer\\Fixer\\ListNotation\\ListSyntaxFixer"},"lowercase_cast":{"summary":"Cast should be written in lower case.","codeSamples":[{"from":"<?php\n    $a = (BOOLEAN) $b;\n    $a = (BOOL) $b;\n    $a = (INTEGER) $b;\n    $a = (INT) $b;\n    $a = (DOUBLE) $b;\n    $a = (FLoaT) $b;\n    $a = (reaL) $b;\n    $a = (flOAT) $b;\n    $a = (sTRING) $b;\n    $a = (ARRAy) $b;\n    $a = (OBJect) $b;\n    $a = (UNset) $b;\n    $a = (Binary) $b;\n","to":"<?php\n    $a = (boolean) $b;\n    $a = (bool) $b;\n    $a = (integer) $b;\n    $a = (int) $b;\n    $a = (double) $b;\n    $a = (float) $b;\n    $a = (real) $b;\n    $a = (float) $b;\n    $a = (string) $b;\n    $a = (array) $b;\n    $a = (object) $b;\n    $a = (unset) $b;\n    $a = (binary) $b;\n"}],"fullClassName":"PhpCsFixer\\Fixer\\CastNotation\\LowercaseCastFixer"},"lowercase_constants":{"summary":"The PHP constants `true`, `false`, and `null` MUST be in lower case.","codeSamples":[{"from":"<?php\n$a = FALSE;\n$b = True;\n$c = nuLL;","to":"<?php\n$a = false;\n$b = true;\n$c = null;"}],"fullClassName":"PhpCsFixer\\Fixer\\Casing\\LowercaseConstantsFixer"},"lowercase_keywords":{"summary":"PHP keywords MUST be in lower case.","codeSamples":[{"from":"<?php\n    FOREACH($a AS $B) {\n        TRY {\n            NEW $C($a, ISSET($B));\n            WHILE($B) {\n                INCLUDE \"test.php\";\n            }\n        } CATCH(\\Exception $e) {\n            EXIT(1);\n        }\n    }\n","to":"<?php\n    foreach($a as $B) {\n        try {\n            new $C($a, isset($B));\n            while($B) {\n                include \"test.php\";\n            }\n        } catch(\\Exception $e) {\n            exit(1);\n        }\n    }\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Casing\\LowercaseKeywordsFixer"},"magic_constant_casing":{"summary":"Magic constants should be referred to using the correct casing.","codeSamples":[{"from":"<?php\necho __dir__;","to":"<?php\necho __DIR__;"}],"fullClassName":"PhpCsFixer\\Fixer\\Casing\\MagicConstantCasingFixer"},"mb_str_functions":{"risky":true,"summary":"Replace non multibyte-safe functions with corresponding mb function.","riskyDescription":"Risky when any of the functions are overridden.","codeSamples":[{"from":"<?php\n$a = strlen($a);\n$a = strpos($a, $b);\n$a = strrpos($a, $b);\n$a = substr($a, $b);\n$a = strtolower($a);\n$a = strtoupper($a);\n$a = stripos($a, $b);\n$a = strripos($a, $b);\n$a = strstr($a, $b);\n$a = stristr($a, $b);\n$a = strrchr($a, $b);\n$a = substr_count($a, $b);\n","to":"<?php\n$a = mb_strlen($a);\n$a = mb_strpos($a, $b);\n$a = mb_strrpos($a, $b);\n$a = mb_substr($a, $b);\n$a = mb_strtolower($a);\n$a = mb_strtoupper($a);\n$a = mb_stripos($a, $b);\n$a = mb_strripos($a, $b);\n$a = mb_strstr($a, $b);\n$a = mb_stristr($a, $b);\n$a = mb_strrchr($a, $b);\n$a = mb_substr_count($a, $b);\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Alias\\MbStrFunctionsFixer"},"method_argument_space":{"configuration":[{"name":"ensure_fully_multiline","description":"Ensure every argument of a multiline argument list is on its own line","defaultValue":false,"allowedTypes":["bool"]},{"name":"keep_multiple_spaces_after_comma","description":"Whether keep multiple spaces after comma.","defaultValue":false,"allowedTypes":["bool"]}],"summary":"In method arguments and method call, there MUST NOT be a space before each comma and there MUST be one space after each comma. Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.","codeSamples":[{"from":"<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);","to":"<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);"},{"from":"<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);","to":"<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);","configuration":{"keep_multiple_spaces_after_comma":false}},{"from":"<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);","to":"<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1,  2);","configuration":{"keep_multiple_spaces_after_comma":true}},{"from":"<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,\n    2);","to":"<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);","configuration":{"ensure_fully_multiline":true}},{"from":"<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,  \n    2);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');","to":"<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');","configuration":{"ensure_fully_multiline":true,"keep_multiple_spaces_after_comma":true}},{"from":"<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,  \n    2);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');","to":"<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\nsample('foo', 'foobarbaz', 'baz');\nsample('foobar', 'bar', 'baz');","configuration":{"ensure_fully_multiline":true,"keep_multiple_spaces_after_comma":false}}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\MethodArgumentSpaceFixer"},"method_separation":{"summary":"Methods must be separated with one blank line.","codeSamples":[{"from":"<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n    protected function bar()\n    {\n    }\n}\n","to":"<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n\n    protected function bar()\n    {\n    }\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\MethodSeparationFixer"},"modernize_types_casting":{"risky":true,"summary":"Replaces `intval`, `floatval`, `doubleval`, `strval` and `boolval` function calls with according type casting operator.","riskyDescription":"Risky if any of the functions `intval`, `floatval`, `doubleval`, `strval` or `boolval` are overridden.","codeSamples":[{"from":"<?php\n    $a = intval($b);\n    $a = floatval($b);\n    $a = doubleval($b);\n    $a = strval ($b);\n    $a = boolval($b);\n","to":"<?php\n    $a = (int) $b;\n    $a = (float) $b;\n    $a = (float) $b;\n    $a = (string) $b;\n    $a = (bool) $b;\n"}],"fullClassName":"PhpCsFixer\\Fixer\\CastNotation\\ModernizeTypesCastingFixer"},"native_function_casing":{"summary":"Function defined by PHP should be called using the correct casing.","codeSamples":[{"from":"<?php\nSTRLEN($str);","to":"<?php\nstrlen($str);"}],"fullClassName":"PhpCsFixer\\Fixer\\Casing\\NativeFunctionCasingFixer"},"native_function_invocation":{"risky":true,"configuration":[{"name":"exclude","description":"List of functions to ignore.","defaultValue":[],"allowedTypes":["array"]}],"summary":"Add leading `\\` before function invocation of internal function to speed up resolving.","riskyDescription":"Risky when any of the functions are overridden.","codeSamples":[{"from":"<?php\n\nfunction baz($options)\n{\n    if (!array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}","to":"<?php\n\nfunction baz($options)\n{\n    if (!\\array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return \\json_encode($options);\n}"},{"from":"<?php\n\nfunction baz($options)\n{\n    if (!array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}","to":"<?php\n\nfunction baz($options)\n{\n    if (!\\array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}","configuration":{"exclude":["json_encode"]}}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\NativeFunctionInvocationFixer"},"new_with_braces":{"summary":"All instances created with new keyword must be followed by braces.","codeSamples":[{"from":"<?php $x = new X;","to":"<?php $x = new X();"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\NewWithBracesFixer"},"no_alias_functions":{"risky":true,"summary":"Master functions shall be used instead of aliases.","riskyDescription":"Risky when any of the alias functions are overridden.","codeSamples":[{"from":"<?php\n$a = chop($b);\nclose($b);\n$a = doubleval($b);\n$a = fputs($b, $c);\nini_alter($b, $c);\n$a = is_double($b);\n$a = is_integer($b);\n$a = is_long($b);\n$a = is_real($b);\n$a = is_writeable($b);\n$a = join($glue, $pieces);\n$a = key_exists($key, $array);\nmagic_quotes_runtime($new_setting);\n$a = pos($array);\n$a = show_source($filename, true);\n$a = sizeof($b);\n$a = strchr($haystack, $needle);\n","to":"<?php\n$a = rtrim($b);\nclosedir($b);\n$a = floatval($b);\n$a = fwrite($b, $c);\nini_set($b, $c);\n$a = is_float($b);\n$a = is_int($b);\n$a = is_int($b);\n$a = is_float($b);\n$a = is_writable($b);\n$a = implode($glue, $pieces);\n$a = array_key_exists($key, $array);\nset_magic_quotes_runtime($new_setting);\n$a = current($array);\n$a = highlight_file($filename, true);\n$a = count($b);\n$a = strstr($haystack, $needle);\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Alias\\NoAliasFunctionsFixer"},"no_blank_lines_after_class_opening":{"summary":"There should be no empty lines after class opening brace.","codeSamples":[{"from":"<?php\nfinal class Sample\n{\n\n    protected function foo()\n    {\n    }\n}\n","to":"<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\NoBlankLinesAfterClassOpeningFixer"},"no_blank_lines_after_phpdoc":{"summary":"There should not be blank lines between docblock and the documented element.","codeSamples":[{"from":"<?php\n\n\/**\n * This is the bar class.\n *\/\n\n\nclass Bar {}\n","to":"<?php\n\n\/**\n * This is the bar class.\n *\/\nclass Bar {}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\NoBlankLinesAfterPhpdocFixer"},"no_blank_lines_before_namespace":{"summary":"There should be no blank lines before a namespace declaration.","codeSamples":[{"from":"<?php\n\n\n\nnamespace Example;","to":"<?php\nnamespace Example;"}],"fullClassName":"PhpCsFixer\\Fixer\\NamespaceNotation\\NoBlankLinesBeforeNamespaceFixer"},"no_break_comment":{"configuration":[{"name":"comment_text","description":"The text to use in the added comment and to detect it.","defaultValue":"no break","allowedTypes":["string"]}],"summary":"There must be a comment when fall-through is intentional in a non-empty case body.","description":"Adds a \"no break\" comment before fall-through cases, and removes it if there is no fall-through.","codeSamples":[{"from":"<?php\nswitch ($foo) {\n    case 1:\n        foo();\n    case 2:\n        bar();\n        \/\/ no break\n        break;\n    case 3:\n        baz();\n}","to":"<?php\nswitch ($foo) {\n    case 1:\n        foo();\n        \/\/ no break\n    case 2:\n        bar();\n        break;\n    case 3:\n        baz();\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\NoBreakCommentFixer"},"no_closing_tag":{"summary":"The closing `?>` tag MUST be omitted from files containing only PHP.","codeSamples":[{"from":"<?php\nclass Sample\n{\n}\n?>","to":"<?php\nclass Sample\n{\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\PhpTag\\NoClosingTagFixer"},"no_empty_comment":{"summary":"There should not be any empty comments.","codeSamples":[{"from":"<?php\n\/\/\n#\n\/* *\/\n","to":"<?php\n\n\n\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Comment\\NoEmptyCommentFixer"},"no_empty_phpdoc":{"summary":"There should not be empty PHPDoc blocks.","codeSamples":[{"from":"<?php \/**  *\/","to":"<?php "}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\NoEmptyPhpdocFixer"},"no_empty_statement":{"summary":"Remove useless semicolon statements.","codeSamples":[{"from":"<?php $a = 1;;","to":"<?php $a = 1;"}],"fullClassName":"PhpCsFixer\\Fixer\\Semicolon\\NoEmptyStatementFixer"},"no_extra_consecutive_blank_lines":{"configuration":[{"name":"tokens","description":"List of tokens to fix.","defaultValue":["extra"],"allowedTypes":["array"]}],"summary":"Removes extra blank lines and\/or blank lines following configuration.","codeSamples":[{"from":"<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";","to":"<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";"},{"from":"<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n\n    case 42:\n        break;\n}","to":"<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n    case 42:\n        break;\n}","configuration":{"tokens":["break"]}},{"from":"<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n\n    }\n}","to":"<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n    }\n}","configuration":{"tokens":["continue"]}},{"from":"<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n\n    echo $i;\n\n}","to":"<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    echo $i;\n}","configuration":{"tokens":["curly_brace_block"]}},{"from":"<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";","to":"<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";","configuration":{"tokens":["extra"]}},{"from":"<?php\n\n$foo = array(\n\n    \"foo\"\n\n);","to":"<?php\n\n$foo = array(\n    \"foo\"\n);","configuration":{"tokens":["parenthesis_brace_block"]}},{"from":"<?php\n\nfunction foo($bar)\n{\n    return $bar;\n\n}","to":"<?php\n\nfunction foo($bar)\n{\n    return $bar;\n}","configuration":{"tokens":["return"]}},{"from":"<?php\n\n$foo = [\n\n    \"foo\"\n\n];","to":"<?php\n\n$foo = [\n    \"foo\"\n];","configuration":{"tokens":["square_brace_block"]}},{"from":"<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n\n}","to":"<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n}","configuration":{"tokens":["throw"]}},{"from":"<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\n\nuse Baz\\Bar;\n\nclass Bar\n{\n}","to":"<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\nuse Baz\\Bar;\n\nclass Bar\n{\n}","configuration":{"tokens":["use"]}},{"from":"<?php\n\nclass Foo\n{\n    use Bar;\n\n    use Baz;\n}","to":"<?php\n\nclass Foo\n{\n    use Bar;\n    use Baz;\n}","configuration":{"tokens":["use_trait"]}},{"from":"<?php\nswitch($a) {\n\n    case 1:\n\n    default:\n\n        echo 3;\n}","to":"<?php\nswitch($a) {\n    case 1:\n    default:\n        echo 3;\n}","configuration":{"tokens":["switch","case","default"]}}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\NoExtraConsecutiveBlankLinesFixer"},"no_homoglyph_names":{"risky":true,"summary":"Replace accidental usage of homoglyphs (non ascii characters) in names.","riskyDescription":"Renames classes and cannot rename the files. You might have string references to renamed code (`$$name`).","codeSamples":[{"from":"<?php $n\u0430m\u0435 = 'wrong \"a\" character';","to":"<?php $name = 'wrong \"a\" character';"}],"fullClassName":"PhpCsFixer\\Fixer\\Naming\\NoHomoglyphNamesFixer"},"no_leading_import_slash":{"summary":"Remove leading slashes in use clauses.","codeSamples":[{"from":"<?php\nnamespace Foo;\nuse \\Bar;","to":"<?php\nnamespace Foo;\nuse Bar;"}],"fullClassName":"PhpCsFixer\\Fixer\\Import\\NoLeadingImportSlashFixer"},"no_leading_namespace_whitespace":{"summary":"The namespace declaration line shouldn't contain leading whitespace.","codeSamples":[{"from":"<?php\n namespace Test8a;\n    namespace Test8b;","to":"<?php\nnamespace Test8a;\nnamespace Test8b;"}],"fullClassName":"PhpCsFixer\\Fixer\\NamespaceNotation\\NoLeadingNamespaceWhitespaceFixer"},"no_mixed_echo_print":{"configuration":[{"name":"use","description":"The desired language construct.","defaultValue":"echo","allowedValues":["print","echo"]}],"summary":"Either language construct `print` or `echo` should be used.","codeSamples":[{"from":"<?php print 'example';","to":"<?php echo 'example';"},{"from":"<?php echo('example');","to":"<?php print('example');","configuration":{"use":"print"}}],"fullClassName":"PhpCsFixer\\Fixer\\Alias\\NoMixedEchoPrintFixer"},"no_multiline_whitespace_around_double_arrow":{"summary":"Operator `=>` should not be surrounded by multi-line whitespaces.","codeSamples":[{"from":"<?php\n$a = array(1\n\n=> 2);","to":"<?php\n$a = array(1 => 2);"}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\NoMultilineWhitespaceAroundDoubleArrowFixer"},"no_multiline_whitespace_before_semicolons":{"summary":"Multi-line whitespace before closing semicolon are prohibited.","codeSamples":[{"from":"<?php\nfunction foo () {\n    return 1 + 2\n        ;\n}\n","to":"<?php\nfunction foo () {\n    return 1 + 2;\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Semicolon\\NoMultilineWhitespaceBeforeSemicolonsFixer"},"no_null_property_initialization":{"summary":"Properties MUST not be explicitly initialized with `null`.","codeSamples":[{"from":"<?php\nclass Foo {\n    public $foo = null;\n}","to":"<?php\nclass Foo {\n    public $foo;\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\NoNullPropertyInitializationFixer"},"no_php4_constructor":{"risky":true,"summary":"Convert PHP4-style constructors to `__construct`.","riskyDescription":"Risky when old style constructor being fixed is overridden or overrides parent one.","codeSamples":[{"from":"<?php\nclass Foo\n{\n    public function Foo($bar)\n    {\n    }\n}","to":"<?php\nclass Foo\n{\n    public function __construct($bar)\n    {\n    }\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\NoPhp4ConstructorFixer"},"no_short_bool_cast":{"summary":"Short cast `bool` using double exclamation mark should not be used.","codeSamples":[{"from":"<?php\n$a = !!$b;","to":"<?php\n$a = (bool)$b;"}],"fullClassName":"PhpCsFixer\\Fixer\\CastNotation\\NoShortBoolCastFixer"},"no_short_echo_tag":{"summary":"Replace short-echo `<?=` with long format `<?php echo` syntax.","codeSamples":[{"from":"<?= \"foo\";","to":"<?php echo \"foo\";"}],"fullClassName":"PhpCsFixer\\Fixer\\PhpTag\\NoShortEchoTagFixer"},"no_singleline_whitespace_before_semicolons":{"summary":"Single-line whitespace before closing semicolon are prohibited.","codeSamples":[{"from":"<?php $this->foo() ;","to":"<?php $this->foo();"}],"fullClassName":"PhpCsFixer\\Fixer\\Semicolon\\NoSinglelineWhitespaceBeforeSemicolonsFixer"},"no_spaces_after_function_name":{"summary":"When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis.","codeSamples":[{"from":"<?php\nrequire ('sample.php');\necho (test (3));\nexit  (1);\n$func ();","to":"<?php\nrequire('sample.php');\necho(test(3));\nexit(1);\n$func();"}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\NoSpacesAfterFunctionNameFixer"},"no_spaces_around_offset":{"configuration":[{"name":"positions","description":"Whether spacing should be fixed inside and\/or outside the offset braces.","defaultValue":["inside","outside"],"allowedTypes":["array"]}],"summary":"There MUST NOT be spaces around offset braces.","codeSamples":[{"from":"<?php\n$sample = $b [ 'a' ] [ 'b' ];","to":"<?php\n$sample = $b['a']['b'];"},{"from":"<?php\n$sample = $b [ 'a' ] [ 'b' ];","to":"<?php\n$sample = $b ['a'] ['b'];","configuration":{"positions":["inside"]}},{"from":"<?php\n$sample = $b [ 'a' ] [ 'b' ];","to":"<?php\n$sample = $b[ 'a' ][ 'b' ];","configuration":{"positions":["outside"]}}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\NoSpacesAroundOffsetFixer"},"no_spaces_inside_parenthesis":{"summary":"There MUST NOT be a space after the opening parenthesis. There MUST NOT be a space before the closing parenthesis.","codeSamples":[{"from":"<?php\nif ( $a ) {\n    foo( );\n}","to":"<?php\nif ($a) {\n    foo();\n}"},{"from":"<?php\nfunction foo( $bar, $baz )\n{\n}","to":"<?php\nfunction foo($bar, $baz)\n{\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\NoSpacesInsideParenthesisFixer"},"no_superfluous_elseif":{"summary":"Replaces superfluous `elseif` with `if`.","codeSamples":[{"from":"<?php\nif ($a) {\n    return 1;\n} elseif ($b) {\n    return 2;\n}","to":"<?php\nif ($a) {\n    return 1;\n}\nif ($b) {\n    return 2;\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\NoSuperfluousElseifFixer"},"no_trailing_comma_in_list_call":{"summary":"Remove trailing commas in list function calls.","codeSamples":[{"from":"<?php\nlist($a, $b,) = foo();","to":"<?php\nlist($a, $b) = foo();"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\NoTrailingCommaInListCallFixer"},"no_trailing_comma_in_singleline_array":{"summary":"PHP single-line arrays should not have trailing comma.","codeSamples":[{"from":"<?php\n$a = array('sample',  );","to":"<?php\n$a = array('sample');"}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\NoTrailingCommaInSinglelineArrayFixer"},"no_trailing_whitespace":{"summary":"Remove trailing whitespace at the end of non-blank lines.","codeSamples":[{"from":"<?php\n$a = 1;     \n","to":"<?php\n$a = 1;\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\NoTrailingWhitespaceFixer"},"no_trailing_whitespace_in_comment":{"summary":"There MUST be no trailing spaces inside comments and phpdocs.","codeSamples":[{"from":"<?php\n\/\/ This is \n\/\/ a comment. \n","to":"<?php\n\/\/ This is\n\/\/ a comment.\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Comment\\NoTrailingWhitespaceInCommentFixer"},"no_unneeded_control_parentheses":{"configuration":[{"name":"statements","description":"List of control statements to fix.","defaultValue":["break","clone","continue","echo_print","return","switch_case","yield"],"allowedTypes":["array"]}],"summary":"Removes unneeded parentheses around control statements.","codeSamples":[{"from":"<?php\nwhile ($x) { while ($y) { break (2); } }\nclone($a);\nwhile ($y) { continue (2); }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n","to":"<?php\nwhile ($x) { while ($y) { break 2; } }\nclone $a;\nwhile ($y) { continue 2; }\necho \"foo\";\nprint \"foo\";\nreturn 1 + 2;\nswitch ($a) { case $x; }\nyield 2;\n"},{"from":"<?php\nwhile ($x) { while ($y) { break (2); } }\nclone($a);\nwhile ($y) { continue (2); }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n","to":"<?php\nwhile ($x) { while ($y) { break 2; } }\nclone($a);\nwhile ($y) { continue 2; }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n","configuration":{"statements":["break","continue"]}}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\NoUnneededControlParenthesesFixer"},"no_unneeded_curly_braces":{"summary":"Removes unneeded curly braces that are superfluous and aren't part of a control structure's body.","codeSamples":[{"from":"<?php {\n    echo 1;\n}\n\nswitch ($b) {\n    case 1: {\n        break;\n    }\n}\n","to":"<?php \n    echo 1;\n\n\nswitch ($b) {\n    case 1: \n        break;\n    \n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\NoUnneededCurlyBracesFixer"},"no_unneeded_final_method":{"summary":"A final class must not have final methods.","codeSamples":[{"from":"<?php\nfinal class Foo {\n    final public function foo() {}\n    final protected function bar() {}\n    final private function baz() {}\n}","to":"<?php\nfinal class Foo {\n    public function foo() {}\n    protected function bar() {}\n    private function baz() {}\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\NoUnneededFinalMethodFixer"},"no_unreachable_default_argument_value":{"risky":true,"summary":"In function arguments there must not be arguments with default values before non-default ones.","riskyDescription":"Modifies the signature of functions; therefore risky when using systems (such as some Symfony components) that rely on those (for example through reflection).","codeSamples":[{"from":"<?php\nfunction example($foo = \"two words\", $bar) {}\n","to":"<?php\nfunction example($foo, $bar) {}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\NoUnreachableDefaultArgumentValueFixer"},"no_unused_imports":{"summary":"Unused use statements must be removed.","codeSamples":[{"from":"<?php\nuse \\DateTime;\nuse \\Exception;\n\nnew DateTime();","to":"<?php\nuse \\DateTime;\n\nnew DateTime();"}],"fullClassName":"PhpCsFixer\\Fixer\\Import\\NoUnusedImportsFixer"},"no_useless_else":{"summary":"There should not be useless `else` cases.","codeSamples":[{"from":"<?php\nif ($a) {\n    return 1;\n} else {\n    return 2;\n}","to":"<?php\nif ($a) {\n    return 1;\n}  \n    return 2;\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\NoUselessElseFixer"},"no_useless_return":{"summary":"There should not be an empty return statement at the end of a function.","codeSamples":[{"from":"<?php\nfunction example($b) {\n    if ($b) {\n        return;\n    }\n    return;\n}\n","to":"<?php\nfunction example($b) {\n    if ($b) {\n        return;\n    }\n    \n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ReturnNotation\\NoUselessReturnFixer"},"no_whitespace_before_comma_in_array":{"summary":"In array declaration, there MUST NOT be a whitespace before each comma.","codeSamples":[{"from":"<?php $x = array(1 , \"2\");","to":"<?php $x = array(1, \"2\");"}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\NoWhitespaceBeforeCommaInArrayFixer"},"no_whitespace_in_blank_line":{"summary":"Remove trailing whitespace at the end of blank lines.","codeSamples":[{"from":"<?php\n   \n$a = 1;","to":"<?php\n\n$a = 1;"}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\NoWhitespaceInBlankLineFixer"},"non_printable_character":{"risky":true,"configuration":[{"name":"use_escape_sequences_in_strings","description":"Whether characters should be replaced with escape sequences in strings.","defaultValue":false,"allowedTypes":["bool"]}],"summary":"Remove Zero-width space (ZWSP), Non-breaking space (NBSP) and other invisible unicode symbols.","riskyDescription":"Risky when strings contain intended invisible characters.","codeSamples":[{"from":"<?php echo \"\u200bHello\u2007World\u00a0!\";","to":"<?php echo \"Hello World !\";"},{"from":"<?php echo \"\u200bHello\u2007World\u00a0!\";","to":"<?php echo \"\\u{200b}Hello\\u{2007}World\\u{a0}!\";","configuration":{"use_escape_sequences_in_strings":true}}],"fullClassName":"PhpCsFixer\\Fixer\\Basic\\NonPrintableCharacterFixer"},"normalize_index_brace":{"summary":"Array index should always be written by using square braces.","codeSamples":[{"from":"<?php\necho $sample{$index};","to":"<?php\necho $sample[$index];"}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\NormalizeIndexBraceFixer"},"not_operator_with_space":{"summary":"Logical NOT operators (`!`) should have leading and trailing whitespaces.","codeSamples":[{"from":"<?php\n\nif (!$bar) {\n    echo \"Help!\";\n}\n","to":"<?php\n\nif ( ! $bar) {\n    echo \"Help!\";\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\NotOperatorWithSpaceFixer"},"not_operator_with_successor_space":{"summary":"Logical NOT operators (`!`) should have one trailing whitespace.","codeSamples":[{"from":"<?php\n\nif (!$bar) {\n    echo \"Help!\";\n}\n","to":"<?php\n\nif (! $bar) {\n    echo \"Help!\";\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\NotOperatorWithSuccessorSpaceFixer"},"object_operator_without_whitespace":{"summary":"There should not be space before or after object `T_OBJECT_OPERATOR` `->`.","codeSamples":[{"from":"<?php $a  ->  b;","to":"<?php $a->b;"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\ObjectOperatorWithoutWhitespaceFixer"},"ordered_class_elements":{"configuration":[{"name":"order","description":"List of strings defining order of elements.","defaultValue":["use_trait","constant_public","constant_protected","constant_private","property_public","property_protected","property_private","construct","destruct","magic","phpunit","method_public","method_protected","method_private"],"allowedTypes":["array"]}],"summary":"Orders the elements of classes\/interfaces\/traits.","codeSamples":[{"from":"<?php\nfinal class Example\n{\n    use BarTrait;\n    use BazTrait;\n    const C1 = 1;\n    const C2 = 2;\n    protected static $protStatProp;\n    public static $pubStatProp1;\n    public $pubProp1;\n    protected $protProp;\n    var $pubProp2;\n    private static $privStatProp;\n    private $privProp;\n    public static $pubStatProp2;\n    public $pubProp3;\n    protected function __construct() {}\n    private static function privStatFunc() {}\n    public function pubFunc1() {}\n    public function __toString() {}\n    protected function protFunc() {}\n    function pubFunc2() {}\n    public static function pubStatFunc1() {}\n    public function pubFunc3() {}\n    static function pubStatFunc2() {}\n    private function privFunc() {}\n    public static function pubStatFunc3() {}\n    protected static function protStatFunc() {}\n    public function __destruct() {}\n}\n","to":"<?php\nfinal class Example\n{\n    use BarTrait;\n    use BazTrait;\n    const C1 = 1;\n    const C2 = 2;\n    public static $pubStatProp1;\n    public $pubProp1;\n    var $pubProp2;\n    public static $pubStatProp2;\n    public $pubProp3;\n    protected static $protStatProp;\n    protected $protProp;\n    private static $privStatProp;\n    private $privProp;\n    protected function __construct() {}\n    public function __destruct() {}\n    public function __toString() {}\n    public function pubFunc1() {}\n    function pubFunc2() {}\n    public static function pubStatFunc1() {}\n    public function pubFunc3() {}\n    static function pubStatFunc2() {}\n    public static function pubStatFunc3() {}\n    protected function protFunc() {}\n    protected static function protStatFunc() {}\n    private static function privStatFunc() {}\n    private function privFunc() {}\n}\n"},{"from":"<?php\nclass Example\n{\n    public function A(){}\n    private function B(){}\n}","to":"<?php\nclass Example\n{\n    private function B(){}\n    public function A(){}\n}","configuration":{"order":["method_private","method_public"]}}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer"},"ordered_imports":{"configuration":[{"name":"importsOrder","description":"Defines the order of import types.","defaultValue":null,"allowedTypes":["array","null"]},{"name":"sortAlgorithm","description":"whether the statements should be sorted alphabetically or by length","defaultValue":"alpha","allowedValues":["alpha","length"]}],"summary":"Ordering use statements.","codeSamples":[{"from":"<?php\nuse Z; use A;","to":"<?php\nuse A; use Z;"},{"from":"<?php\nuse Bar1;\nuse Acme;\nuse Barr;\nuse Acme\\Bar;\n","to":"<?php\nuse Acme;\nuse Bar1;\nuse Barr;\nuse Acme\\Bar;\n","configuration":{"sortAlgorithm":"length"}},{"from":"<?php\nuse function AAA;\nuse const AAB;\nuse AAC;","to":"<?php\nuse AAC;\nuse const AAB;\nuse function AAA;"},{"from":"<?php\nuse const AAAA;\nuse const BBB;\n\nuse Bar;\nuse AAC;\nuse Acme;\n\nuse function CCC\\AA;\nuse function DDD;\n","to":"<?php\nuse const BBB;\nuse const AAAA;\n\nuse AAC;\nuse Bar;\nuse Acme;\n\nuse function DDD;\nuse function CCC\\AA;\n","configuration":{"sortAlgorithm":"length","importsOrder":["const","class","function"]}},{"from":"<?php\nuse const BBB;\nuse const AAAA;\n\nuse Acme;\nuse AAC;\nuse Bar;\n\nuse function DDD;\nuse function CCC\\AA;\n","to":"<?php\nuse const AAAA;\nuse const BBB;\n\nuse AAC;\nuse Acme;\nuse Bar;\n\nuse function CCC\\AA;\nuse function DDD;\n","configuration":{"sortAlgorithm":"alpha","importsOrder":["const","class","function"]}}],"fullClassName":"PhpCsFixer\\Fixer\\Import\\OrderedImportsFixer"},"php_unit_construct":{"risky":true,"configuration":[{"name":"assertions","description":"List of assertion methods to fix.","defaultValue":["assertEquals","assertSame","assertNotEquals","assertNotSame"],"allowedTypes":["array"]}],"summary":"PHPUnit assertion method calls like \"->assertSame(true, $foo)\" should be written with dedicated method like \"->assertTrue($foo)\".","riskyDescription":"Fixer could be risky if one is overriding PHPUnit's native methods.","codeSamples":[{"from":"<?php\n$this->assertEquals(false, $b);\n$this->assertSame(true, $a);\n$this->assertNotEquals(null, $c);\n$this->assertNotSame(null, $d);\n","to":"<?php\n$this->assertFalse($b);\n$this->assertTrue($a);\n$this->assertNotNull($c);\n$this->assertNotNull($d);\n"},{"from":"<?php\n$this->assertEquals(false, $b);\n$this->assertSame(true, $a);\n$this->assertNotEquals(null, $c);\n$this->assertNotSame(null, $d);\n","to":"<?php\n$this->assertEquals(false, $b);\n$this->assertTrue($a);\n$this->assertNotEquals(null, $c);\n$this->assertNotNull($d);\n","configuration":{"assertions":["assertSame","assertNotSame"]}}],"fullClassName":"PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitConstructFixer"},"php_unit_dedicate_assert":{"risky":true,"configuration":[{"name":"functions","description":"List of assertions to fix.","defaultValue":["array_key_exists","empty","file_exists","is_infinite","is_nan","is_null","is_array","is_bool","is_boolean","is_callable","is_double","is_float","is_int","is_integer","is_long","is_numeric","is_object","is_real","is_resource","is_scalar","is_string"],"allowedTypes":["array"]}],"summary":"PHPUnit assertions like \"assertInternalType\", \"assertFileExists\", should be used over \"assertTrue\".","riskyDescription":"Fixer could be risky if one is overriding PHPUnit's native methods.","codeSamples":[{"from":"<?php\n$this->assertTrue(is_float( $a), \"my message\");\n$this->assertTrue(is_nan($a));\n","to":"<?php\n$this->assertInternalType('float', $a, \"my message\");\n$this->assertNan($a);\n"},{"from":"<?php\n$this->assertTrue(is_float( $a), \"my message\");\n$this->assertTrue(is_nan($a));\n","to":"<?php\n$this->assertTrue(is_float( $a), \"my message\");\n$this->assertNan($a);\n","configuration":{"functions":["is_nan"]}}],"fullClassName":"PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertFixer"},"php_unit_fqcn_annotation":{"summary":"PHPUnit annotations should be a FQCNs including a root namespace.","codeSamples":[{"from":"<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException InvalidArgumentException\n     * @covers Project\\NameSpace\\Something\n     * @coversDefaultClass Project\\Default\n     * @uses Project\\Test\\Util\n     *\/\n    public function testSomeTest()\n    {\n    }\n}\n","to":"<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException \\InvalidArgumentException\n     * @covers \\Project\\NameSpace\\Something\n     * @coversDefaultClass \\Project\\Default\n     * @uses \\Project\\Test\\Util\n     *\/\n    public function testSomeTest()\n    {\n    }\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitFqcnAnnotationFixer"},"php_unit_strict":{"risky":true,"configuration":[{"name":"assertions","description":"List of assertion methods to fix.","defaultValue":["assertAttributeEquals","assertAttributeNotEquals","assertEquals","assertNotEquals"],"allowedTypes":["array"]}],"summary":"PHPUnit methods like `assertSame` should be used instead of `assertEquals`.","riskyDescription":"Risky when any of the functions are overridden.","codeSamples":[{"from":"<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertEquals(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}\n","to":"<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeSame(a(), b());\n        $this->assertAttributeNotSame(a(), b());\n        $this->assertSame(a(), b());\n        $this->assertNotSame(a(), b());\n    }\n}\n"},{"from":"<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertEquals(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}","to":"<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertSame(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}","configuration":{"assertions":["assertEquals"]}}],"fullClassName":"PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitStrictFixer"},"php_unit_test_class_requires_covers":{"summary":"Adds a default `@coversNothing` annotation to PHPUnit test classes that have no `@covers*` annotation.","codeSamples":[{"from":"<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertSame(a(), b());\n    }\n}\n","to":"<?php\n\n\/**\n * @coversNothing\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertSame(a(), b());\n    }\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestClassRequiresCoversFixer"},"phpdoc_add_missing_param_annotation":{"configuration":[{"name":"only_untyped","description":"Whether to add missing `@param` annotations for untyped parameters only.","defaultValue":true,"allowedTypes":["bool"]}],"summary":"Phpdoc should contain @param for all params.","codeSamples":[{"from":"<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}","to":"<?php\n\/**\n * @param int $bar\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}"},{"from":"<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}","to":"<?php\n\/**\n * @param int $bar\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}","configuration":{"only_untyped":true}},{"from":"<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}","to":"<?php\n\/**\n * @param int $bar\n * @param string $foo\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}","configuration":{"only_untyped":false}}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAddMissingParamAnnotationFixer"},"phpdoc_align":{"configuration":[{"name":"tags","description":"The tags that should be aligned.","defaultValue":["param","return","throws","type","var"],"allowedTypes":["array"]}],"summary":"All items of the given phpdoc tags must be aligned vertically.","codeSamples":[{"from":"<?php\n\/**\n * @param  EngineInterface $templating\n * @param string      $format\n * @param  int  $code       an HTTP response status code\n * @param    bool         $debug\n * @param  mixed    &$reference     a parameter passed by reference\n *\/\n","to":"<?php\n\/**\n * @param EngineInterface $templating\n * @param string          $format\n * @param int             $code       an HTTP response status code\n * @param bool            $debug\n * @param mixed           &$reference a parameter passed by reference\n *\/\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAlignFixer"},"phpdoc_annotation_without_dot":{"summary":"Phpdocs annotation descriptions should not be a sentence.","codeSamples":[{"from":"<?php\n\/**\n * @param string $bar Some string.\n *\/\nfunction foo ($bar) {}\n","to":"<?php\n\/**\n * @param string $bar some string\n *\/\nfunction foo ($bar) {}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAnnotationWithoutDotFixer"},"phpdoc_indent":{"summary":"Docblocks should have the same indentation as the documented subject.","codeSamples":[{"from":"<?php\nclass DocBlocks\n{\n\/**\n * Test constants\n *\/\n    const INDENT = 1;\n}\n","to":"<?php\nclass DocBlocks\n{\n    \/**\n     * Test constants\n     *\/\n    const INDENT = 1;\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocIndentFixer"},"phpdoc_inline_tag":{"summary":"Fix phpdoc inline tags, make inheritdoc always inline.","codeSamples":[{"from":"<?php\n\/**\n * @{TUTORIAL}\n * {{ @link }}\n * {@examples}\n * @inheritdocs\n *\/\n","to":"<?php\n\/**\n * {@tutorial}\n * {@link}\n * {@example}\n * {@inheritdoc}\n *\/\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocInlineTagFixer"},"phpdoc_no_access":{"summary":"@access annotations should be omitted from phpdocs.","codeSamples":[{"from":"<?php\nclass Foo\n{\n    \/**\n     * @internal\n     * @access private\n     *\/\n    private $bar;\n}","to":"<?php\nclass Foo\n{\n    \/**\n     * @internal\n     *\/\n    private $bar;\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoAccessFixer"},"phpdoc_no_alias_tag":{"configuration":[{"name":"replacements","description":"Mapping between replaced annotations with new ones.","defaultValue":{"property-read":"property","property-write":"property","type":"var","link":"see"},"allowedTypes":["array"]}],"summary":"No alias PHPDoc tags should be used.","codeSamples":[{"from":"<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @link baz\n *\/\nfinal class Example\n{\n}\n","to":"<?php\n\/**\n * @property string $foo\n * @property string $bar\n *\n * @see baz\n *\/\nfinal class Example\n{\n}\n"},{"from":"<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @link baz\n *\/\nfinal class Example\n{\n}\n","to":"<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @website baz\n *\/\nfinal class Example\n{\n}\n","configuration":{"replacements":{"link":"website"}}}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoAliasTagFixer"},"phpdoc_no_empty_return":{"summary":"@return void and @return null annotations should be omitted from phpdocs.","codeSamples":[{"from":"<?php\n\/**\n * @return null\n*\/\nfunction foo() {}\n","to":"<?php\n\/**\n*\/\nfunction foo() {}\n"},{"from":"<?php\n\/**\n * @return void\n*\/\nfunction foo() {}\n","to":"<?php\n\/**\n*\/\nfunction foo() {}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoEmptyReturnFixer"},"phpdoc_no_package":{"summary":"@package and @subpackage annotations should be omitted from phpdocs.","codeSamples":[{"from":"<?php\n\/**\n * @internal\n * @package Foo\n * subpackage Bar\n *\/\nclass Baz\n{\n}","to":"<?php\n\/**\n * @internal\n *\/\nclass Baz\n{\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoPackageFixer"},"phpdoc_no_useless_inheritdoc":{"summary":"Classy that does not inherit must not have inheritdoc tags.","codeSamples":[{"from":"<?php\n\/** {@inheritdoc} *\/\nclass Sample\n{\n}","to":"<?php\n\/** *\/\nclass Sample\n{\n}"},{"from":"<?php\nclass Sample\n{\n    \/**\n     * @inheritdoc\n     *\/\n    public function Test()\n    {\n    }\n}","to":"<?php\nclass Sample\n{\n    \/**\n     * \n     *\/\n    public function Test()\n    {\n    }\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoUselessInheritdocFixer"},"phpdoc_order":{"summary":"Annotations in phpdocs should be ordered so that param annotations come first, then throws annotations, then return annotations.","codeSamples":[{"from":"<?php\n\/**\n * Hello there!\n *\n * @throws Exception|RuntimeException dfsdf\n * @custom Test!\n * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n *\/\n","to":"<?php\n\/**\n * Hello there!\n *\n * @custom Test!\n * @param string $foo\n * @param bool   $bar Bar\n * @throws Exception|RuntimeException dfsdf\n * @return int  Return the number of changes.\n *\/\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocOrderFixer"},"phpdoc_return_self_reference":{"configuration":[{"name":"replacements","description":"Mapping between replaced return types with new ones.","defaultValue":{"this":"$this","@this":"$this","$self":"self","@self":"self","$static":"static","@static":"static"},"allowedTypes":["array"]}],"summary":"The type of `@return` annotations of methods returning a reference to itself must the configured one.","codeSamples":[{"from":"<?php\nclass Sample\n{\n    \/**\n     * @return this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}","to":"<?php\nclass Sample\n{\n    \/**\n     * @return $this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}"},{"from":"<?php\nclass Sample\n{\n    \/**\n     * @return this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}","to":"<?php\nclass Sample\n{\n    \/**\n     * @return self\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}","configuration":{"replacements":{"this":"self"}}}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocReturnSelfReferenceFixer"},"phpdoc_scalar":{"summary":"Scalar types should always be written in the same form. `int` not `integer`, `bool` not `boolean`, `float` not `real` or `double`.","codeSamples":[{"from":"<?php\n\/**\n * @param integer $a\n * @param boolean $b\n * @param real $c\n *\n * @return double\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}","to":"<?php\n\/**\n * @param int $a\n * @param bool $b\n * @param float $c\n *\n * @return float\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocScalarFixer"},"phpdoc_separation":{"summary":"Annotations in phpdocs should be grouped together so that annotations of the same type immediately follow each other, and annotations of a different type are separated by a single blank line.","codeSamples":[{"from":"<?php\n\/**\n * Description.\n * @param string $foo\n *\n *\n * @param bool   $bar Bar\n * @throws Exception|RuntimeException\n * @return bool\n *\/\nfunction fnc($foo, $bar) {}","to":"<?php\n\/**\n * Description.\n *\n * @param string $foo\n * @param bool   $bar Bar\n *\n * @throws Exception|RuntimeException\n *\n * @return bool\n *\/\nfunction fnc($foo, $bar) {}"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSeparationFixer"},"phpdoc_single_line_var_spacing":{"summary":"Single line @var PHPDoc should have proper spacing.","codeSamples":[{"from":"<?php \/**@var   MyClass   $a   *\/\n$a = test();","to":"<?php \/** @var MyClass $a *\/\n$a = test();"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSingleLineVarSpacingFixer"},"phpdoc_summary":{"summary":"Phpdocs summary should end in either a full stop, exclamation mark, or question mark.","codeSamples":[{"from":"<?php\n\/**\n * Foo function is great\n *\/\nfunction foo () {}\n","to":"<?php\n\/**\n * Foo function is great.\n *\/\nfunction foo () {}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSummaryFixer"},"phpdoc_to_comment":{"summary":"Docblocks should only be used on structural elements.","codeSamples":[{"from":"<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/** This should not be a docblock *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}","to":"<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/* This should not be a docblock *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocToCommentFixer"},"phpdoc_trim":{"summary":"Phpdocs should start and end with content, excluding the very first and last line of the docblocks.","codeSamples":[{"from":"<?php\n\/**\n *\n * Foo must be final class.\n *\n *\n *\/\nfinal class Foo {}\n","to":"<?php\n\/**\n * Foo must be final class.\n *\/\nfinal class Foo {}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTrimFixer"},"phpdoc_types":{"summary":"The correct case must be used for standard PHP types in phpdoc.","codeSamples":[{"from":"<?php\n\/**\n * @param STRING|String[] $bar\n *\n * @return inT[]\n *\/\n","to":"<?php\n\/**\n * @param string|string[] $bar\n *\n * @return int[]\n *\/\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTypesFixer"},"phpdoc_types_order":{"configuration":[{"name":"null_adjustment","description":"Forces the position of `null` (overrides `sort_algorithm`).","defaultValue":"always_first","allowedValues":["always_first","always_last","none"]},{"name":"sort_algorithm","description":"The sorting algorithm to apply.","defaultValue":"alpha","allowedValues":["alpha","none"]}],"summary":"Sorts PHPDoc types.","codeSamples":[{"from":"<?php\n\/**\n * @param string|null $bar\n *\/","to":"<?php\n\/**\n * @param null|string $bar\n *\/"},{"from":"<?php\n\/**\n * @param null|string $bar\n *\/","to":"<?php\n\/**\n * @param string|null $bar\n *\/","configuration":{"null_adjustment":"always_last"}},{"from":"<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/","to":"<?php\n\/**\n * @param null|\\Foo|int|string $bar\n *\/","configuration":{"sort_algorithm":"alpha"}},{"from":"<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/","to":"<?php\n\/**\n * @param \\Foo|int|string|null $bar\n *\/","configuration":{"sort_algorithm":"alpha","null_adjustment":"always_last"}},{"from":"<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/","to":"<?php\n\/**\n * @param \\Foo|int|null|string $bar\n *\/","configuration":{"sort_algorithm":"alpha","null_adjustment":"none"}}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTypesOrderFixer"},"phpdoc_var_without_name":{"summary":"@var and @type annotations should not contain the variable name.","codeSamples":[{"from":"<?php\nfinal class Foo\n{\n    \/**\n     * @var int $bar\n     *\/\n    public $bar;\n\n    \/**\n     * @var $baz float\n     *\/\n    public $baz;\n\n}\n","to":"<?php\nfinal class Foo\n{\n    \/**\n     * @var int\n     *\/\n    public $bar;\n\n    \/**\n     * @var float\n     *\/\n    public $baz;\n\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Phpdoc\\PhpdocVarWithoutNameFixer"},"pow_to_exponentiation":{"risky":true,"summary":"Converts `pow()` to the `**` operator.","riskyDescription":"Risky when the function `pow()` is overridden.","codeSamples":[{"from":"<?php\n pow($a, 1);","to":"<?php\n $a** 1;"}],"fullClassName":"PhpCsFixer\\Fixer\\Alias\\PowToExponentiationFixer"},"pre_increment":{"summary":"Pre incrementation\/decrementation should be used if possible.","codeSamples":[{"from":"<?php\n$a++;\n$b--;","to":"<?php\n++$a;\n--$b;"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\PreIncrementFixer"},"protected_to_private":{"summary":"Converts `protected` variables and methods to `private` where possible.","codeSamples":[{"from":"<?php\nfinal class Sample\n{\n    protected $a;\n\n    protected function test()\n    {\n    }\n}\n","to":"<?php\nfinal class Sample\n{\n    private $a;\n\n    private function test()\n    {\n    }\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\ProtectedToPrivateFixer"},"psr0":{"risky":true,"configuration":[{"name":"dir","description":"The directory where the project code is placed.","defaultValue":"","allowedTypes":["string"]}],"summary":"Classes must be in a path that matches their namespace, be at least one namespace deep and the class name should match the file name.","riskyDescription":"This fixer may change your class name, which will break the code that is depended on old name.","codeSamples":[{"from":"<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n","to":"<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass Psr0Fixer {}\n"},{"from":"<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n","to":"<?php\nnamespace PhpCsFixer\\Fixer\\Basic;\nclass Psr0Fixer {}\n","configuration":{"dir":"\/path\/to\/vendor\/friendsofphp\/php-cs-fixer\/src"}}],"fullClassName":"PhpCsFixer\\Fixer\\Basic\\Psr0Fixer"},"psr4":{"risky":true,"summary":"Class names should match the file name.","riskyDescription":"This fixer may change your class name, which will break the code that is depended on old name.","codeSamples":[{"from":"<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n","to":"<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass Psr4Fixer {}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Basic\\Psr4Fixer"},"random_api_migration":{"risky":true,"configuration":[{"name":"replacements","description":"Mapping between replaced functions with the new ones.","defaultValue":{"getrandmax":"mt_getrandmax","rand":"mt_rand","srand":"mt_srand"},"allowedTypes":["array"]}],"summary":"Replaces `rand`, `srand`, `getrandmax` functions calls with their `mt_*` analogs.","riskyDescription":"Risky when the configured functions are overridden.","codeSamples":[{"from":"<?php\n$a = getrandmax();\n$a = rand($b, $c);\n$a = srand();","to":"<?php\n$a = mt_getrandmax();\n$a = mt_rand($b, $c);\n$a = mt_srand();"},{"from":"<?php\n$a = getrandmax();\n$a = rand($b, $c);\n$a = srand();","to":"<?php\n$a = mt_getrandmax();\n$a = rand($b, $c);\n$a = srand();","configuration":{"replacements":{"getrandmax":"mt_getrandmax"}}}],"fullClassName":"PhpCsFixer\\Fixer\\Alias\\RandomApiMigrationFixer"},"return_type_declaration":{"configuration":[{"name":"space_before","description":"Spacing to apply before colon.","defaultValue":"none","allowedValues":["one","none"]}],"summary":"There should be one or no space before colon, and one space after it in return type declarations, according to configuration.","description":"Rule is applied only in a PHP 7+ environment.","codeSamples":[{"from":"<?php\nfunction foo(int $a):string {};","to":"<?php\nfunction foo(int $a): string {};"},{"from":"<?php\nfunction foo(int $a):string {};","to":"<?php\nfunction foo(int $a): string {};","configuration":{"space_before":"none"}},{"from":"<?php\nfunction foo(int $a):string {};","to":"<?php\nfunction foo(int $a) : string {};","configuration":{"space_before":"one"}}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\ReturnTypeDeclarationFixer"},"self_accessor":{"summary":"Inside a classy element \"self\" should be preferred to the class name itself.","codeSamples":[{"from":"<?php\nclass Sample\n{\n    const BAZ = 1;\n    const BAR = Sample::BAZ;\n\n    public function getBar()\n    {\n        return Sample::BAR;\n    }\n}","to":"<?php\nclass Sample\n{\n    const BAZ = 1;\n    const BAR = self::BAZ;\n\n    public function getBar()\n    {\n        return self::BAR;\n    }\n}"}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\SelfAccessorFixer"},"semicolon_after_instruction":{"summary":"Instructions must be terminated with a semicolon.","codeSamples":[{"from":"<?php echo 1 ?>","to":"<?php echo 1; ?>"}],"fullClassName":"PhpCsFixer\\Fixer\\Semicolon\\SemicolonAfterInstructionFixer"},"short_scalar_cast":{"summary":"Cast `(boolean)` and `(integer)` should be written as `(bool)` and `(int)`, `(double)` and `(real)` as `(float)`.","codeSamples":[{"from":"<?php\n$a = (boolean) $b;\n$a = (integer) $b;\n$a = (double) $b;\n$a = (real) $b;","to":"<?php\n$a = (bool) $b;\n$a = (int) $b;\n$a = (float) $b;\n$a = (float) $b;"}],"fullClassName":"PhpCsFixer\\Fixer\\CastNotation\\ShortScalarCastFixer"},"silenced_deprecation_error":{"risky":true,"summary":"Ensures deprecation notices are silenced.","riskyDescription":"Silencing of deprecation errors might cause changes to code behaviour.","codeSamples":[{"from":"<?php\ntrigger_error('Warning.', E_USER_DEPRECATED);","to":"<?php\n@trigger_error('Warning.', E_USER_DEPRECATED);"}],"fullClassName":"PhpCsFixer\\Fixer\\LanguageConstruct\\SilencedDeprecationErrorFixer"},"simplified_null_return":{"risky":true,"summary":"A return statement wishing to return `void` should not return `null`.","riskyDescription":"Risky since PHP 7.1 as `null` and `void` can be hinted as return type and have different meaning.","codeSamples":[{"from":"<?php return null;","to":"<?php return;"}],"fullClassName":"PhpCsFixer\\Fixer\\ReturnNotation\\SimplifiedNullReturnFixer"},"single_blank_line_at_eof":{"summary":"A PHP file without end tag must always end with a single empty line feed.","codeSamples":[{"from":"<?php\n$a = 1;","to":"<?php\n$a = 1;\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Whitespace\\SingleBlankLineAtEofFixer"},"single_blank_line_before_namespace":{"summary":"There should be exactly one blank line before a namespace declaration.","codeSamples":[{"from":"<?php  namespace A {}","to":"<?php \n\nnamespace A {}"},{"from":"<?php\n\n\nnamespace A{}","to":"<?php\n\nnamespace A{}"}],"fullClassName":"PhpCsFixer\\Fixer\\NamespaceNotation\\SingleBlankLineBeforeNamespaceFixer"},"single_class_element_per_statement":{"configuration":[{"name":"elements","description":"List of strings which element should be modified.","defaultValue":["const","property"],"allowedTypes":["array"]}],"summary":"There MUST NOT be more than one property or constant declared per statement.","codeSamples":[{"from":"<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n","to":"<?php\nfinal class Example\n{\n    const FOO_1 = 1;\n    const FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n"},{"from":"<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n","to":"<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n","configuration":{"elements":["property"]}}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\SingleClassElementPerStatementFixer"},"single_import_per_statement":{"summary":"There MUST be one use keyword per declaration.","codeSamples":[{"from":"<?php\nuse Foo, Sample, Sample\\Sample as Sample2;","to":"<?php\nuse Foo;\nuse Sample;\nuse Sample\\Sample as Sample2;"}],"fullClassName":"PhpCsFixer\\Fixer\\Import\\SingleImportPerStatementFixer"},"single_line_after_imports":{"summary":"Each namespace use MUST go on its own line and there MUST be one blank line after the use statements block.","codeSamples":[{"from":"<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\nfinal class Example\n{\n}\n","to":"<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\nfinal class Example\n{\n}\n"},{"from":"<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\n\nfinal class Example\n{\n}\n","to":"<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\nfinal class Example\n{\n}\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Import\\SingleLineAfterImportsFixer"},"single_line_comment_style":{"configuration":[{"name":"comment_types","description":"List of comment types to fix","defaultValue":["asterisk","hash"],"allowedTypes":["array"]}],"summary":"Single-line comments and multi-line comments with only one line of actual content should use the `\/\/` syntax.","codeSamples":[{"from":"<?php\n\/* asterisk comment *\/\n$a = 1;\n\n# hash comment\n$b = 2;\n\n\/*\n * multi-line\n * comment\n *\/\n$c = 3;","to":"<?php\n\/\/ asterisk comment\n$a = 1;\n\n\/\/ hash comment\n$b = 2;\n\n\/*\n * multi-line\n * comment\n *\/\n$c = 3;"},{"from":"<?php\n\/* first comment *\/\n$a = 1;\n\n\/*\n * second comment\n *\/\n$b = 2;\n\n\/*\n * third\n * comment\n *\/\n$c = 3;","to":"<?php\n\/\/ first comment\n$a = 1;\n\n\/\/ second comment\n$b = 2;\n\n\/*\n * third\n * comment\n *\/\n$c = 3;","configuration":{"comment_types":["asterisk"]}},{"from":"<?php # comment","to":"<?php \/\/ comment","configuration":{"comment_types":["hash"]}}],"fullClassName":"PhpCsFixer\\Fixer\\Comment\\SingleLineCommentStyleFixer"},"single_quote":{"summary":"Convert double quotes to single quotes for simple strings.","codeSamples":[{"from":"<?php $a = \"sample\";","to":"<?php $a = 'sample';"}],"fullClassName":"PhpCsFixer\\Fixer\\StringNotation\\SingleQuoteFixer"},"space_after_semicolon":{"summary":"Fix whitespace after a semicolon.","codeSamples":[{"from":"<?php\n                    sample();     $test = 1;\n                    sample();$test = 2;\n                    for ( ;;++$sample) {\n                    }\n                ","to":"<?php\n                    sample(); $test = 1;\n                    sample(); $test = 2;\n                    for ( ; ; ++$sample) {\n                    }\n                "}],"fullClassName":"PhpCsFixer\\Fixer\\Semicolon\\SpaceAfterSemicolonFixer"},"standardize_not_equals":{"summary":"Replace all `<>` with `!=`.","codeSamples":[{"from":"<?php\n$a = $b <> $c;","to":"<?php\n$a = $b != $c;"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\StandardizeNotEqualsFixer"},"strict_comparison":{"risky":true,"summary":"Comparisons should be strict.","riskyDescription":"Changing comparisons to strict might change code behavior.","codeSamples":[{"from":"<?php\n$a = 1== $b;","to":"<?php\n$a = 1=== $b;"}],"fullClassName":"PhpCsFixer\\Fixer\\Strict\\StrictComparisonFixer"},"strict_param":{"risky":true,"summary":"Functions should be used with `$strict` param set to `true`.","description":"The functions \"array_keys\", \"array_search\", \"base64_decode\", \"in_array\" and \"mb_detect_encoding\" should be used with $strict param.","riskyDescription":"Risky when the fixed function is overridden or if the code relies on non-strict usage.","codeSamples":[{"from":"<?php\n$a = array_keys($b);\n$a = array_search($b, $c);\n$a = base64_decode($b);\n$a = in_array($b, $c);\n$a = mb_detect_encoding($b, $c);\n","to":"<?php\n$a = array_keys($b);\n$a = array_search($b, $c, true);\n$a = base64_decode($b, true);\n$a = in_array($b, $c, true);\n$a = mb_detect_encoding($b, $c, true);\n"}],"fullClassName":"PhpCsFixer\\Fixer\\Strict\\StrictParamFixer"},"switch_case_semicolon_to_colon":{"summary":"A case should be followed by a colon and not a semicolon.","codeSamples":[{"from":"<?php\n    switch ($a) {\n        case 1;\n            break;\n        default;\n            break;\n    }\n","to":"<?php\n    switch ($a) {\n        case 1:\n            break;\n        default:\n            break;\n    }\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\SwitchCaseSemicolonToColonFixer"},"switch_case_space":{"summary":"Removes extra spaces between colon and case value.","codeSamples":[{"from":"<?php\n    switch($a) {\n        case 1   :\n            break;\n        default     :\n            return 2;\n    }\n","to":"<?php\n    switch($a) {\n        case 1:\n            break;\n        default:\n            return 2;\n    }\n"}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\SwitchCaseSpaceFixer"},"ternary_operator_spaces":{"summary":"Standardize spaces around ternary operator.","codeSamples":[{"from":"<?php $a = $a   ?1 :0;","to":"<?php $a = $a ? 1 : 0;"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\TernaryOperatorSpacesFixer"},"ternary_to_null_coalescing":{"summary":"Use `null` coalescing operator `??` where possible. Requires PHP >= 7.0.","codeSamples":[{"from":"<?php\n$sample = isset($a) ? $a : $b;","to":"<?php\n$sample = $a ?? $b;"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\TernaryToNullCoalescingFixer"},"trailing_comma_in_multiline_array":{"summary":"PHP multi-line arrays should have a trailing comma.","codeSamples":[{"from":"<?php\narray(\n    1,\n    2\n);","to":"<?php\narray(\n    1,\n    2,\n);"}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\TrailingCommaInMultilineArrayFixer"},"trim_array_spaces":{"summary":"Arrays should be formatted like function\/method arguments, without leading or trailing single line space.","codeSamples":[{"from":"<?php\n$sample = array( );\n$sample = array( 'a', 'b' );","to":"<?php\n$sample = array();\n$sample = array('a', 'b');"}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\TrimArraySpacesFixer"},"unary_operator_spaces":{"summary":"Unary operators should be placed adjacent to their operands.","codeSamples":[{"from":"<?php\n$sample ++;\n-- $sample;\n$sample = ! ! $a;\n$sample = ~  $c;\nfunction & foo(){}","to":"<?php\n$sample++;\n--$sample;\n$sample = !!$a;\n$sample = ~$c;\nfunction &foo(){}"}],"fullClassName":"PhpCsFixer\\Fixer\\Operator\\UnaryOperatorSpacesFixer"},"visibility_required":{"configuration":[{"name":"elements","description":"The structural elements to fix (PHP >= 7.1 required for `const`).","defaultValue":["property","method"],"allowedTypes":["array"]}],"summary":"Visibility MUST be declared on all properties and methods; abstract and final MUST be declared before the visibility; static MUST be declared after the visibility.","codeSamples":[{"from":"<?php\nclass Sample\n{\n    var $a;\n    static protected $var_foo2;\n\n    function A()\n    {\n    }\n}\n","to":"<?php\nclass Sample\n{\n    public $a;\n    protected static $var_foo2;\n\n    public function A()\n    {\n    }\n}\n"},{"from":"<?php\nclass Sample\n{\n    const SAMPLE = 1;\n}\n","to":"<?php\nclass Sample\n{\n    public const SAMPLE = 1;\n}\n","configuration":{"elements":["const"]}}],"fullClassName":"PhpCsFixer\\Fixer\\ClassNotation\\VisibilityRequiredFixer"},"void_return":{"risky":true,"summary":"Add void return type to functions with missing or empty return statements, but priority is given to `@return` annotations. Requires PHP >= 7.1.","riskyDescription":"Modifies the signature of functions.","codeSamples":[{"from":"<?php\nfunction foo($a) {};","to":"<?php\nfunction foo($a): void {};"}],"fullClassName":"PhpCsFixer\\Fixer\\FunctionNotation\\VoidReturnFixer"},"whitespace_after_comma_in_array":{"summary":"In array declaration, there MUST be a whitespace after each comma.","codeSamples":[{"from":"<?php\n$sample = array(1,'a',$b,);","to":"<?php\n$sample = array(1, 'a', $b, );"}],"fullClassName":"PhpCsFixer\\Fixer\\ArrayNotation\\WhitespaceAfterCommaInArrayFixer"},"yoda_style":{"configuration":[{"name":"equal","description":"Style for equal (`==`, `!=`) statements.","defaultValue":true,"allowedTypes":["bool","null"]},{"name":"identical","description":"Style for identical (`===`, `!==`) statements.","defaultValue":true,"allowedTypes":["bool","null"]},{"name":"less_and_greater","description":"Style for less and greater than (`<`, `<=`, `>`, `>=`) statements.","defaultValue":null,"allowedTypes":["bool","null"]}],"summary":"Write conditions in Yoda style (`true`), non-Yoda style (`false`) or ignore those conditions (`null`) based on configuration.","codeSamples":[{"from":"<?php\n    if ($a === null) {\n        echo \"null\";\n    }\n","to":"<?php\n    if (null === $a) {\n        echo \"null\";\n    }\n"},{"from":"<?php\n    $b = $c != 1;  \/\/ equal\n    $a = 1 === $b; \/\/ identical\n    $c = $c > 3;   \/\/ less than\n","to":"<?php\n    $b = 1 != $c;  \/\/ equal\n    $a = $b === 1; \/\/ identical\n    $c = $c > 3;   \/\/ less than\n","configuration":{"equal":true,"identical":false,"less_and_greater":null}}],"fullClassName":"PhpCsFixer\\Fixer\\ControlStructure\\YodaStyleFixer"}},"sets":{"@DoctrineAnnotation":{"rules":{"doctrine_annotation_array_assignment":{"operator":":"},"doctrine_annotation_braces":null,"doctrine_annotation_indentation":null,"doctrine_annotation_spaces":{"before_array_assignments_colon":false}}},"@PHP56Migration":{"rules":[]},"@PHP56Migration:risky":{"rules":{"pow_to_exponentiation":null}},"@PHP70Migration":{"rules":{"ternary_to_null_coalescing":null}},"@PHP70Migration:risky":{"rules":{"declare_strict_types":null,"non_printable_character":{"use_escape_sequences_in_strings":true},"pow_to_exponentiation":null,"random_api_migration":{"replacements":{"mt_rand":"random_int","rand":"random_int"}}}},"@PHP71Migration":{"rules":{"ternary_to_null_coalescing":null,"visibility_required":{"elements":["const","method","property"]}}},"@PHP71Migration:risky":{"rules":{"declare_strict_types":null,"non_printable_character":{"use_escape_sequences_in_strings":true},"pow_to_exponentiation":null,"random_api_migration":{"replacements":{"mt_rand":"random_int","rand":"random_int"}},"void_return":null}},"@PSR1":{"rules":{"encoding":null,"full_opening_tag":null}},"@PSR2":{"rules":{"blank_line_after_namespace":null,"braces":null,"class_definition":null,"elseif":null,"encoding":null,"full_opening_tag":null,"function_declaration":null,"indentation_type":null,"line_ending":null,"lowercase_constants":null,"lowercase_keywords":null,"method_argument_space":{"ensure_fully_multiline":true},"no_break_comment":null,"no_closing_tag":null,"no_spaces_after_function_name":null,"no_spaces_inside_parenthesis":null,"no_trailing_whitespace":null,"no_trailing_whitespace_in_comment":null,"single_blank_line_at_eof":null,"single_class_element_per_statement":{"elements":["property"]},"single_import_per_statement":null,"single_line_after_imports":null,"switch_case_semicolon_to_colon":null,"switch_case_space":null,"visibility_required":null}},"@Symfony":{"rules":{"binary_operator_spaces":{"align_double_arrow":false,"align_equals":false},"blank_line_after_namespace":null,"blank_line_after_opening_tag":null,"blank_line_before_statement":{"statements":["return"]},"braces":{"allow_single_line_closure":true},"cast_spaces":null,"class_definition":{"singleLine":true},"concat_space":{"spacing":"none"},"declare_equal_normalize":null,"elseif":null,"encoding":null,"full_opening_tag":null,"function_declaration":null,"function_typehint_space":null,"hash_to_slash_comment":null,"include":null,"indentation_type":null,"line_ending":null,"lowercase_cast":null,"lowercase_constants":null,"lowercase_keywords":null,"magic_constant_casing":null,"method_argument_space":null,"method_separation":null,"native_function_casing":null,"new_with_braces":null,"no_blank_lines_after_class_opening":null,"no_blank_lines_after_phpdoc":null,"no_break_comment":null,"no_closing_tag":null,"no_empty_comment":null,"no_empty_phpdoc":null,"no_empty_statement":null,"no_extra_consecutive_blank_lines":{"tokens":["curly_brace_block","extra","parenthesis_brace_block","square_brace_block","throw","use"]},"no_leading_import_slash":null,"no_leading_namespace_whitespace":null,"no_mixed_echo_print":{"use":"echo"},"no_multiline_whitespace_around_double_arrow":null,"no_short_bool_cast":null,"no_singleline_whitespace_before_semicolons":null,"no_spaces_after_function_name":null,"no_spaces_around_offset":null,"no_spaces_inside_parenthesis":null,"no_trailing_comma_in_list_call":null,"no_trailing_comma_in_singleline_array":null,"no_trailing_whitespace":null,"no_trailing_whitespace_in_comment":null,"no_unneeded_control_parentheses":null,"no_unneeded_curly_braces":null,"no_unneeded_final_method":null,"no_unused_imports":null,"no_whitespace_before_comma_in_array":null,"no_whitespace_in_blank_line":null,"normalize_index_brace":null,"object_operator_without_whitespace":null,"php_unit_fqcn_annotation":null,"phpdoc_align":null,"phpdoc_annotation_without_dot":null,"phpdoc_indent":null,"phpdoc_inline_tag":null,"phpdoc_no_access":null,"phpdoc_no_alias_tag":null,"phpdoc_no_empty_return":null,"phpdoc_no_package":null,"phpdoc_no_useless_inheritdoc":null,"phpdoc_return_self_reference":null,"phpdoc_scalar":null,"phpdoc_separation":null,"phpdoc_single_line_var_spacing":null,"phpdoc_summary":null,"phpdoc_to_comment":null,"phpdoc_trim":null,"phpdoc_types":null,"phpdoc_var_without_name":null,"pre_increment":null,"protected_to_private":null,"return_type_declaration":null,"self_accessor":null,"semicolon_after_instruction":null,"short_scalar_cast":null,"single_blank_line_at_eof":null,"single_blank_line_before_namespace":null,"single_class_element_per_statement":null,"single_import_per_statement":null,"single_line_after_imports":null,"single_quote":null,"space_after_semicolon":null,"standardize_not_equals":null,"switch_case_semicolon_to_colon":null,"switch_case_space":null,"ternary_operator_spaces":null,"trailing_comma_in_multiline_array":null,"trim_array_spaces":null,"unary_operator_spaces":null,"visibility_required":null,"whitespace_after_comma_in_array":null,"yoda_style":null}},"@Symfony:risky":{"rules":{"dir_constant":null,"ereg_to_preg":null,"function_to_constant":null,"is_null":null,"modernize_types_casting":null,"no_alias_functions":null,"non_printable_character":null,"php_unit_construct":null,"php_unit_dedicate_assert":null,"psr4":null,"silenced_deprecation_error":null}}}}
{
    "version": "3.39.1",
    "indent": "    ",
    "lineEnding": "\n",
    "fixers": {
        "align_multiline_comment": {
            "configuration": [
                {
                    "name": "comment_type",
                    "description": "Whether to fix PHPDoc comments only (`phpdocs_only`), any multi-line comment whose lines all start with an asterisk (`phpdocs_like`) or any multi-line comment (`all_multiline`).",
                    "defaultValue": "phpdocs_only",
                    "allowedValues": [
                        "phpdocs_only",
                        "phpdocs_like",
                        "all_multiline"
                    ]
                }
            ],
            "summary": "Each line of multi-line DocComments must have an asterisk [PSR-5] and must be aligned with the first one.",
            "codeSamples": [
                {
                    "from": "<?php\n    \/**\n            * This is a DOC Comment\nwith a line not prefixed with asterisk\n\n   *\/\n",
                    "to": "<?php\n    \/**\n     * This is a DOC Comment\n     * with a line not prefixed with asterisk\n     *\n     *\/\n"
                },
                {
                    "from": "<?php\n    \/*\n            * This is a doc-like multiline comment\n*\/\n",
                    "to": "<?php\n    \/*\n     * This is a doc-like multiline comment\n     *\/\n",
                    "configuration": {
                        "comment_type": "phpdocs_like"
                    }
                },
                {
                    "from": "<?php\n    \/*\n            * This is a doc-like multiline comment\nwith a line not prefixed with asterisk\n\n   *\/\n",
                    "to": "<?php\n    \/*\n     * This is a doc-like multiline comment\nwith a line not prefixed with asterisk\n\n     *\/\n",
                    "configuration": {
                        "comment_type": "all_multiline"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\AlignMultilineCommentFixer"
        },
        "array_indentation": {
            "summary": "Each element of an array must be indented exactly once.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = [\n   'bar' => [\n    'baz' => true,\n  ],\n];\n",
                    "to": "<?php\n$foo = [\n    'bar' => [\n        'baz' => true,\n    ],\n];\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\ArrayIndentationFixer"
        },
        "array_push": {
            "risky": true,
            "summary": "Converts simple usages of `array_push($x, $y);` to `$x[] = $y;`.",
            "riskyDescription": "Risky when the function `array_push` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\narray_push($x, $y);\n",
                    "to": "<?php\n$x[] = $y;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\ArrayPushFixer"
        },
        "array_syntax": {
            "configuration": [
                {
                    "name": "syntax",
                    "description": "Whether to use the `long` or `short` array syntax.",
                    "defaultValue": "short",
                    "allowedValues": [
                        "long",
                        "short"
                    ]
                }
            ],
            "summary": "PHP arrays should be declared using the configured syntax.",
            "codeSamples": [
                {
                    "from": "<?php\narray(1,2);\n",
                    "to": "<?php\n[1,2];\n"
                },
                {
                    "from": "<?php\n[1,2];\n",
                    "to": "<?php\narray(1,2);\n",
                    "configuration": {
                        "syntax": "long"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\ArraySyntaxFixer"
        },
        "assign_null_coalescing_to_coalesce_equal": {
            "summary": "Use the null coalescing assignment operator `??=` where possible.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = $foo ?? 1;\n",
                    "to": "<?php\n$foo ??= 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\AssignNullCoalescingToCoalesceEqualFixer"
        },
        "attribute_empty_parentheses": {
            "configuration": [
                {
                    "name": "use_parentheses",
                    "description": "Whether attributes should be followed by parentheses or not.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "PHP attributes declared without arguments must (not) be followed by empty parentheses.",
            "codeSamples": [
                {
                    "from": "<?php\n\n#[Foo()]\nclass Sample1 {}\n\n#[Bar(), Baz()]\nclass Sample2 {}\n",
                    "to": "<?php\n\n#[Foo]\nclass Sample1 {}\n\n#[Bar, Baz]\nclass Sample2 {}\n"
                },
                {
                    "from": "<?php\n\n#[Foo]\nclass Sample1 {}\n\n#[Bar, Baz]\nclass Sample2 {}\n",
                    "to": "<?php\n\n#[Foo()]\nclass Sample1 {}\n\n#[Bar(), Baz()]\nclass Sample2 {}\n",
                    "configuration": {
                        "use_parentheses": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\AttributeNotation\\AttributeEmptyParenthesesFixer"
        },
        "backtick_to_shell_exec": {
            "summary": "Converts backtick operators to `shell_exec` calls.",
            "description": "Conversion is done only when it is non risky, so when special chars like single-quotes, double-quotes and backticks are not used inside the command.",
            "codeSamples": [
                {
                    "from": "<?php\n$plain = `ls -lah`;\n$withVar = `ls -lah $var1 ${var2} {$var3} {$var4[0]} {$var5->call()}`;\n",
                    "to": "<?php\n$plain = shell_exec(\"ls -lah\");\n$withVar = shell_exec(\"ls -lah $var1 ${var2} {$var3} {$var4[0]} {$var5->call()}\");\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\BacktickToShellExecFixer"
        },
        "binary_operator_spaces": {
            "configuration": [
                {
                    "name": "default",
                    "description": "Default fix strategy.",
                    "defaultValue": "single_space",
                    "allowedValues": [
                        "align",
                        "align_by_scope",
                        "align_single_space",
                        "align_single_space_minimal",
                        "align_single_space_by_scope",
                        "align_single_space_minimal_by_scope",
                        "single_space",
                        "no_space",
                        "at_least_single_space",
                        null
                    ]
                },
                {
                    "name": "operators",
                    "description": "Dictionary of `binary operator` => `fix strategy` values that differ from the default strategy. Supported are: `=`, `*`, `\/`, `%`, `<`, `>`, `|`, `^`, `+`, `-`, `&`, `&=`, `&&`, `||`, `.=`, `\/=`, `=>`, `==`, `>=`, `===`, `!=`, `<>`, `!==`, `<=`, `and`, `or`, `xor`, `-=`, `%=`, `*=`, `|=`, `+=`, `<<`, `<<=`, `>>`, `>>=`, `^=`, `**`, `**=`, `<=>`, `??` and `??=`.",
                    "defaultValue": {},
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Binary operators should be surrounded by space as configured.",
            "codeSamples": [
                {
                    "from": "<?php\n$a= 1  + $b^ $d !==  $e or   $f;\n",
                    "to": "<?php\n$a = 1 + $b ^ $d !== $e or $f;\n"
                },
                {
                    "from": "<?php\n$aa=  1;\n$b=2;\n\n$c = $d    xor    $e;\n$f    -=  1;\n",
                    "to": "<?php\n$aa=  1;\n$b =2;\n\n$c = $d    xor    $e;\n$f -= 1;\n",
                    "configuration": {
                        "operators": {
                            "=": "align",
                            "xor": null
                        }
                    }
                },
                {
                    "from": "<?php\n$a = $b +=$c;\n$d = $ee+=$f;\n\n$g = $b     +=$c;\n$h = $ee+=$f;\n",
                    "to": "<?php\n$a = $b  += $c;\n$d = $ee += $f;\n\n$g = $b     += $c;\n$h = $ee    += $f;\n",
                    "configuration": {
                        "operators": {
                            "+=": "align_single_space"
                        }
                    }
                },
                {
                    "from": "<?php\n$a = $b===$c;\n$d = $f   ===  $g;\n$h = $i===  $j;\n",
                    "to": "<?php\n$a = $b === $c;\n$d = $f === $g;\n$h = $i === $j;\n",
                    "configuration": {
                        "operators": {
                            "===": "align_single_space_minimal"
                        }
                    }
                },
                {
                    "from": "<?php\n$foo = \\json_encode($bar, JSON_PRESERVE_ZERO_FRACTION | JSON_PRETTY_PRINT);\n",
                    "to": "<?php\n$foo = \\json_encode($bar, JSON_PRESERVE_ZERO_FRACTION|JSON_PRETTY_PRINT);\n",
                    "configuration": {
                        "operators": {
                            "|": "no_space"
                        }
                    }
                },
                {
                    "from": "<?php\n$array = [\n    \"foo\"            =>   1,\n    \"baaaaaaaaaaar\"  =>  11,\n];\n",
                    "to": "<?php\n$array = [\n    \"foo\" => 1,\n    \"baaaaaaaaaaar\" => 11,\n];\n",
                    "configuration": {
                        "operators": {
                            "=>": "single_space"
                        }
                    }
                },
                {
                    "from": "<?php\n$array = [\n    \"foo\" => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "to": "<?php\n$array = [\n    \"foo\"            => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "configuration": {
                        "operators": {
                            "=>": "align"
                        }
                    }
                },
                {
                    "from": "<?php\n$array = [\n    \"foo\" => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "to": "<?php\n$array = [\n    \"foo\"            => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\"            => 1,\n];\n",
                    "configuration": {
                        "operators": {
                            "=>": "align_by_scope"
                        }
                    }
                },
                {
                    "from": "<?php\n$array = [\n    \"foo\" => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "to": "<?php\n$array = [\n    \"foo\"            => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "configuration": {
                        "operators": {
                            "=>": "align_single_space"
                        }
                    }
                },
                {
                    "from": "<?php\n$array = [\n    \"foo\" => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "to": "<?php\n$array = [\n    \"foo\"            => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\"            => 1,\n];\n",
                    "configuration": {
                        "operators": {
                            "=>": "align_single_space_by_scope"
                        }
                    }
                },
                {
                    "from": "<?php\n$array = [\n    \"foo\" => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "to": "<?php\n$array = [\n    \"foo\"           => 12,\n    \"baaaaaaaaaaar\" => 13,\n\n    \"baz\" => 1,\n];\n",
                    "configuration": {
                        "operators": {
                            "=>": "align_single_space_minimal"
                        }
                    }
                },
                {
                    "from": "<?php\n$array = [\n    \"foo\" => 12,\n    \"baaaaaaaaaaar\"  => 13,\n\n    \"baz\" => 1,\n];\n",
                    "to": "<?php\n$array = [\n    \"foo\"           => 12,\n    \"baaaaaaaaaaar\" => 13,\n\n    \"baz\"           => 1,\n];\n",
                    "configuration": {
                        "operators": {
                            "=>": "align_single_space_minimal_by_scope"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\BinaryOperatorSpacesFixer"
        },
        "blank_line_after_namespace": {
            "summary": "There MUST be one blank line after the namespace declaration.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace Sample\\Sample;\n\n\n$a;\n",
                    "to": "<?php\nnamespace Sample\\Sample;\n\n$a;\n"
                },
                {
                    "from": "<?php\nnamespace Sample\\Sample;\nClass Test{}\n",
                    "to": "<?php\nnamespace Sample\\Sample;\n\nClass Test{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\BlankLineAfterNamespaceFixer"
        },
        "blank_line_after_opening_tag": {
            "summary": "Ensure there is no code on the same line as the PHP open tag and it is followed by a blank line.",
            "codeSamples": [
                {
                    "from": "<?php $a = 1;\n$b = 1;\n",
                    "to": "<?php\n\n$a = 1;\n$b = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\BlankLineAfterOpeningTagFixer"
        },
        "blank_line_before_statement": {
            "configuration": [
                {
                    "name": "statements",
                    "description": "List of statements which must be preceded by an empty line.",
                    "defaultValue": [
                        "break",
                        "continue",
                        "declare",
                        "return",
                        "throw",
                        "try"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "break",
                            "case",
                            "continue",
                            "declare",
                            "default",
                            "do",
                            "exit",
                            "for",
                            "foreach",
                            "goto",
                            "if",
                            "include",
                            "include_once",
                            "phpdoc",
                            "require",
                            "require_once",
                            "return",
                            "switch",
                            "throw",
                            "try",
                            "while",
                            "yield",
                            "yield_from"
                        ]
                    ]
                }
            ],
            "summary": "An empty line feed must precede any configured statement.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction A() {\n    echo 1;\n    return 1;\n}\n",
                    "to": "<?php\nfunction A() {\n    echo 1;\n\n    return 1;\n}\n"
                },
                {
                    "from": "<?php\nswitch ($foo) {\n    case 42:\n        $bar->process();\n        break;\n    case 44:\n        break;\n}\n",
                    "to": "<?php\nswitch ($foo) {\n    case 42:\n        $bar->process();\n\n        break;\n    case 44:\n        break;\n}\n",
                    "configuration": {
                        "statements": [
                            "break"
                        ]
                    }
                },
                {
                    "from": "<?php\nforeach ($foo as $bar) {\n    if ($bar->isTired()) {\n        $bar->sleep();\n        continue;\n    }\n}\n",
                    "to": "<?php\nforeach ($foo as $bar) {\n    if ($bar->isTired()) {\n        $bar->sleep();\n\n        continue;\n    }\n}\n",
                    "configuration": {
                        "statements": [
                            "continue"
                        ]
                    }
                },
                {
                    "from": "<?php\n$i = 0;\ndo {\n    echo $i;\n} while ($i > 0);\n",
                    "to": "<?php\n$i = 0;\n\ndo {\n    echo $i;\n} while ($i > 0);\n",
                    "configuration": {
                        "statements": [
                            "do"
                        ]
                    }
                },
                {
                    "from": "<?php\nif ($foo === false) {\n    exit(0);\n} else {\n    $bar = 9000;\n    exit(1);\n}\n",
                    "to": "<?php\nif ($foo === false) {\n    exit(0);\n} else {\n    $bar = 9000;\n\n    exit(1);\n}\n",
                    "configuration": {
                        "statements": [
                            "exit"
                        ]
                    }
                },
                {
                    "from": "<?php\na:\n\nif ($foo === false) {\n    goto a;\n} else {\n    $bar = 9000;\n    goto b;\n}\n",
                    "to": "<?php\na:\n\nif ($foo === false) {\n    goto a;\n} else {\n    $bar = 9000;\n\n    goto b;\n}\n",
                    "configuration": {
                        "statements": [
                            "goto"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a = 9000;\nif (true) {\n    $foo = $bar;\n}\n",
                    "to": "<?php\n$a = 9000;\n\nif (true) {\n    $foo = $bar;\n}\n",
                    "configuration": {
                        "statements": [
                            "if"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nif (true) {\n    $foo = $bar;\n    return;\n}\n",
                    "to": "<?php\n\nif (true) {\n    $foo = $bar;\n\n    return;\n}\n",
                    "configuration": {
                        "statements": [
                            "return"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a = 9000;\nswitch ($a) {\n    case 42:\n        break;\n}\n",
                    "to": "<?php\n$a = 9000;\n\nswitch ($a) {\n    case 42:\n        break;\n}\n",
                    "configuration": {
                        "statements": [
                            "switch"
                        ]
                    }
                },
                {
                    "from": "<?php\nif (null === $a) {\n    $foo->bar();\n    throw new \\UnexpectedValueException(\"A cannot be null.\");\n}\n",
                    "to": "<?php\nif (null === $a) {\n    $foo->bar();\n\n    throw new \\UnexpectedValueException(\"A cannot be null.\");\n}\n",
                    "configuration": {
                        "statements": [
                            "throw"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a = 9000;\ntry {\n    $foo->bar();\n} catch (\\Exception $exception) {\n    $a = -1;\n}\n",
                    "to": "<?php\n$a = 9000;\n\ntry {\n    $foo->bar();\n} catch (\\Exception $exception) {\n    $a = -1;\n}\n",
                    "configuration": {
                        "statements": [
                            "try"
                        ]
                    }
                },
                {
                    "from": "<?php\nfunction getValues() {\n    yield 1;\n    yield 2;\n    \/\/ comment\n    yield 3;\n}\n",
                    "to": "<?php\nfunction getValues() {\n    yield 1;\n\n    yield 2;\n\n    \/\/ comment\n    yield 3;\n}\n",
                    "configuration": {
                        "statements": [
                            "yield"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\BlankLineBeforeStatementFixer"
        },
        "blank_line_between_import_groups": {
            "summary": "Putting blank lines between `use` statement groups.",
            "codeSamples": [
                {
                    "from": "<?php\n\nuse function AAC;\nuse const AAB;\nuse AAA;\n",
                    "to": "<?php\n\nuse function AAC;\n\nuse const AAB;\n\nuse AAA;\n"
                },
                {
                    "from": "<?php\nuse const AAAA;\nuse const BBB;\nuse Bar;\nuse AAC;\nuse Acme;\nuse function CCC\\AA;\nuse function DDD;\n",
                    "to": "<?php\nuse const AAAA;\nuse const BBB;\n\nuse Bar;\nuse AAC;\nuse Acme;\n\nuse function CCC\\AA;\nuse function DDD;\n"
                },
                {
                    "from": "<?php\nuse const BBB;\nuse const AAAA;\nuse Acme;\nuse AAC;\nuse Bar;\nuse function DDD;\nuse function CCC\\AA;\n",
                    "to": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse Acme;\nuse AAC;\nuse Bar;\n\nuse function DDD;\nuse function CCC\\AA;\n"
                },
                {
                    "from": "<?php\nuse const AAAA;\nuse const BBB;\nuse Acme;\nuse function DDD;\nuse AAC;\nuse function CCC\\AA;\nuse Bar;\n",
                    "to": "<?php\nuse const AAAA;\nuse const BBB;\n\nuse Acme;\n\nuse function DDD;\n\nuse AAC;\n\nuse function CCC\\AA;\n\nuse Bar;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\BlankLineBetweenImportGroupsFixer"
        },
        "blank_lines_before_namespace": {
            "configuration": [
                {
                    "name": "max_line_breaks",
                    "description": "Maximum line breaks that should exist before namespace declaration.",
                    "defaultValue": 2,
                    "allowedTypes": [
                        "int"
                    ]
                },
                {
                    "name": "min_line_breaks",
                    "description": "Minimum line breaks that should exist before namespace declaration.",
                    "defaultValue": 2,
                    "allowedTypes": [
                        "int"
                    ]
                }
            ],
            "summary": "Controls blank lines before a namespace declaration.",
            "codeSamples": [
                {
                    "from": "<?php  namespace A {}\n",
                    "to": "<?php\n\nnamespace A {}\n"
                },
                {
                    "from": "<?php  namespace A {}\n",
                    "to": "<?php\nnamespace A {}\n",
                    "configuration": {
                        "min_line_breaks": 1
                    }
                },
                {
                    "from": "<?php\n\ndeclare(strict_types=1);\n\n\n\nnamespace A{}\n",
                    "to": "<?php\n\ndeclare(strict_types=1);\n\nnamespace A{}\n",
                    "configuration": {
                        "max_line_breaks": 2
                    }
                },
                {
                    "from": "<?php\n\n\/** Some comment *\/\nnamespace A{}\n",
                    "to": "<?php\n\n\/** Some comment *\/\n\nnamespace A{}\n",
                    "configuration": {
                        "min_line_breaks": 2
                    }
                },
                {
                    "from": "<?php\n\nnamespace A{}\n",
                    "to": "<?php namespace A{}\n",
                    "configuration": {
                        "min_line_breaks": 0,
                        "max_line_breaks": 0
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\BlankLinesBeforeNamespaceFixer"
        },
        "braces": {
            "configuration": [
                {
                    "name": "allow_single_line_anonymous_class_with_empty_body",
                    "description": "Whether single line anonymous class with empty body notation should be allowed.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "allow_single_line_closure",
                    "description": "Whether single line lambda notation should be allowed.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "position_after_anonymous_constructs",
                    "description": "Whether the opening brace should be placed on \"next\" or \"same\" line after anonymous constructs (anonymous classes and lambda functions).",
                    "defaultValue": "same",
                    "allowedValues": [
                        "next",
                        "same"
                    ]
                },
                {
                    "name": "position_after_control_structures",
                    "description": "Whether the opening brace should be placed on \"next\" or \"same\" line after control structures.",
                    "defaultValue": "same",
                    "allowedValues": [
                        "next",
                        "same"
                    ]
                },
                {
                    "name": "position_after_functions_and_oop_constructs",
                    "description": "Whether the opening brace should be placed on \"next\" or \"same\" line after classy constructs (non-anonymous classes, interfaces, traits, methods and non-lambda functions).",
                    "defaultValue": "next",
                    "allowedValues": [
                        "next",
                        "same"
                    ]
                }
            ],
            "summary": "The body of each structure MUST be enclosed by braces. Braces should be properly placed. Body of braces should be properly indented.",
            "codeSamples": [
                {
                    "from": "<?php\n\nclass Foo {\n    public function bar($baz) {\n        if ($baz = 900) echo \"Hello!\";\n\n        if ($baz = 9000)\n            echo \"Wait!\";\n\n        if ($baz == true)\n        {\n            echo \"Why?\";\n        }\n        else\n        {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz))\n            foreach ($baz as $b)\n            {\n                echo $b;\n            }\n    }\n}\n",
                    "to": "<?php\n\nclass Foo\n{\n    public function bar($baz)\n    {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n"
                },
                {
                    "from": "<?php\n$positive = function ($item) { return $item >= 0; };\n$negative = function ($item) {\n                return $item < 0; };\n",
                    "to": "<?php\n$positive = function ($item) { return $item >= 0; };\n$negative = function ($item) {\n    return $item < 0;\n};\n",
                    "configuration": {
                        "allow_single_line_closure": true
                    }
                },
                {
                    "from": "<?php\n\nclass Foo\n{\n    public function bar($baz)\n    {\n        if ($baz = 900) echo \"Hello!\";\n\n        if ($baz = 9000)\n            echo \"Wait!\";\n\n        if ($baz == true)\n        {\n            echo \"Why?\";\n        }\n        else\n        {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz))\n            foreach ($baz as $b)\n            {\n                echo $b;\n            }\n    }\n}\n",
                    "to": "<?php\n\nclass Foo {\n    public function bar($baz) {\n        if ($baz = 900) {\n            echo \"Hello!\";\n        }\n\n        if ($baz = 9000) {\n            echo \"Wait!\";\n        }\n\n        if ($baz == true) {\n            echo \"Why?\";\n        } else {\n            echo \"Ha?\";\n        }\n\n        if (is_array($baz)) {\n            foreach ($baz as $b) {\n                echo $b;\n            }\n        }\n    }\n}\n",
                    "configuration": {
                        "position_after_functions_and_oop_constructs": "same"
                    }
                }
            ],
            "deprecated_switchTo": [
                "single_space_around_construct",
                "control_structure_braces",
                "control_structure_continuation_position",
                "declare_parentheses",
                "no_multiple_statements_per_line",
                "curly_braces_position",
                "statement_indentation",
                "no_extra_blank_lines"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\BracesFixer"
        },
        "braces_position": {
            "configuration": [
                {
                    "name": "allow_single_line_anonymous_functions",
                    "description": "Allow anonymous functions to have opening and closing braces on the same line.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "allow_single_line_empty_anonymous_classes",
                    "description": "Allow anonymous classes to have opening and closing braces on the same line.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "anonymous_classes_opening_brace",
                    "description": "The position of the opening brace of anonymous classes\u2018 body.",
                    "defaultValue": "same_line",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "anonymous_functions_opening_brace",
                    "description": "The position of the opening brace of anonymous functions\u2018 body.",
                    "defaultValue": "same_line",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "classes_opening_brace",
                    "description": "The position of the opening brace of classes\u2018 body.",
                    "defaultValue": "next_line_unless_newline_at_signature_end",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "control_structures_opening_brace",
                    "description": "The position of the opening brace of control structures\u2018 body.",
                    "defaultValue": "same_line",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "functions_opening_brace",
                    "description": "The position of the opening brace of functions\u2018 body.",
                    "defaultValue": "next_line_unless_newline_at_signature_end",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                }
            ],
            "summary": "Braces must be placed as configured.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo {\n}\n\nfunction foo() {\n}\n\n$foo = function()\n{\n};\n\nif (foo())\n{\n    bar();\n}\n\n$foo = new class\n{\n};\n",
                    "to": "<?php\nclass Foo\n{\n}\n\nfunction foo()\n{\n}\n\n$foo = function() {\n};\n\nif (foo()) {\n    bar();\n}\n\n$foo = new class {\n};\n"
                },
                {
                    "from": "<?php\nif (foo()) {\n    bar();\n}\n",
                    "to": "<?php\nif (foo())\n{\n    bar();\n}\n",
                    "configuration": {
                        "control_structures_opening_brace": "next_line_unless_newline_at_signature_end"
                    }
                },
                {
                    "from": "<?php\nfunction foo()\n{\n}\n",
                    "to": "<?php\nfunction foo() {\n}\n",
                    "configuration": {
                        "functions_opening_brace": "same_line"
                    }
                },
                {
                    "from": "<?php\n$foo = function () {\n};\n",
                    "to": "<?php\n$foo = function ()\n{\n};\n",
                    "configuration": {
                        "anonymous_functions_opening_brace": "next_line_unless_newline_at_signature_end"
                    }
                },
                {
                    "from": "<?php\nclass Foo\n{\n}\n",
                    "to": "<?php\nclass Foo {\n}\n",
                    "configuration": {
                        "classes_opening_brace": "same_line"
                    }
                },
                {
                    "from": "<?php\n$foo = new class {\n};\n",
                    "to": "<?php\n$foo = new class\n{\n};\n",
                    "configuration": {
                        "anonymous_classes_opening_brace": "next_line_unless_newline_at_signature_end"
                    }
                },
                {
                    "from": "<?php\n$foo = new class { };\n$bar = new class { private $baz; };\n",
                    "to": "<?php\n$foo = new class { };\n$bar = new class {\nprivate $baz;\n};\n",
                    "configuration": {
                        "allow_single_line_empty_anonymous_classes": true
                    }
                },
                {
                    "from": "<?php\n$foo = function () { return true; };\n$bar = function () { $result = true;\n    return $result; };\n",
                    "to": "<?php\n$foo = function () { return true; };\n$bar = function () {\n$result = true;\n    return $result;\n};\n",
                    "configuration": {
                        "allow_single_line_anonymous_functions": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\BracesPositionFixer"
        },
        "cast_spaces": {
            "configuration": [
                {
                    "name": "space",
                    "description": "Spacing to apply between cast and variable.",
                    "defaultValue": "single",
                    "allowedValues": [
                        "none",
                        "single"
                    ]
                }
            ],
            "summary": "A single space or none should be between cast and variable.",
            "codeSamples": [
                {
                    "from": "<?php\n$bar = ( string )  $a;\n$foo = (int)$b;\n",
                    "to": "<?php\n$bar = (string) $a;\n$foo = (int) $b;\n"
                },
                {
                    "from": "<?php\n$bar = ( string )  $a;\n$foo = (int)$b;\n",
                    "to": "<?php\n$bar = (string) $a;\n$foo = (int) $b;\n",
                    "configuration": {
                        "space": "single"
                    }
                },
                {
                    "from": "<?php\n$bar = ( string )  $a;\n$foo = (int) $b;\n",
                    "to": "<?php\n$bar = (string)$a;\n$foo = (int)$b;\n",
                    "configuration": {
                        "space": "none"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\CastSpacesFixer"
        },
        "class_attributes_separation": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "Dictionary of `const|method|property|trait_import|case` => `none|one|only_if_meta` values.",
                    "defaultValue": {
                        "const": "one",
                        "method": "one",
                        "property": "one",
                        "trait_import": "none",
                        "case": "none"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Class, trait and interface elements must be separated with one or none blank line.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n    protected function bar()\n    {\n    }\n\n\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n\n    protected function bar()\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{private $a; \/\/ foo\n    \/** second in a hour *\/\n    private $b;\n}\n",
                    "to": "<?php\nclass Sample\n{\nprivate $a; \/\/ foo\n\n    \/** second in a hour *\/\n    private $b;\n}\n",
                    "configuration": {
                        "elements": {
                            "property": "one"
                        }
                    }
                },
                {
                    "from": "<?php\nclass Sample\n{\n    const A = 1;\n    \/** seconds in some hours *\/\n    const B = 3600;\n}\n",
                    "to": "<?php\nclass Sample\n{\n    const A = 1;\n\n    \/** seconds in some hours *\/\n    const B = 3600;\n}\n",
                    "configuration": {
                        "elements": {
                            "const": "one"
                        }
                    }
                },
                {
                    "from": "<?php\nclass Sample\n{\n    \/** @var int *\/\n    const SECOND = 1;\n    \/** @var int *\/\n    const MINUTE = 60;\n\n    const HOUR = 3600;\n\n    const DAY = 86400;\n}\n",
                    "to": "<?php\nclass Sample\n{\n    \/** @var int *\/\n    const SECOND = 1;\n\n    \/** @var int *\/\n    const MINUTE = 60;\n    const HOUR = 3600;\n    const DAY = 86400;\n}\n",
                    "configuration": {
                        "elements": {
                            "const": "only_if_meta"
                        }
                    }
                },
                {
                    "from": "<?php\nclass Sample\n{\n    public $a;\n    #[SetUp]\n    public $b;\n    \/** @var string *\/\n    public $c;\n    \/** @internal *\/\n    #[Assert\\String()]\n    public $d;\n\n    public $e;\n}\n",
                    "to": "<?php\nclass Sample\n{\n    public $a;\n\n    #[SetUp]\n    public $b;\n\n    \/** @var string *\/\n    public $c;\n\n    \/** @internal *\/\n    #[Assert\\String()]\n    public $d;\n    public $e;\n}\n",
                    "configuration": {
                        "elements": {
                            "property": "only_if_meta"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\ClassAttributesSeparationFixer"
        },
        "class_definition": {
            "configuration": [
                {
                    "name": "inline_constructor_arguments",
                    "description": "Whether constructor argument list in anonymous classes should be single line.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "multi_line_extends_each_single_line",
                    "description": "Whether definitions should be multiline.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "single_item_single_line",
                    "description": "Whether definitions should be single line when including a single item.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "single_line",
                    "description": "Whether definitions should be single line.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "space_before_parenthesis",
                    "description": "Whether there should be a single space after the parenthesis of anonymous class (PSR12) or not.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Whitespace around the keywords of a class, trait, enum or interfaces definition should be one space.",
            "codeSamples": [
                {
                    "from": "<?php\n\nclass  Foo  extends  Bar  implements  Baz,  BarBaz\n{\n}\n\nfinal  class  Foo  extends  Bar  implements  Baz,  BarBaz\n{\n}\n\ntrait  Foo\n{\n}\n\n$foo = new  class  extends  Bar  implements  Baz,  BarBaz {};\n",
                    "to": "<?php\n\nclass Foo extends Bar implements Baz, BarBaz\n{\n}\n\nfinal class Foo extends Bar implements Baz, BarBaz\n{\n}\n\ntrait Foo\n{\n}\n\n$foo = new class extends Bar implements Baz, BarBaz {};\n"
                },
                {
                    "from": "<?php\n\nclass Foo\nextends Bar\nimplements Baz, BarBaz\n{}\n",
                    "to": "<?php\n\nclass Foo extends Bar implements Baz, BarBaz\n{}\n",
                    "configuration": {
                        "single_line": true
                    }
                },
                {
                    "from": "<?php\n\nclass Foo\nextends Bar\nimplements Baz\n{}\n",
                    "to": "<?php\n\nclass Foo extends Bar implements Baz\n{}\n",
                    "configuration": {
                        "single_item_single_line": true
                    }
                },
                {
                    "from": "<?php\n\ninterface Bar extends\n    Bar, BarBaz, FooBarBaz\n{}\n",
                    "to": "<?php\n\ninterface Bar extends\n    Bar,\n    BarBaz,\n    FooBarBaz\n{}\n",
                    "configuration": {
                        "multi_line_extends_each_single_line": true
                    }
                },
                {
                    "from": "<?php\n$foo = new class(){};\n",
                    "to": "<?php\n$foo = new class () {};\n",
                    "configuration": {
                        "space_before_parenthesis": true
                    }
                },
                {
                    "from": "<?php\n$foo = new class(\n    $bar,\n    $baz\n) {};\n",
                    "to": "<?php\n$foo = new class($bar, $baz) {};\n",
                    "configuration": {
                        "inline_constructor_arguments": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\ClassDefinitionFixer"
        },
        "class_keyword_remove": {
            "summary": "Converts `::class` keywords to FQCN strings.",
            "codeSamples": [
                {
                    "from": "<?php\n\nuse Foo\\Bar\\Baz;\n\n$className = Baz::class;\n",
                    "to": "<?php\n\nuse Foo\\Bar\\Baz;\n\n$className = 'Foo\\Bar\\Baz';\n"
                }
            ],
            "deprecated_switchTo": [],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\ClassKeywordRemoveFixer"
        },
        "class_reference_name_casing": {
            "summary": "When referencing an internal class it must be written using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\nthrow new \\exception();\n",
                    "to": "<?php\nthrow new \\Exception();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\ClassReferenceNameCasingFixer"
        },
        "clean_namespace": {
            "summary": "Namespace must not contain spacing, comments or PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace Foo \\ Bar;\n",
                    "to": "<?php\nnamespace Foo\\Bar;\n"
                },
                {
                    "from": "<?php\necho foo \/* comment *\/ \\ bar();\n",
                    "to": "<?php\necho foo\\bar();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\CleanNamespaceFixer"
        },
        "combine_consecutive_issets": {
            "summary": "Using `isset($var) &&` multiple times should be done in one call.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = isset($a) && isset($b);\n",
                    "to": "<?php\n$a = isset($a, $b)  ;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\CombineConsecutiveIssetsFixer"
        },
        "combine_consecutive_unsets": {
            "summary": "Calling `unset` on multiple items should be done in one call.",
            "codeSamples": [
                {
                    "from": "<?php\nunset($a); unset($b);\n",
                    "to": "<?php\nunset($a, $b); \n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\CombineConsecutiveUnsetsFixer"
        },
        "combine_nested_dirname": {
            "risky": true,
            "summary": "Replace multiple nested calls of `dirname` by only one call with second `$level` parameter. Requires PHP >= 7.0.",
            "riskyDescription": "Risky when the function `dirname` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\ndirname(dirname(dirname($path)));\n",
                    "to": "<?php\ndirname($path, 3);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\CombineNestedDirnameFixer"
        },
        "comment_to_phpdoc": {
            "risky": true,
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of ignored tags.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Comments with annotation should be docblock when used on structural elements.",
            "riskyDescription": "Risky as new docblocks might mean more, e.g. a Doctrine entity might have a new column in database.",
            "codeSamples": [
                {
                    "from": "<?php \/* header *\/ $x = true; \/* @var bool $isFoo *\/ $isFoo = true;\n",
                    "to": "<?php \/* header *\/ $x = true; \/** @var bool $isFoo *\/ $isFoo = true;\n"
                },
                {
                    "from": "<?php\n\/\/ @todo do something later\n$foo = 1;\n\n\/\/ @var int $a\n$a = foo();\n",
                    "to": "<?php\n\/\/ @todo do something later\n$foo = 1;\n\n\/** @var int $a *\/\n$a = foo();\n",
                    "configuration": {
                        "ignored_tags": [
                            "todo"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\CommentToPhpdocFixer"
        },
        "compact_nullable_type_declaration": {
            "summary": "Remove extra spaces in a nullable type declaration.",
            "description": "Rule is applied only in a PHP 7.1+ environment.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample(? string $str): ? string\n{}\n",
                    "to": "<?php\nfunction sample(?string $str): ?string\n{}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\CompactNullableTypeDeclarationFixer"
        },
        "compact_nullable_typehint": {
            "summary": "Remove extra spaces in a nullable typehint.",
            "description": "Rule is applied only in a PHP 7.1+ environment.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample(? string $str): ? string\n{}\n",
                    "to": "<?php\nfunction sample(?string $str): ?string\n{}\n"
                }
            ],
            "deprecated_switchTo": [
                "compact_nullable_type_declaration"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\CompactNullableTypehintFixer"
        },
        "concat_space": {
            "configuration": [
                {
                    "name": "spacing",
                    "description": "Spacing to apply around concatenation operator.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "one",
                        "none"
                    ]
                }
            ],
            "summary": "Concatenation should be spaced according to configuration.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = 'bar' . 3 . 'baz'.'qux';\n",
                    "to": "<?php\n$foo = 'bar'. 3 .'baz'.'qux';\n"
                },
                {
                    "from": "<?php\n$foo = 'bar' . 3 . 'baz'.'qux';\n",
                    "to": "<?php\n$foo = 'bar'. 3 .'baz'.'qux';\n",
                    "configuration": {
                        "spacing": "none"
                    }
                },
                {
                    "from": "<?php\n$foo = 'bar' . 3 . 'baz'.'qux';\n",
                    "to": "<?php\n$foo = 'bar' . 3 . 'baz' . 'qux';\n",
                    "configuration": {
                        "spacing": "one"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\ConcatSpaceFixer"
        },
        "constant_case": {
            "configuration": [
                {
                    "name": "case",
                    "description": "Whether to use the `upper` or `lower` case syntax.",
                    "defaultValue": "lower",
                    "allowedValues": [
                        "upper",
                        "lower"
                    ]
                }
            ],
            "summary": "The PHP constants `true`, `false`, and `null` MUST be written using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = FALSE;\n$b = True;\n$c = nuLL;\n",
                    "to": "<?php\n$a = false;\n$b = true;\n$c = null;\n"
                },
                {
                    "from": "<?php\n$a = FALSE;\n$b = True;\n$c = nuLL;\n",
                    "to": "<?php\n$a = FALSE;\n$b = TRUE;\n$c = NULL;\n",
                    "configuration": {
                        "case": "upper"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\ConstantCaseFixer"
        },
        "control_structure_braces": {
            "summary": "The body of each control structure MUST be enclosed within braces.",
            "codeSamples": [
                {
                    "from": "<?php\nif (foo()) echo 'Hello!';\n",
                    "to": "<?php\nif (foo()) { echo 'Hello!'; }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\ControlStructureBracesFixer"
        },
        "control_structure_continuation_position": {
            "configuration": [
                {
                    "name": "position",
                    "description": "The position of the keyword that continues the control structure.",
                    "defaultValue": "same_line",
                    "allowedValues": [
                        "next_line",
                        "same_line"
                    ]
                }
            ],
            "summary": "Control structure continuation keyword must be on the configured line.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($baz == true) {\n    echo \"foo\";\n}\nelse {\n    echo \"bar\";\n}\n",
                    "to": "<?php\nif ($baz == true) {\n    echo \"foo\";\n} else {\n    echo \"bar\";\n}\n"
                },
                {
                    "from": "<?php\nif ($baz == true) {\n    echo \"foo\";\n} else {\n    echo \"bar\";\n}\n",
                    "to": "<?php\nif ($baz == true) {\n    echo \"foo\";\n}\nelse {\n    echo \"bar\";\n}\n",
                    "configuration": {
                        "position": "next_line"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\ControlStructureContinuationPositionFixer"
        },
        "curly_braces_position": {
            "configuration": [
                {
                    "name": "allow_single_line_anonymous_functions",
                    "description": "Allow anonymous functions to have opening and closing braces on the same line.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "allow_single_line_empty_anonymous_classes",
                    "description": "Allow anonymous classes to have opening and closing braces on the same line.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "anonymous_classes_opening_brace",
                    "description": "The position of the opening brace of anonymous classes\u2018 body.",
                    "defaultValue": "same_line",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "anonymous_functions_opening_brace",
                    "description": "The position of the opening brace of anonymous functions\u2018 body.",
                    "defaultValue": "same_line",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "classes_opening_brace",
                    "description": "The position of the opening brace of classes\u2018 body.",
                    "defaultValue": "next_line_unless_newline_at_signature_end",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "control_structures_opening_brace",
                    "description": "The position of the opening brace of control structures\u2018 body.",
                    "defaultValue": "same_line",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                },
                {
                    "name": "functions_opening_brace",
                    "description": "The position of the opening brace of functions\u2018 body.",
                    "defaultValue": "next_line_unless_newline_at_signature_end",
                    "allowedValues": [
                        "next_line_unless_newline_at_signature_end",
                        "same_line"
                    ]
                }
            ],
            "summary": "Curly braces must be placed as configured.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo {\n}\n\nfunction foo() {\n}\n\n$foo = function()\n{\n};\n\nif (foo())\n{\n    bar();\n}\n\n$foo = new class\n{\n};\n",
                    "to": "<?php\nclass Foo\n{\n}\n\nfunction foo()\n{\n}\n\n$foo = function() {\n};\n\nif (foo()) {\n    bar();\n}\n\n$foo = new class {\n};\n"
                },
                {
                    "from": "<?php\nif (foo()) {\n    bar();\n}\n",
                    "to": "<?php\nif (foo())\n{\n    bar();\n}\n",
                    "configuration": {
                        "control_structures_opening_brace": "next_line_unless_newline_at_signature_end"
                    }
                },
                {
                    "from": "<?php\nfunction foo()\n{\n}\n",
                    "to": "<?php\nfunction foo() {\n}\n",
                    "configuration": {
                        "functions_opening_brace": "same_line"
                    }
                },
                {
                    "from": "<?php\n$foo = function () {\n};\n",
                    "to": "<?php\n$foo = function ()\n{\n};\n",
                    "configuration": {
                        "anonymous_functions_opening_brace": "next_line_unless_newline_at_signature_end"
                    }
                },
                {
                    "from": "<?php\nclass Foo\n{\n}\n",
                    "to": "<?php\nclass Foo {\n}\n",
                    "configuration": {
                        "classes_opening_brace": "same_line"
                    }
                },
                {
                    "from": "<?php\n$foo = new class {\n};\n",
                    "to": "<?php\n$foo = new class\n{\n};\n",
                    "configuration": {
                        "anonymous_classes_opening_brace": "next_line_unless_newline_at_signature_end"
                    }
                },
                {
                    "from": "<?php\n$foo = new class { };\n$bar = new class { private $baz; };\n",
                    "to": "<?php\n$foo = new class { };\n$bar = new class {\nprivate $baz;\n};\n",
                    "configuration": {
                        "allow_single_line_empty_anonymous_classes": true
                    }
                },
                {
                    "from": "<?php\n$foo = function () { return true; };\n$bar = function () { $result = true;\n    return $result; };\n",
                    "to": "<?php\n$foo = function () { return true; };\n$bar = function () {\n$result = true;\n    return $result;\n};\n",
                    "configuration": {
                        "allow_single_line_anonymous_functions": true
                    }
                }
            ],
            "deprecated_switchTo": [
                "braces_position"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\CurlyBracesPositionFixer"
        },
        "date_time_create_from_format_call": {
            "risky": true,
            "summary": "The first argument of `DateTime::createFromFormat` method must start with `!`.",
            "description": "Consider this code:\n    `DateTime::createFromFormat('Y-m-d', '2022-02-11')`.\n    What value will be returned? '2022-02-11 00:00:00.0'? No, actual return value has 'H:i:s' section like '2022-02-11 16:55:37.0'.\n    Change 'Y-m-d' to '!Y-m-d', return value will be '2022-02-11 00:00:00.0'.\n    So, adding `!` to format string will make return value more intuitive.",
            "riskyDescription": "Risky when depending on the actual timings being used even when not explicit set in format.",
            "codeSamples": [
                {
                    "from": "<?php \\DateTime::createFromFormat('Y-m-d', '2022-02-11');\n",
                    "to": "<?php \\DateTime::createFromFormat('!Y-m-d', '2022-02-11');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\DateTimeCreateFromFormatCallFixer"
        },
        "date_time_immutable": {
            "risky": true,
            "summary": "Class `DateTimeImmutable` should be used instead of `DateTime`.",
            "riskyDescription": "Risky when the code relies on modifying `DateTime` objects or if any of the `date_create*` functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\nnew DateTime();\n",
                    "to": "<?php\nnew DateTimeImmutable();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassUsage\\DateTimeImmutableFixer"
        },
        "declare_equal_normalize": {
            "configuration": [
                {
                    "name": "space",
                    "description": "Spacing to apply around the equal sign.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "single",
                        "none"
                    ]
                }
            ],
            "summary": "Equal sign in declare statement should be surrounded by spaces or not following configuration.",
            "codeSamples": [
                {
                    "from": "<?php\ndeclare(ticks =  1);\n",
                    "to": "<?php\ndeclare(ticks=1);\n"
                },
                {
                    "from": "<?php\ndeclare(ticks=1);\n",
                    "to": "<?php\ndeclare(ticks = 1);\n",
                    "configuration": {
                        "space": "single"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\DeclareEqualNormalizeFixer"
        },
        "declare_parentheses": {
            "summary": "There must not be spaces around `declare` statement parentheses.",
            "codeSamples": [
                {
                    "from": "<?php declare ( strict_types=1 );\n",
                    "to": "<?php declare(strict_types=1);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\DeclareParenthesesFixer"
        },
        "declare_strict_types": {
            "risky": true,
            "summary": "Force strict types declaration in all files. Requires PHP >= 7.0.",
            "riskyDescription": "Forcing strict types will stop non strict code from working.",
            "codeSamples": [
                {
                    "from": "<?php\n",
                    "to": "<?php declare(strict_types=1);"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Strict\\DeclareStrictTypesFixer"
        },
        "dir_constant": {
            "risky": true,
            "summary": "Replaces `dirname(__FILE__)` expression with equivalent `__DIR__` constant.",
            "riskyDescription": "Risky when the function `dirname` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = dirname(__FILE__);\n",
                    "to": "<?php\n$a = __DIR__;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\DirConstantFixer"
        },
        "doctrine_annotation_array_assignment": {
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "psalm",
                        "phpstan",
                        "template",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "operator",
                    "description": "The operator to use.",
                    "defaultValue": "=",
                    "allowedValues": [
                        "=",
                        ":"
                    ]
                }
            ],
            "summary": "Doctrine annotations must use configured operator for assignment in arrays.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @Foo({bar : \"baz\"})\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo({bar = \"baz\"})\n *\/\nclass Bar {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @Foo({bar = \"baz\"})\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo({bar : \"baz\"})\n *\/\nclass Bar {}\n",
                    "configuration": {
                        "operator": ":"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationArrayAssignmentFixer"
        },
        "doctrine_annotation_braces": {
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "psalm",
                        "phpstan",
                        "template",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "syntax",
                    "description": "Whether to add or remove braces.",
                    "defaultValue": "without_braces",
                    "allowedValues": [
                        "with_braces",
                        "without_braces"
                    ]
                }
            ],
            "summary": "Doctrine annotations without arguments must use the configured syntax.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo\n *\/\nclass Bar {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @Foo\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}\n",
                    "configuration": {
                        "syntax": "with_braces"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationBracesFixer"
        },
        "doctrine_annotation_indentation": {
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "psalm",
                        "phpstan",
                        "template",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "indent_mixed_lines",
                    "description": "Whether to indent lines that have content before closing parenthesis.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Doctrine annotations must be indented with four spaces.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n *  @Foo(\n *   foo=\"foo\"\n *  )\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo(\n *     foo=\"foo\"\n * )\n *\/\nclass Bar {}\n"
                },
                {
                    "from": "<?php\n\/**\n *  @Foo({@Bar,\n *   @Baz})\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo({@Bar,\n *     @Baz})\n *\/\nclass Bar {}\n",
                    "configuration": {
                        "indent_mixed_lines": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationIndentationFixer"
        },
        "doctrine_annotation_spaces": {
            "configuration": [
                {
                    "name": "after_argument_assignments",
                    "description": "Whether to add, remove or ignore spaces after argument assignment operator.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "after_array_assignments_colon",
                    "description": "Whether to add, remove or ignore spaces after array assignment `:` operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "after_array_assignments_equals",
                    "description": "Whether to add, remove or ignore spaces after array assignment `=` operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "around_commas",
                    "description": "Whether to fix spaces around commas.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "around_parentheses",
                    "description": "Whether to fix spaces around parentheses.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "before_argument_assignments",
                    "description": "Whether to add, remove or ignore spaces before argument assignment operator.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "before_array_assignments_colon",
                    "description": "Whether to add, remove or ignore spaces before array `:` assignment operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "before_array_assignments_equals",
                    "description": "Whether to add, remove or ignore spaces before array `=` assignment operator.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "null",
                        "bool"
                    ]
                },
                {
                    "name": "ignored_tags",
                    "description": "List of tags that must not be treated as Doctrine Annotations.",
                    "defaultValue": [
                        "abstract",
                        "access",
                        "code",
                        "deprec",
                        "encode",
                        "exception",
                        "final",
                        "ingroup",
                        "inheritdoc",
                        "inheritDoc",
                        "magic",
                        "name",
                        "toc",
                        "tutorial",
                        "private",
                        "static",
                        "staticvar",
                        "staticVar",
                        "throw",
                        "api",
                        "author",
                        "category",
                        "copyright",
                        "deprecated",
                        "example",
                        "filesource",
                        "global",
                        "ignore",
                        "internal",
                        "license",
                        "link",
                        "method",
                        "package",
                        "param",
                        "property",
                        "property-read",
                        "property-write",
                        "return",
                        "see",
                        "since",
                        "source",
                        "subpackage",
                        "throws",
                        "todo",
                        "TODO",
                        "usedBy",
                        "uses",
                        "var",
                        "version",
                        "after",
                        "afterClass",
                        "backupGlobals",
                        "backupStaticAttributes",
                        "before",
                        "beforeClass",
                        "codeCoverageIgnore",
                        "codeCoverageIgnoreStart",
                        "codeCoverageIgnoreEnd",
                        "covers",
                        "coversDefaultClass",
                        "coversNothing",
                        "dataProvider",
                        "depends",
                        "expectedException",
                        "expectedExceptionCode",
                        "expectedExceptionMessage",
                        "expectedExceptionMessageRegExp",
                        "group",
                        "large",
                        "medium",
                        "preserveGlobalState",
                        "requires",
                        "runTestsInSeparateProcesses",
                        "runInSeparateProcess",
                        "small",
                        "test",
                        "testdox",
                        "ticket",
                        "uses",
                        "SuppressWarnings",
                        "noinspection",
                        "package_version",
                        "enduml",
                        "startuml",
                        "psalm",
                        "phpstan",
                        "template",
                        "fix",
                        "FIXME",
                        "fixme",
                        "override"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Fixes spaces in Doctrine annotations.",
            "description": "There must not be any space around parentheses; commas must be preceded by no space and followed by one space; there must be no space around named arguments assignment operator; there must be one space around array assignment operator.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @Foo ( )\n *\/\nclass Bar {}\n\n\/**\n * @Foo(\"bar\" ,\"baz\")\n *\/\nclass Bar2 {}\n\n\/**\n * @Foo(foo = \"foo\", bar = {\"foo\":\"foo\", \"bar\"=\"bar\"})\n *\/\nclass Bar3 {}\n",
                    "to": "<?php\n\/**\n * @Foo()\n *\/\nclass Bar {}\n\n\/**\n * @Foo(\"bar\", \"baz\")\n *\/\nclass Bar2 {}\n\n\/**\n * @Foo(foo=\"foo\", bar={\"foo\" : \"foo\", \"bar\" = \"bar\"})\n *\/\nclass Bar3 {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @Foo(foo = \"foo\", bar = {\"foo\":\"foo\", \"bar\"=\"bar\"})\n *\/\nclass Bar {}\n",
                    "to": "<?php\n\/**\n * @Foo(foo=\"foo\", bar={\"foo\" : \"foo\", \"bar\"=\"bar\"})\n *\/\nclass Bar {}\n",
                    "configuration": {
                        "after_array_assignments_equals": false,
                        "before_array_assignments_equals": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\DoctrineAnnotation\\DoctrineAnnotationSpacesFixer"
        },
        "echo_tag_syntax": {
            "configuration": [
                {
                    "name": "format",
                    "description": "The desired language construct.",
                    "defaultValue": "long",
                    "allowedValues": [
                        "long",
                        "short"
                    ]
                },
                {
                    "name": "long_function",
                    "description": "The function to be used to expand the short echo tags.",
                    "defaultValue": "echo",
                    "allowedValues": [
                        "echo",
                        "print"
                    ]
                },
                {
                    "name": "shorten_simple_statements_only",
                    "description": "Render short-echo tags only in case of simple code.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Replaces short-echo `<?=` with long format `<?php echo`\/`<?php print` syntax, or vice-versa.",
            "codeSamples": [
                {
                    "from": "<?=1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "to": "<?php echo 1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n"
                },
                {
                    "from": "<?=1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "to": "<?php echo 1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "configuration": {
                        "format": "long"
                    }
                },
                {
                    "from": "<?=1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "to": "<?php print 1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "configuration": {
                        "format": "long",
                        "long_function": "print"
                    }
                },
                {
                    "from": "<?=1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "to": "<?=1?>\n<?= '2' . '3'; ?>\n<?=\/* comment *\/ '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "configuration": {
                        "format": "short"
                    }
                },
                {
                    "from": "<?=1?>\n<?php print '2' . '3'; ?>\n<?php \/* comment *\/ echo '2' . '3'; ?>\n<?php print '2' . '3'; someFunction(); ?>\n",
                    "to": "<?=1?>\n<?= '2' . '3'; ?>\n<?=\/* comment *\/ '2' . '3'; ?>\n<?= '2' . '3'; someFunction(); ?>\n",
                    "configuration": {
                        "format": "short",
                        "shorten_simple_statements_only": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\EchoTagSyntaxFixer"
        },
        "elseif": {
            "summary": "The keyword `elseif` should be used instead of `else if` so that all control keywords look like single words.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($a) {\n} else if ($b) {\n}\n",
                    "to": "<?php\nif ($a) {\n} elseif ($b) {\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\ElseifFixer"
        },
        "empty_loop_body": {
            "configuration": [
                {
                    "name": "style",
                    "description": "Style of empty loop-bodies.",
                    "defaultValue": "semicolon",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "braces",
                        "semicolon"
                    ]
                }
            ],
            "summary": "Empty loop-body must be in configured style.",
            "codeSamples": [
                {
                    "from": "<?php while(foo()){}\n",
                    "to": "<?php while(foo());\n"
                },
                {
                    "from": "<?php while(foo());\n",
                    "to": "<?php while(foo()){}\n",
                    "configuration": {
                        "style": "braces"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\EmptyLoopBodyFixer"
        },
        "empty_loop_condition": {
            "configuration": [
                {
                    "name": "style",
                    "description": "Style of empty loop-condition.",
                    "defaultValue": "while",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "while",
                        "for"
                    ]
                }
            ],
            "summary": "Empty loop-condition must be in configured style.",
            "codeSamples": [
                {
                    "from": "<?php\nfor(;;) {\n    foo();\n}\n\ndo {\n    foo();\n} while(true); \/\/ do while\n",
                    "to": "<?php\nwhile (true) {\n    foo();\n}\n\nwhile (true) {\n    foo();\n}  \/\/ do while\n"
                },
                {
                    "from": "<?php\nwhile(true) {\n    foo();\n}\n",
                    "to": "<?php\nfor(;;) {\n    foo();\n}\n",
                    "configuration": {
                        "style": "for"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\EmptyLoopConditionFixer"
        },
        "encoding": {
            "summary": "PHP code MUST use only UTF-8 without BOM (remove BOM).",
            "codeSamples": [
                {
                    "from": "\ufeff<?php\n\necho \"Hello!\";\n",
                    "to": "<?php\n\necho \"Hello!\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\EncodingFixer"
        },
        "ereg_to_preg": {
            "risky": true,
            "summary": "Replace deprecated `ereg` regular expression functions with `preg`.",
            "riskyDescription": "Risky if the `ereg` function is overridden.",
            "codeSamples": [
                {
                    "from": "<?php $x = ereg('[A-Z]');\n",
                    "to": "<?php $x = preg_match('\/[A-Z]\/D');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\EregToPregFixer"
        },
        "error_suppression": {
            "risky": true,
            "configuration": [
                {
                    "name": "mute_deprecation_error",
                    "description": "Whether to add `@` in deprecation notices.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "noise_remaining_usages",
                    "description": "Whether to remove `@` in remaining usages.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "noise_remaining_usages_exclude",
                    "description": "List of global functions to exclude from removing `@`.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Error control operator should be added to deprecation notices and\/or removed from other cases.",
            "riskyDescription": "Risky because adding\/removing `@` might cause changes to code behaviour or if `trigger_error` function is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\ntrigger_error('Warning.', E_USER_DEPRECATED);\n",
                    "to": "<?php\n@trigger_error('Warning.', E_USER_DEPRECATED);\n"
                },
                {
                    "from": "<?php\n@mkdir($dir);\n@unlink($path);\n",
                    "to": "<?php\nmkdir($dir);\nunlink($path);\n",
                    "configuration": {
                        "noise_remaining_usages": true
                    }
                },
                {
                    "from": "<?php\n@mkdir($dir);\n@unlink($path);\n",
                    "to": "<?php\nmkdir($dir);\n@unlink($path);\n",
                    "configuration": {
                        "noise_remaining_usages": true,
                        "noise_remaining_usages_exclude": [
                            "unlink"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\ErrorSuppressionFixer"
        },
        "escape_implicit_backslashes": {
            "configuration": [
                {
                    "name": "double_quoted",
                    "description": "Whether to fix double-quoted strings.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "heredoc_syntax",
                    "description": "Whether to fix heredoc syntax.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "single_quoted",
                    "description": "Whether to fix single-quoted strings.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Escape implicit backslashes in strings and heredocs to ease the understanding of which are special chars interpreted by PHP and which not.",
            "description": "In PHP double-quoted strings and heredocs some chars like `n`, `$` or `u` have special meanings if preceded by a backslash (and some are special only if followed by other special chars), while a backslash preceding other chars are interpreted like a plain backslash. The precise list of those special chars is hard to remember and to identify quickly: this fixer escapes backslashes that do not start a special interpretation with the char after them.\nIt is possible to fix also single-quoted strings: in this case there is no special chars apart from single-quote and backslash itself, so the fixer simply ensure that all backslashes are escaped. Both single and double backslashes are allowed in single-quoted strings, so the purpose in this context is mainly to have a uniformed way to have them written all over the codebase.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\\\999\nHEREDOC;\n"
                },
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\\\" and My\\\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\\\999\nHEREDOC;\n",
                    "configuration": {
                        "single_quoted": true
                    }
                },
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\\\999\nHEREDOC;\n",
                    "configuration": {
                        "double_quoted": false
                    }
                },
                {
                    "from": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "to": "<?php\n\n$singleQuoted = 'String with \\\" and My\\Prefix\\\\';\n\n$doubleQuoted = \"Interpret my \\n but not my \\\\a\";\n\n$hereDoc = <<<HEREDOC\nInterpret my \\100 but not my \\999\nHEREDOC;\n",
                    "configuration": {
                        "heredoc_syntax": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\EscapeImplicitBackslashesFixer"
        },
        "explicit_indirect_variable": {
            "summary": "Add curly braces to indirect variables to make them clear to understand. Requires PHP >= 7.0.",
            "codeSamples": [
                {
                    "from": "<?php\necho $$foo;\necho $$foo['bar'];\necho $foo->$bar['baz'];\necho $foo->$callback($baz);\n",
                    "to": "<?php\necho ${$foo};\necho ${$foo}['bar'];\necho $foo->{$bar}['baz'];\necho $foo->{$callback}($baz);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\ExplicitIndirectVariableFixer"
        },
        "explicit_string_variable": {
            "summary": "Converts implicit variables into explicit ones in double-quoted strings or heredoc syntax.",
            "description": "The reasoning behind this rule is the following:\n- When there are two valid ways of doing the same thing, using both is confusing, there should be a coding standard to follow.\n- PHP manual marks `\"$var\"` syntax as implicit and `\"${var}\"` syntax as explicit: explicit code should always be preferred.\n- Explicit syntax allows word concatenation inside strings, e.g. `\"${var}IsAVar\"`, implicit doesn't.\n- Explicit syntax is easier to detect for IDE\/editors and therefore has colors\/highlight with higher contrast, which is easier to read.\nBacktick operator is skipped because it is harder to handle; you can use `backtick_to_shell_exec` fixer to normalize backticks to strings.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = \"My name is $name !\";\n$b = \"I live in $state->country !\";\n$c = \"I have $farm[0] chickens !\";\n",
                    "to": "<?php\n$a = \"My name is {$name} !\";\n$b = \"I live in {$state->country} !\";\n$c = \"I have {$farm[0]} chickens !\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\ExplicitStringVariableFixer"
        },
        "final_class": {
            "risky": true,
            "summary": "All classes must be final, except abstract ones and Doctrine entities.",
            "description": "No exception and no configuration are intentional. Beside Doctrine entities and of course abstract classes, there is no single reason not to declare all classes final. If you want to subclass a class, mark the parent class as abstract and create two child classes, one empty if necessary: you'll gain much more fine grained type-hinting. If you need to mock a standalone class, create an interface, or maybe it's a value-object that shouldn't be mocked at all. If you need to extend a standalone class, create an interface and use the Composite pattern. If you aren't ready yet for serious OOP, go with FinalInternalClassFixer, it's fine.",
            "riskyDescription": "Risky when subclassing non-abstract classes.",
            "codeSamples": [
                {
                    "from": "<?php\nclass MyApp {}\n",
                    "to": "<?php\nfinal class MyApp {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\FinalClassFixer"
        },
        "final_internal_class": {
            "risky": true,
            "configuration": [
                {
                    "name": "annotation_exclude",
                    "deprecationReason": "Use `exclude` to configure PHPDoc annotations tags and attributes.",
                    "description": "Class level attribute or annotation tags that must be omitted to fix the class, even if all of the white list ones are used as well (case insensitive).",
                    "defaultValue": [
                        "@final",
                        "@Entity",
                        "@ORM\\Entity",
                        "@ORM\\Mapping\\Entity",
                        "@Mapping\\Entity",
                        "@Document",
                        "@ODM\\Document"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "annotation_include",
                    "deprecationReason": "Use `include` to configure PHPDoc annotations tags and attributes.",
                    "description": "Class level attribute or annotation tags that must be set in order to fix the class (case insensitive).",
                    "defaultValue": [
                        "@internal"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "consider_absent_docblock_as_internal_class",
                    "description": "Whether classes without any DocBlock should be fixed to final.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "exclude",
                    "description": "Class level attribute or annotation tags that must be omitted to fix the class, even if all of the white list ones are used as well (case insensitive).",
                    "defaultValue": [
                        "final",
                        "Entity",
                        "ORM\\Entity",
                        "ORM\\Mapping\\Entity",
                        "Mapping\\Entity",
                        "Document",
                        "ODM\\Document"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "include",
                    "description": "Class level attribute or annotation tags that must be set in order to fix the class (case insensitive).",
                    "defaultValue": [
                        "internal"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Internal classes should be `final`.",
            "riskyDescription": "Changing classes to `final` might cause code execution to break.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @internal\n *\/\nclass Sample\n{\n}\n",
                    "to": "<?php\n\/**\n * @internal\n *\/\nfinal class Sample\n{\n}\n"
                },
                {
                    "from": "<?php\n\/**\n * @CUSTOM\n *\/\nclass A{}\n\n\/**\n * @CUSTOM\n * @not-fix\n *\/\nclass B{}\n",
                    "to": "<?php\n\/**\n * @CUSTOM\n *\/\nfinal class A{}\n\n\/**\n * @CUSTOM\n * @not-fix\n *\/\nclass B{}\n",
                    "configuration": {
                        "include": [
                            "@Custom"
                        ],
                        "exclude": [
                            "@not-fix"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\FinalInternalClassFixer"
        },
        "final_public_method_for_abstract_class": {
            "risky": true,
            "summary": "All `public` methods of `abstract` classes should be `final`.",
            "description": "Enforce API encapsulation in an inheritance architecture. If you want to override a method, use the Template method pattern.",
            "riskyDescription": "Risky when overriding `public` methods of `abstract` classes.",
            "codeSamples": [
                {
                    "from": "<?php\n\nabstract class AbstractMachine\n{\n    public function start()\n    {}\n}\n",
                    "to": "<?php\n\nabstract class AbstractMachine\n{\n    final public function start()\n    {}\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\FinalPublicMethodForAbstractClassFixer"
        },
        "fopen_flag_order": {
            "risky": true,
            "summary": "Order the flags in `fopen` calls, `b` and `t` must be last.",
            "riskyDescription": "Risky when the function `fopen` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = fopen($foo, 'br+');\n",
                    "to": "<?php\n$a = fopen($foo, 'r+b');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FopenFlagOrderFixer"
        },
        "fopen_flags": {
            "risky": true,
            "configuration": [
                {
                    "name": "b_mode",
                    "description": "The `b` flag must be used (`true`) or omitted (`false`).",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "The flags in `fopen` calls must omit `t`, and `b` must be omitted or included consistently.",
            "riskyDescription": "Risky when the function `fopen` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = fopen($foo, 'rwt');\n",
                    "to": "<?php\n$a = fopen($foo, 'rwb');\n"
                },
                {
                    "from": "<?php\n$a = fopen($foo, 'rwt');\n",
                    "to": "<?php\n$a = fopen($foo, 'rw');\n",
                    "configuration": {
                        "b_mode": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FopenFlagsFixer"
        },
        "full_opening_tag": {
            "summary": "PHP code must use the long `<?php` tags or short-echo `<?=` tags and not other tag variations.",
            "codeSamples": [
                {
                    "from": "<?\n\necho \"Hello!\";\n",
                    "to": "<?php\n\necho \"Hello!\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\FullOpeningTagFixer"
        },
        "fully_qualified_strict_types": {
            "configuration": [
                {
                    "name": "leading_backslash_in_global_namespace",
                    "description": "Whether FQCN is prefixed with backslash when that FQCN is used in global namespace context.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Transforms imported FQCN parameters and return types in function arguments to short version.",
            "codeSamples": [
                {
                    "from": "<?php\n\nuse Foo\\Bar;\nuse Foo\\Bar\\Baz;\n\nclass SomeClass\n{\n    public function doX(\\Foo\\Bar $foo): \\Foo\\Bar\\Baz\n    {\n    }\n\n    public function doY(Foo\\NotImported $u, \\Foo\\NotImported $v)\n    {\n    }\n}\n",
                    "to": "<?php\n\nuse Foo\\Bar;\nuse Foo\\Bar\\Baz;\n\nclass SomeClass\n{\n    public function doX(Bar $foo): Baz\n    {\n    }\n\n    public function doY(Foo\\NotImported $u, Foo\\NotImported $v)\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\n\nclass SomeClass\n{\n    public function doY(Foo\\NotImported $u, \\Foo\\NotImported $v)\n    {\n    }\n}\n",
                    "to": "<?php\n\nclass SomeClass\n{\n    public function doY(\\Foo\\NotImported $u, \\Foo\\NotImported $v)\n    {\n    }\n}\n",
                    "configuration": {
                        "leading_backslash_in_global_namespace": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\FullyQualifiedStrictTypesFixer"
        },
        "function_declaration": {
            "configuration": [
                {
                    "name": "closure_fn_spacing",
                    "description": "Spacing to use before open parenthesis for short arrow functions.",
                    "defaultValue": "one",
                    "allowedValues": [
                        "none",
                        "one"
                    ]
                },
                {
                    "name": "closure_function_spacing",
                    "description": "Spacing to use before open parenthesis for closures.",
                    "defaultValue": "one",
                    "allowedValues": [
                        "none",
                        "one"
                    ]
                },
                {
                    "name": "trailing_comma_single_line",
                    "description": "Whether trailing commas are allowed in single line signatures.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Spaces should be properly placed in a function declaration.",
            "codeSamples": [
                {
                    "from": "<?php\n\nclass Foo\n{\n    public static function  bar   ( $baz , $foo )\n    {\n        return false;\n    }\n}\n\nfunction  foo  ($bar, $baz)\n{\n    return false;\n}\n",
                    "to": "<?php\n\nclass Foo\n{\n    public static function bar($baz , $foo)\n    {\n        return false;\n    }\n}\n\nfunction foo($bar, $baz)\n{\n    return false;\n}\n"
                },
                {
                    "from": "<?php\n$f = function () {};\n",
                    "to": "<?php\n$f = function() {};\n",
                    "configuration": {
                        "closure_function_spacing": "none"
                    }
                },
                {
                    "from": "<?php\n$f = fn () => null;\n",
                    "to": "<?php\n$f = fn() => null;\n",
                    "configuration": {
                        "closure_fn_spacing": "none"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FunctionDeclarationFixer"
        },
        "function_to_constant": {
            "risky": true,
            "configuration": [
                {
                    "name": "functions",
                    "description": "List of function names to fix.",
                    "defaultValue": [
                        "get_called_class",
                        "get_class",
                        "get_class_this",
                        "php_sapi_name",
                        "phpversion",
                        "pi"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "get_called_class",
                            "get_class",
                            "get_class_this",
                            "php_sapi_name",
                            "phpversion",
                            "pi"
                        ]
                    ]
                }
            ],
            "summary": "Replace core functions calls returning constants with the constants.",
            "riskyDescription": "Risky when any of the configured functions to replace are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\necho phpversion();\necho pi();\necho php_sapi_name();\nclass Foo\n{\n    public function Bar()\n    {\n        echo get_class();\n        echo get_called_class();\n    }\n}\n",
                    "to": "<?php\necho PHP_VERSION;\necho M_PI;\necho PHP_SAPI;\nclass Foo\n{\n    public function Bar()\n    {\n        echo __CLASS__;\n        echo static::class;\n    }\n}\n"
                },
                {
                    "from": "<?php\necho phpversion();\necho pi();\nclass Foo\n{\n    public function Bar()\n    {\n        echo get_class();\n        get_class($this);\n        echo get_called_class();\n    }\n}\n",
                    "to": "<?php\necho PHP_VERSION;\necho pi();\nclass Foo\n{\n    public function Bar()\n    {\n        echo get_class();\n        static::class;\n        echo static::class;\n    }\n}\n",
                    "configuration": {
                        "functions": [
                            "get_called_class",
                            "get_class_this",
                            "phpversion"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\FunctionToConstantFixer"
        },
        "function_typehint_space": {
            "summary": "Ensure single space between function's argument and its typehint.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample(array$a)\n{}\n",
                    "to": "<?php\nfunction sample(array $a)\n{}\n"
                },
                {
                    "from": "<?php\nfunction sample(array  $a)\n{}\n",
                    "to": "<?php\nfunction sample(array $a)\n{}\n"
                }
            ],
            "deprecated_switchTo": [
                "type_declaration_spaces"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\FunctionTypehintSpaceFixer"
        },
        "general_phpdoc_annotation_remove": {
            "configuration": [
                {
                    "name": "annotations",
                    "description": "List of annotations to remove, e.g. `[\"author\"]`.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "case_sensitive",
                    "description": "Should annotations be case sensitive.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Configured annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @internal\n * @author John Doe\n * @AuThOr Jane Doe\n *\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n * @internal\n * @AuThOr Jane Doe\n *\/\nfunction foo() {}\n",
                    "configuration": {
                        "annotations": [
                            "author"
                        ]
                    }
                },
                {
                    "from": "<?php\n\/**\n * @internal\n * @author John Doe\n * @AuThOr Jane Doe\n *\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n * @internal\n *\/\nfunction foo() {}\n",
                    "configuration": {
                        "annotations": [
                            "author"
                        ],
                        "case_sensitive": false
                    }
                },
                {
                    "from": "<?php\n\/**\n * @author John Doe\n * @package ACME API\n * @subpackage Authorization\n * @version 1.0\n *\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n * @author John Doe\n * @version 1.0\n *\/\nfunction foo() {}\n",
                    "configuration": {
                        "annotations": [
                            "package",
                            "subpackage"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\GeneralPhpdocAnnotationRemoveFixer"
        },
        "general_phpdoc_tag_rename": {
            "configuration": [
                {
                    "name": "case_sensitive",
                    "description": "Whether tags should be replaced only if they have exact same casing.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "fix_annotation",
                    "description": "Whether annotation tags should be fixed.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "fix_inline",
                    "description": "Whether inline tags should be fixed.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "replacements",
                    "description": "A map of tags to replace.",
                    "defaultValue": {},
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Renames PHPDoc tags.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @inheritDocs\n * {@inheritdocs}\n *\/\n",
                    "to": "<?php\n\/**\n * @inheritDoc\n * {@inheritDoc}\n *\/\n",
                    "configuration": {
                        "replacements": {
                            "inheritDocs": "inheritDoc"
                        }
                    }
                },
                {
                    "from": "<?php\n\/**\n * @inheritDocs\n * {@inheritdocs}\n *\/\n",
                    "to": "<?php\n\/**\n * @inheritDocs\n * {@inheritDoc}\n *\/\n",
                    "configuration": {
                        "replacements": {
                            "inheritDocs": "inheritDoc"
                        },
                        "fix_annotation": false
                    }
                },
                {
                    "from": "<?php\n\/**\n * @inheritDocs\n * {@inheritdocs}\n *\/\n",
                    "to": "<?php\n\/**\n * @inheritDoc\n * {@inheritdocs}\n *\/\n",
                    "configuration": {
                        "replacements": {
                            "inheritDocs": "inheritDoc"
                        },
                        "fix_inline": false
                    }
                },
                {
                    "from": "<?php\n\/**\n * @inheritDocs\n * {@inheritdocs}\n *\/\n",
                    "to": "<?php\n\/**\n * @inheritDoc\n * {@inheritdocs}\n *\/\n",
                    "configuration": {
                        "replacements": {
                            "inheritDocs": "inheritDoc"
                        },
                        "case_sensitive": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\GeneralPhpdocTagRenameFixer"
        },
        "get_class_to_class_keyword": {
            "risky": true,
            "summary": "Replace `get_class` calls on object variables with class keyword syntax.",
            "riskyDescription": "Risky if the `get_class` function is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\nget_class($a);\n",
                    "to": "<?php\n$a::class;\n"
                },
                {
                    "from": "<?php\n\n$date = new \\DateTimeImmutable();\n$class = get_class($date);\n",
                    "to": "<?php\n\n$date = new \\DateTimeImmutable();\n$class = $date::class;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\GetClassToClassKeywordFixer"
        },
        "global_namespace_import": {
            "configuration": [
                {
                    "name": "import_classes",
                    "description": "Whether to import, not import or ignore global classes.",
                    "defaultValue": true,
                    "allowedValues": [
                        true,
                        false,
                        null
                    ]
                },
                {
                    "name": "import_constants",
                    "description": "Whether to import, not import or ignore global constants.",
                    "defaultValue": null,
                    "allowedValues": [
                        true,
                        false,
                        null
                    ]
                },
                {
                    "name": "import_functions",
                    "description": "Whether to import, not import or ignore global functions.",
                    "defaultValue": null,
                    "allowedValues": [
                        true,
                        false,
                        null
                    ]
                }
            ],
            "summary": "Imports or fully qualifies global classes\/functions\/constants.",
            "codeSamples": [
                {
                    "from": "<?php\n\nnamespace Foo;\n\n$d = new \\DateTimeImmutable();\n",
                    "to": "<?php\n\nnamespace Foo;\nuse DateTimeImmutable;\n\n$d = new DateTimeImmutable();\n"
                },
                {
                    "from": "<?php\n\nnamespace Foo;\n\nif (\\count($x)) {\n    \/** @var \\DateTimeImmutable $d *\/\n    $d = new \\DateTimeImmutable();\n    $p = \\M_PI;\n}\n",
                    "to": "<?php\n\nnamespace Foo;\nuse DateTimeImmutable;\nuse function count;\nuse const M_PI;\n\nif (count($x)) {\n    \/** @var DateTimeImmutable $d *\/\n    $d = new DateTimeImmutable();\n    $p = M_PI;\n}\n",
                    "configuration": {
                        "import_classes": true,
                        "import_constants": true,
                        "import_functions": true
                    }
                },
                {
                    "from": "<?php\n\nnamespace Foo;\n\nuse DateTimeImmutable;\nuse function count;\nuse const M_PI;\n\nif (count($x)) {\n    \/** @var DateTimeImmutable $d *\/\n    $d = new DateTimeImmutable();\n    $p = M_PI;\n}\n",
                    "to": "<?php\n\nnamespace Foo;\n\nuse DateTimeImmutable;\nuse function count;\nuse const M_PI;\n\nif (\\count($x)) {\n    \/** @var \\DateTimeImmutable $d *\/\n    $d = new \\DateTimeImmutable();\n    $p = \\M_PI;\n}\n",
                    "configuration": {
                        "import_classes": false,
                        "import_constants": false,
                        "import_functions": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\GlobalNamespaceImportFixer"
        },
        "group_import": {
            "summary": "There MUST be group use for the same namespaces.",
            "codeSamples": [
                {
                    "from": "<?php\nuse Foo\\Bar;\nuse Foo\\Baz;\n",
                    "to": "<?php\nuse Foo\\{Bar, Baz};\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\GroupImportFixer"
        },
        "header_comment": {
            "configuration": [
                {
                    "name": "comment_type",
                    "description": "Comment syntax type.",
                    "defaultValue": "comment",
                    "allowedValues": [
                        "PHPDoc",
                        "comment"
                    ]
                },
                {
                    "name": "header",
                    "description": "Proper header content.",
                    "allowedTypes": [
                        "string"
                    ]
                },
                {
                    "name": "location",
                    "description": "The location of the inserted header.",
                    "defaultValue": "after_declare_strict",
                    "allowedValues": [
                        "after_open",
                        "after_declare_strict"
                    ]
                },
                {
                    "name": "separate",
                    "description": "Whether the header should be separated from the file content with a new line.",
                    "defaultValue": "both",
                    "allowedValues": [
                        "both",
                        "top",
                        "bottom",
                        "none"
                    ]
                }
            ],
            "summary": "Add, replace or remove header comment.",
            "codeSamples": [
                {
                    "from": "<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "to": "<?php\ndeclare(strict_types=1);\n\n\/*\n * Made with love.\n *\/\n\nnamespace A\\B;\n\necho 1;\n",
                    "configuration": {
                        "header": "Made with love."
                    }
                },
                {
                    "from": "<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "to": "<?php\n\/**\n * Made with love.\n *\/\n\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "configuration": {
                        "header": "Made with love.",
                        "comment_type": "PHPDoc",
                        "location": "after_open",
                        "separate": "bottom"
                    }
                },
                {
                    "from": "<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "to": "<?php\ndeclare(strict_types=1);\n\n\/*\n * Made with love.\n *\/\n\nnamespace A\\B;\n\necho 1;\n",
                    "configuration": {
                        "header": "Made with love.",
                        "comment_type": "comment",
                        "location": "after_declare_strict"
                    }
                },
                {
                    "from": "<?php\ndeclare(strict_types=1);\n\n\/*\n * Comment is not wanted here.\n *\/\n\nnamespace A\\B;\n\necho 1;\n",
                    "to": "<?php\ndeclare(strict_types=1);\n\nnamespace A\\B;\n\necho 1;\n",
                    "configuration": {
                        "header": ""
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\HeaderCommentFixer"
        },
        "heredoc_indentation": {
            "configuration": [
                {
                    "name": "indentation",
                    "description": "Whether the indentation should be the same as in the start token line or one level more.",
                    "defaultValue": "start_plus_one",
                    "allowedValues": [
                        "start_plus_one",
                        "same_as_start"
                    ]
                }
            ],
            "summary": "Heredoc\/nowdoc content must be properly indented.",
            "codeSamples": [
                {
                    "from": "<?php\n    $heredoc = <<<EOD\nabc\n    def\nEOD;\n\n    $nowdoc = <<<'EOD'\nabc\n    def\nEOD;\n",
                    "to": "<?php\n    $heredoc = <<<EOD\n        abc\n            def\n        EOD;\n\n    $nowdoc = <<<'EOD'\n        abc\n            def\n        EOD;\n"
                },
                {
                    "from": "<?php\n    $nowdoc = <<<'EOD'\nabc\n    def\nEOD;\n",
                    "to": "<?php\n    $nowdoc = <<<'EOD'\n    abc\n        def\n    EOD;\n",
                    "configuration": {
                        "indentation": "same_as_start"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\HeredocIndentationFixer"
        },
        "heredoc_to_nowdoc": {
            "summary": "Convert `heredoc` to `nowdoc` where possible.",
            "codeSamples": [
                {
                    "from": "<?php $a = <<<\"TEST\"\nFoo\nTEST;\n",
                    "to": "<?php $a = <<<'TEST'\nFoo\nTEST;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\HeredocToNowdocFixer"
        },
        "implode_call": {
            "risky": true,
            "summary": "Function `implode` must be called with 2 arguments in the documented order.",
            "riskyDescription": "Risky when the function `implode` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\nimplode($pieces, '');\n",
                    "to": "<?php\nimplode('', $pieces);\n"
                },
                {
                    "from": "<?php\nimplode($pieces);\n",
                    "to": "<?php\nimplode('', $pieces);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\ImplodeCallFixer"
        },
        "include": {
            "summary": "Include\/Require and file path should be divided with a single space. File path should not be placed within parentheses.",
            "codeSamples": [
                {
                    "from": "<?php\nrequire (\"sample1.php\");\nrequire_once  \"sample2.php\";\ninclude       \"sample3.php\";\ninclude_once(\"sample4.php\");\n",
                    "to": "<?php\nrequire \"sample1.php\";\nrequire_once \"sample2.php\";\ninclude \"sample3.php\";\ninclude_once \"sample4.php\";\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\IncludeFixer"
        },
        "increment_style": {
            "configuration": [
                {
                    "name": "style",
                    "description": "Whether to use pre- or post-increment and decrement operators.",
                    "defaultValue": "pre",
                    "allowedValues": [
                        "pre",
                        "post"
                    ]
                }
            ],
            "summary": "Pre- or post-increment and decrement operators should be used if possible.",
            "codeSamples": [
                {
                    "from": "<?php\n$a++;\n$b--;\n",
                    "to": "<?php\n++$a;\n--$b;\n"
                },
                {
                    "from": "<?php\n++$a;\n--$b;\n",
                    "to": "<?php\n$a++;\n$b--;\n",
                    "configuration": {
                        "style": "post"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\IncrementStyleFixer"
        },
        "indentation_type": {
            "summary": "Code MUST use configured indentation type.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif (true) {\n\techo 'Hello!';\n}\n",
                    "to": "<?php\n\nif (true) {\n    echo 'Hello!';\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\IndentationTypeFixer"
        },
        "integer_literal_case": {
            "summary": "Integer literals must be in correct case.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = 0Xff;\n$bar = 0B11111111;\n",
                    "to": "<?php\n$foo = 0xFF;\n$bar = 0b11111111;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\IntegerLiteralCaseFixer"
        },
        "is_null": {
            "risky": true,
            "summary": "Replaces `is_null($var)` expression with `null === $var`.",
            "riskyDescription": "Risky when the function `is_null` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = is_null($b);\n",
                    "to": "<?php\n$a = null === $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\IsNullFixer"
        },
        "lambda_not_used_import": {
            "summary": "Lambda must not import variables it doesn't use.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = function() use ($bar) {};\n",
                    "to": "<?php\n$foo = function() {};\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\LambdaNotUsedImportFixer"
        },
        "line_ending": {
            "summary": "All PHP files must use same line ending.",
            "codeSamples": [
                {
                    "from": "<?php $b = \" $a \r\n 123\"; $a = <<<TEST\r\nAAAAA \r\n |\r\nTEST;\n",
                    "to": "<?php $b = \" $a \r\n 123\"; $a = <<<TEST\nAAAAA \n |\nTEST;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\LineEndingFixer"
        },
        "linebreak_after_opening_tag": {
            "summary": "Ensure there is no code on the same line as the PHP open tag.",
            "codeSamples": [
                {
                    "from": "<?php $a = 1;\n$b = 3;\n",
                    "to": "<?php\n$a = 1;\n$b = 3;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\LinebreakAfterOpeningTagFixer"
        },
        "list_syntax": {
            "configuration": [
                {
                    "name": "syntax",
                    "description": "Whether to use the `long` or `short` syntax for array destructuring.",
                    "defaultValue": "short",
                    "allowedValues": [
                        "long",
                        "short"
                    ]
                }
            ],
            "summary": "List (`array` destructuring) assignment should be declared using the configured syntax. Requires PHP >= 7.1.",
            "codeSamples": [
                {
                    "from": "<?php\nlist($sample) = $array;\n",
                    "to": "<?php\n[$sample] = $array;\n"
                },
                {
                    "from": "<?php\n[$sample] = $array;\n",
                    "to": "<?php\nlist($sample) = $array;\n",
                    "configuration": {
                        "syntax": "long"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ListNotation\\ListSyntaxFixer"
        },
        "logical_operators": {
            "risky": true,
            "summary": "Use `&&` and `||` logical operators instead of `and` and `or`.",
            "riskyDescription": "Risky, because you must double-check if using and\/or with lower precedence was intentional.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif ($a == \"foo\" and ($b == \"bar\" or $c == \"baz\")) {\n}\n",
                    "to": "<?php\n\nif ($a == \"foo\" && ($b == \"bar\" || $c == \"baz\")) {\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\LogicalOperatorsFixer"
        },
        "long_to_shorthand_operator": {
            "risky": true,
            "summary": "Shorthand notation for operators should be used if possible.",
            "riskyDescription": "Risky when applying for string offsets (e.g. `<?php $text = \"foo\"; $text[0] = $text[0] & \"\\x7F\";`).",
            "codeSamples": [
                {
                    "from": "<?php\n$i = $i + 10;\n",
                    "to": "<?php\n$i += 10;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\LongToShorthandOperatorFixer"
        },
        "lowercase_cast": {
            "summary": "Cast should be written in lower case.",
            "codeSamples": [
                {
                    "from": "<?php\n    $a = (BOOLEAN) $b;\n    $a = (BOOL) $b;\n    $a = (INTEGER) $b;\n    $a = (INT) $b;\n    $a = (DOUBLE) $b;\n    $a = (FLoaT) $b;\n    $a = (flOAT) $b;\n    $a = (sTRING) $b;\n    $a = (ARRAy) $b;\n    $a = (OBJect) $b;\n    $a = (UNset) $b;\n    $a = (Binary) $b;\n",
                    "to": "<?php\n    $a = (boolean) $b;\n    $a = (bool) $b;\n    $a = (integer) $b;\n    $a = (int) $b;\n    $a = (double) $b;\n    $a = (float) $b;\n    $a = (float) $b;\n    $a = (string) $b;\n    $a = (array) $b;\n    $a = (object) $b;\n    $a = (unset) $b;\n    $a = (binary) $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\LowercaseCastFixer"
        },
        "lowercase_keywords": {
            "summary": "PHP keywords MUST be in lower case.",
            "codeSamples": [
                {
                    "from": "<?php\n    FOREACH($a AS $B) {\n        TRY {\n            NEW $C($a, ISSET($B));\n            WHILE($B) {\n                INCLUDE \"test.php\";\n            }\n        } CATCH(\\Exception $e) {\n            EXIT(1);\n        }\n    }\n",
                    "to": "<?php\n    foreach($a as $B) {\n        try {\n            new $C($a, isset($B));\n            while($B) {\n                include \"test.php\";\n            }\n        } catch(\\Exception $e) {\n            exit(1);\n        }\n    }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\LowercaseKeywordsFixer"
        },
        "lowercase_static_reference": {
            "summary": "Class static references `self`, `static` and `parent` MUST be in lower case.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo extends Bar\n{\n    public function baz1()\n    {\n        return STATIC::baz2();\n    }\n\n    public function baz2($x)\n    {\n        return $x instanceof Self;\n    }\n\n    public function baz3(PaRent $x)\n    {\n        return true;\n    }\n}\n",
                    "to": "<?php\nclass Foo extends Bar\n{\n    public function baz1()\n    {\n        return static::baz2();\n    }\n\n    public function baz2($x)\n    {\n        return $x instanceof self;\n    }\n\n    public function baz3(parent $x)\n    {\n        return true;\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Foo extends Bar\n{\n    public function baz(?self $x) : SELF\n    {\n        return false;\n    }\n}\n",
                    "to": "<?php\nclass Foo extends Bar\n{\n    public function baz(?self $x) : self\n    {\n        return false;\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\LowercaseStaticReferenceFixer"
        },
        "magic_constant_casing": {
            "summary": "Magic constants should be referred to using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\necho __dir__;\n",
                    "to": "<?php\necho __DIR__;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\MagicConstantCasingFixer"
        },
        "magic_method_casing": {
            "summary": "Magic method definitions and calls must be using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo\n{\n    public function __Sleep()\n    {\n    }\n}\n",
                    "to": "<?php\nclass Foo\n{\n    public function __sleep()\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\n$foo->__INVOKE(1);\n",
                    "to": "<?php\n$foo->__invoke(1);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\MagicMethodCasingFixer"
        },
        "mb_str_functions": {
            "risky": true,
            "summary": "Replace non multibyte-safe functions with corresponding mb function.",
            "riskyDescription": "Risky when any of the functions are overridden, or when relying on the string byte size rather than its length in characters.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = strlen($a);\n$a = strpos($a, $b);\n$a = strrpos($a, $b);\n$a = substr($a, $b);\n$a = strtolower($a);\n$a = strtoupper($a);\n$a = stripos($a, $b);\n$a = strripos($a, $b);\n$a = strstr($a, $b);\n$a = stristr($a, $b);\n$a = strrchr($a, $b);\n$a = substr_count($a, $b);\n",
                    "to": "<?php\n$a = mb_strlen($a);\n$a = mb_strpos($a, $b);\n$a = mb_strrpos($a, $b);\n$a = mb_substr($a, $b);\n$a = mb_strtolower($a);\n$a = mb_strtoupper($a);\n$a = mb_stripos($a, $b);\n$a = mb_strripos($a, $b);\n$a = mb_strstr($a, $b);\n$a = mb_stristr($a, $b);\n$a = mb_strrchr($a, $b);\n$a = mb_substr_count($a, $b);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\MbStrFunctionsFixer"
        },
        "method_argument_space": {
            "configuration": [
                {
                    "name": "after_heredoc",
                    "description": "Whether the whitespace between heredoc end and comma should be removed.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "attribute_placement",
                    "description": "Defines how to handle argument attributes when function definition is multiline.",
                    "defaultValue": "standalone",
                    "allowedValues": [
                        "ignore",
                        "same_line",
                        "standalone"
                    ]
                },
                {
                    "name": "keep_multiple_spaces_after_comma",
                    "description": "Whether keep multiple spaces after comma.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "on_multiline",
                    "description": "Defines how to handle function arguments lists that contain newlines.",
                    "defaultValue": "ensure_fully_multiline",
                    "allowedValues": [
                        "ignore",
                        "ensure_single_line",
                        "ensure_fully_multiline"
                    ]
                }
            ],
            "summary": "In method arguments and method call, there MUST NOT be a space before each comma and there MUST be one space after each comma. Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.",
            "description": "This fixer covers rules defined in PSR2 \u00b64.4, \u00b64.6.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);\n"
                },
                {
                    "from": "<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);\n",
                    "configuration": {
                        "keep_multiple_spaces_after_comma": false
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,$b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1,  2);\n",
                    "configuration": {
                        "keep_multiple_spaces_after_comma": true
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,\n    2);\n",
                    "to": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline"
                    }
                },
                {
                    "from": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\n",
                    "to": "<?php\nfunction sample($a=10, $b=20, $c=30) {}\nsample(1, 2);\n",
                    "configuration": {
                        "on_multiline": "ensure_single_line"
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,  \n    2);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');\n",
                    "to": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline",
                        "keep_multiple_spaces_after_comma": true
                    }
                },
                {
                    "from": "<?php\nfunction sample($a=10,\n    $b=20,$c=30) {}\nsample(1,  \n    2);\nsample('foo',    'foobarbaz', 'baz');\nsample('foobar', 'bar',       'baz');\n",
                    "to": "<?php\nfunction sample(\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(\n    1,\n    2\n);\nsample('foo', 'foobarbaz', 'baz');\nsample('foobar', 'bar', 'baz');\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline",
                        "keep_multiple_spaces_after_comma": false
                    }
                },
                {
                    "from": "<?php\nfunction sample(#[Foo] #[Bar] $a=10,\n    $b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample(\n    #[Foo] #[Bar] $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(1, 2);\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline",
                        "attribute_placement": "ignore"
                    }
                },
                {
                    "from": "<?php\nfunction sample(#[Foo]\n    #[Bar]\n    $a=10,\n    $b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample(\n    #[Foo] #[Bar] $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(1, 2);\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline",
                        "attribute_placement": "same_line"
                    }
                },
                {
                    "from": "<?php\nfunction sample(#[Foo] #[Bar] $a=10,\n    $b=20,$c=30) {}\nsample(1,  2);\n",
                    "to": "<?php\nfunction sample(\n    #[Foo]\n    #[Bar]\n    $a=10,\n    $b=20,\n    $c=30\n) {}\nsample(1, 2);\n",
                    "configuration": {
                        "on_multiline": "ensure_fully_multiline",
                        "attribute_placement": "standalone"
                    }
                },
                {
                    "from": "<?php\nsample(\n    <<<EOD\n        foo\n        EOD\n    ,\n    'bar'\n);\n",
                    "to": "<?php\nsample(\n    <<<EOD\n        foo\n        EOD,\n    'bar'\n);\n",
                    "configuration": {
                        "after_heredoc": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\MethodArgumentSpaceFixer"
        },
        "method_chaining_indentation": {
            "summary": "Method chaining MUST be properly indented. Method chaining with different levels of indentation is not supported.",
            "codeSamples": [
                {
                    "from": "<?php\n$user->setEmail('voff.web@gmail.com')\n         ->setPassword('233434');\n",
                    "to": "<?php\n$user->setEmail('voff.web@gmail.com')\n    ->setPassword('233434');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\MethodChainingIndentationFixer"
        },
        "modernize_strpos": {
            "risky": true,
            "summary": "Replace `strpos()` calls with `str_starts_with()` or `str_contains()` if possible.",
            "riskyDescription": "Risky if `strpos`, `str_starts_with` or `str_contains` functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\nif (strpos($haystack, $needle) === 0) {}\nif (strpos($haystack, $needle) !== 0) {}\nif (strpos($haystack, $needle) !== false) {}\nif (strpos($haystack, $needle) === false) {}\n",
                    "to": "<?php\nif (str_starts_with($haystack, $needle)  ) {}\nif (!str_starts_with($haystack, $needle)  ) {}\nif (str_contains($haystack, $needle)  ) {}\nif (!str_contains($haystack, $needle)  ) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\ModernizeStrposFixer"
        },
        "modernize_types_casting": {
            "risky": true,
            "summary": "Replaces `intval`, `floatval`, `doubleval`, `strval` and `boolval` function calls with according type casting operator.",
            "riskyDescription": "Risky if any of the functions `intval`, `floatval`, `doubleval`, `strval` or `boolval` are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n    $a = intval($b);\n    $a = floatval($b);\n    $a = doubleval($b);\n    $a = strval ($b);\n    $a = boolval($b);\n",
                    "to": "<?php\n    $a = (int) $b;\n    $a = (float) $b;\n    $a = (float) $b;\n    $a = (string) $b;\n    $a = (bool) $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\ModernizeTypesCastingFixer"
        },
        "multiline_comment_opening_closing": {
            "summary": "DocBlocks must start with two asterisks, multiline comments must start with a single asterisk, after the opening slash. Both must end with a single asterisk before the closing slash.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\/******\n * Multiline comment with arbitrary asterisks count\n ******\/\n\n\/**\\\n * Multiline comment that seems a DocBlock\n *\/\n\n\/**\n * DocBlock with arbitrary asterisk count at the end\n **\/\n",
                    "to": "<?php\n\n\/*\n * Multiline comment with arbitrary asterisks count\n *\/\n\n\/*\\\n * Multiline comment that seems a DocBlock\n *\/\n\n\/**\n * DocBlock with arbitrary asterisk count at the end\n *\/\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\MultilineCommentOpeningClosingFixer"
        },
        "multiline_whitespace_before_semicolons": {
            "configuration": [
                {
                    "name": "strategy",
                    "description": "Forbid multi-line whitespace or move the semicolon to the new line for chained calls.",
                    "defaultValue": "no_multi_line",
                    "allowedValues": [
                        "no_multi_line",
                        "new_line_for_chained_calls"
                    ]
                }
            ],
            "summary": "Forbid multi-line whitespace before the closing semicolon or move the semicolon to the new line for chained calls.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo() {\n    return 1 + 2\n        ;\n}\n",
                    "to": "<?php\nfunction foo() {\n    return 1 + 2;\n}\n"
                },
                {
                    "from": "<?php\n$object->method1()\n    ->method2()\n    ->method(3);\n",
                    "to": "<?php\n$object->method1()\n    ->method2()\n    ->method(3)\n;\n",
                    "configuration": {
                        "strategy": "new_line_for_chained_calls"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\MultilineWhitespaceBeforeSemicolonsFixer"
        },
        "native_constant_invocation": {
            "risky": true,
            "configuration": [
                {
                    "name": "exclude",
                    "description": "List of constants to ignore.",
                    "defaultValue": [
                        "null",
                        "false",
                        "true"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "fix_built_in",
                    "description": "Whether to fix constants returned by `get_defined_constants`. User constants are not accounted in this list and must be specified in the include one.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "include",
                    "description": "List of additional constants to fix.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "scope",
                    "description": "Only fix constant invocations that are made within a namespace or fix all.",
                    "defaultValue": "all",
                    "allowedValues": [
                        "all",
                        "namespaced"
                    ]
                },
                {
                    "name": "strict",
                    "description": "Whether leading `\\` of constant invocation not meant to have it should be removed.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Add leading `\\` before constant invocation of internal constant to speed up resolving. Constant name match is case-sensitive, except for `null`, `false` and `true`.",
            "riskyDescription": "Risky when any of the constants are namespaced or overridden.",
            "codeSamples": [
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(\\PHP_VERSION, \\M_PI, MY_CUSTOM_PI);\n"
                },
                {
                    "from": "<?php\nnamespace space1 {\n    echo PHP_VERSION;\n}\nnamespace {\n    echo M_PI;\n}\n",
                    "to": "<?php\nnamespace space1 {\n    echo \\PHP_VERSION;\n}\nnamespace {\n    echo M_PI;\n}\n",
                    "configuration": {
                        "scope": "namespaced"
                    }
                },
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(\\PHP_VERSION, \\M_PI, \\MY_CUSTOM_PI);\n",
                    "configuration": {
                        "include": [
                            "MY_CUSTOM_PI"
                        ]
                    }
                },
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(PHP_VERSION, M_PI, \\MY_CUSTOM_PI);\n",
                    "configuration": {
                        "fix_built_in": false,
                        "include": [
                            "MY_CUSTOM_PI"
                        ]
                    }
                },
                {
                    "from": "<?php var_dump(PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "to": "<?php var_dump(\\PHP_VERSION, M_PI, MY_CUSTOM_PI);\n",
                    "configuration": {
                        "exclude": [
                            "M_PI"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ConstantNotation\\NativeConstantInvocationFixer"
        },
        "native_function_casing": {
            "summary": "Function defined by PHP should be called using the correct casing.",
            "codeSamples": [
                {
                    "from": "<?php\nSTRLEN($str);\n",
                    "to": "<?php\nstrlen($str);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\NativeFunctionCasingFixer"
        },
        "native_function_invocation": {
            "risky": true,
            "configuration": [
                {
                    "name": "exclude",
                    "description": "List of functions to ignore.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "include",
                    "description": "List of function names or sets to fix. Defined sets are `@internal` (all native functions), `@all` (all global functions) and `@compiler_optimized` (functions that are specially optimized by Zend).",
                    "defaultValue": [
                        "@compiler_optimized"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "scope",
                    "description": "Only fix function calls that are made within a namespace or fix all.",
                    "defaultValue": "all",
                    "allowedValues": [
                        "all",
                        "namespaced"
                    ]
                },
                {
                    "name": "strict",
                    "description": "Whether leading `\\` of function call not meant to have it should be removed.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Add leading `\\` before function invocation to speed up resolving.",
            "riskyDescription": "Risky when any of the functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n\nfunction baz($options)\n{\n    if (!array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}\n",
                    "to": "<?php\n\nfunction baz($options)\n{\n    if (!\\array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}\n"
                },
                {
                    "from": "<?php\n\nfunction baz($options)\n{\n    if (!array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}\n",
                    "to": "<?php\n\nfunction baz($options)\n{\n    if (!\\array_key_exists(\"foo\", $options)) {\n        throw new \\InvalidArgumentException();\n    }\n\n    return json_encode($options);\n}\n",
                    "configuration": {
                        "exclude": [
                            "json_encode"
                        ]
                    }
                },
                {
                    "from": "<?php\nnamespace space1 {\n    echo count([1]);\n}\nnamespace {\n    echo count([1]);\n}\n",
                    "to": "<?php\nnamespace space1 {\n    echo \\count([1]);\n}\nnamespace {\n    echo \\count([1]);\n}\n",
                    "configuration": {
                        "scope": "all"
                    }
                },
                {
                    "from": "<?php\nnamespace space1 {\n    echo count([1]);\n}\nnamespace {\n    echo count([1]);\n}\n",
                    "to": "<?php\nnamespace space1 {\n    echo \\count([1]);\n}\nnamespace {\n    echo count([1]);\n}\n",
                    "configuration": {
                        "scope": "namespaced"
                    }
                },
                {
                    "from": "<?php\nmyGlobalFunction();\ncount();\n",
                    "to": "<?php\n\\myGlobalFunction();\ncount();\n",
                    "configuration": {
                        "include": [
                            "myGlobalFunction"
                        ]
                    }
                },
                {
                    "from": "<?php\nmyGlobalFunction();\ncount();\n",
                    "to": "<?php\n\\myGlobalFunction();\n\\count();\n",
                    "configuration": {
                        "include": [
                            "@all"
                        ]
                    }
                },
                {
                    "from": "<?php\nmyGlobalFunction();\ncount();\n",
                    "to": "<?php\nmyGlobalFunction();\n\\count();\n",
                    "configuration": {
                        "include": [
                            "@internal"
                        ]
                    }
                },
                {
                    "from": "<?php\n$a .= str_repeat($a, 4);\n$c = get_class($d);\n",
                    "to": "<?php\n$a .= str_repeat($a, 4);\n$c = \\get_class($d);\n",
                    "configuration": {
                        "include": [
                            "@compiler_optimized"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NativeFunctionInvocationFixer"
        },
        "native_function_type_declaration_casing": {
            "summary": "Native type declarations for functions should use the correct case.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Bar {\n    public function Foo(CALLABLE $bar)\n    {\n        return 1;\n    }\n}\n",
                    "to": "<?php\nclass Bar {\n    public function Foo(callable $bar)\n    {\n        return 1;\n    }\n}\n"
                },
                {
                    "from": "<?php\nfunction Foo(INT $a): Bool\n{\n    return true;\n}\n",
                    "to": "<?php\nfunction Foo(int $a): bool\n{\n    return true;\n}\n"
                },
                {
                    "from": "<?php\nfunction Foo(Iterable $a): VOID\n{\n    echo 'Hello world';\n}\n",
                    "to": "<?php\nfunction Foo(iterable $a): void\n{\n    echo 'Hello world';\n}\n"
                },
                {
                    "from": "<?php\nfunction Foo(Object $a)\n{\n    return 'hi!';\n}\n",
                    "to": "<?php\nfunction Foo(object $a)\n{\n    return 'hi!';\n}\n"
                }
            ],
            "deprecated_switchTo": [
                "native_type_declaration_casing"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\NativeFunctionTypeDeclarationCasingFixer"
        },
        "native_type_declaration_casing": {
            "summary": "Native type declarations should be used in the correct case.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Bar {\n    public function Foo(CALLABLE $bar): INT\n    {\n        return 1;\n    }\n}\n",
                    "to": "<?php\nclass Bar {\n    public function Foo(callable $bar): int\n    {\n        return 1;\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Foo\n{\n    const INT BAR = 1;\n}\n",
                    "to": "<?php\nclass Foo\n{\n    const int BAR = 1;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Casing\\NativeTypeDeclarationCasingFixer"
        },
        "new_with_braces": {
            "configuration": [
                {
                    "name": "anonymous_class",
                    "description": "Whether anonymous classes should be followed by parentheses.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "named_class",
                    "description": "Whether named classes should be followed by parentheses.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "All instances created with `new` keyword must (not) be followed by braces.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$x = new X;\n$y = new class {};\n",
                    "to": "<?php\n\n$x = new X();\n$y = new class() {};\n"
                },
                {
                    "from": "<?php\n\n$y = new class() {};\n",
                    "to": "<?php\n\n$y = new class {};\n",
                    "configuration": {
                        "anonymous_class": false
                    }
                },
                {
                    "from": "<?php\n\n$x = new X();\n",
                    "to": "<?php\n\n$x = new X;\n",
                    "configuration": {
                        "named_class": false
                    }
                }
            ],
            "deprecated_switchTo": [
                "new_with_parentheses"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NewWithBracesFixer"
        },
        "new_with_parentheses": {
            "configuration": [
                {
                    "name": "anonymous_class",
                    "description": "Whether anonymous classes should be followed by parentheses.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "named_class",
                    "description": "Whether named classes should be followed by parentheses.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "All instances created with `new` keyword must (not) be followed by parentheses.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$x = new X;\n$y = new class {};\n",
                    "to": "<?php\n\n$x = new X();\n$y = new class() {};\n"
                },
                {
                    "from": "<?php\n\n$y = new class() {};\n",
                    "to": "<?php\n\n$y = new class {};\n",
                    "configuration": {
                        "anonymous_class": false
                    }
                },
                {
                    "from": "<?php\n\n$x = new X();\n",
                    "to": "<?php\n\n$x = new X;\n",
                    "configuration": {
                        "named_class": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NewWithParenthesesFixer"
        },
        "no_alias_functions": {
            "risky": true,
            "configuration": [
                {
                    "name": "sets",
                    "description": "List of sets to fix. Defined sets are:\n\n* `@all` (all listed sets);\n* `@internal` (native functions);\n* `@exif` (EXIF functions);\n* `@ftp` (FTP functions);\n* `@IMAP` (IMAP functions);\n* `@ldap` (LDAP functions);\n* `@mbreg` (from `ext-mbstring`);\n* `@mysqli` (mysqli functions);\n* `@oci` (oci functions);\n* `@odbc` (odbc functions);\n* `@openssl` (openssl functions);\n* `@pcntl` (PCNTL functions);\n* `@pg` (pg functions);\n* `@posix` (POSIX functions);\n* `@snmp` (SNMP functions);\n* `@sodium` (libsodium functions);\n* `@time` (time functions).",
                    "defaultValue": [
                        "@internal",
                        "@IMAP",
                        "@pg"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "@all",
                            "@exif",
                            "@ftp",
                            "@IMAP",
                            "@internal",
                            "@ldap",
                            "@mbreg",
                            "@mysqli",
                            "@oci",
                            "@odbc",
                            "@openssl",
                            "@pcntl",
                            "@pg",
                            "@posix",
                            "@snmp",
                            "@sodium",
                            "@time"
                        ]
                    ]
                }
            ],
            "summary": "Master functions shall be used instead of aliases.",
            "riskyDescription": "Risky when any of the alias functions are overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = chop($b);\nclose($b);\n$a = doubleval($b);\n$a = fputs($b, $c);\n$a = get_required_files();\nini_alter($b, $c);\n$a = is_double($b);\n$a = is_integer($b);\n$a = is_long($b);\n$a = is_real($b);\n$a = is_writeable($b);\n$a = join($glue, $pieces);\n$a = key_exists($key, $array);\nmagic_quotes_runtime($new_setting);\n$a = pos($array);\n$a = show_source($filename, true);\n$a = sizeof($b);\n$a = strchr($haystack, $needle);\n$a = imap_header($imap_stream, 1);\nuser_error($message);\nmbereg_search_getregs();\n",
                    "to": "<?php\n$a = rtrim($b);\nclosedir($b);\n$a = floatval($b);\n$a = fwrite($b, $c);\n$a = get_included_files();\nini_set($b, $c);\n$a = is_float($b);\n$a = is_int($b);\n$a = is_int($b);\n$a = is_float($b);\n$a = is_writable($b);\n$a = implode($glue, $pieces);\n$a = array_key_exists($key, $array);\nset_magic_quotes_runtime($new_setting);\n$a = current($array);\n$a = highlight_file($filename, true);\n$a = count($b);\n$a = strstr($haystack, $needle);\n$a = imap_headerinfo($imap_stream, 1);\ntrigger_error($message);\nmbereg_search_getregs();\n"
                },
                {
                    "from": "<?php\n$a = is_double($b);\nmbereg_search_getregs();\n",
                    "to": "<?php\n$a = is_double($b);\nmb_ereg_search_getregs();\n",
                    "configuration": {
                        "sets": [
                            "@mbreg"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\NoAliasFunctionsFixer"
        },
        "no_alias_language_construct_call": {
            "summary": "Master language constructs shall be used instead of aliases.",
            "codeSamples": [
                {
                    "from": "<?php\ndie;\n",
                    "to": "<?php\nexit;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\NoAliasLanguageConstructCallFixer"
        },
        "no_alternative_syntax": {
            "configuration": [
                {
                    "name": "fix_non_monolithic_code",
                    "description": "Whether to also fix code with inline HTML.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Replace control structure alternative syntax to use braces.",
            "codeSamples": [
                {
                    "from": "<?php\nif(true):echo 't';else:echo 'f';endif;\n",
                    "to": "<?php\nif(true) { echo 't';} else { echo 'f';}\n"
                },
                {
                    "from": "<?php if ($condition): ?>\nLorem ipsum.\n<?php endif; ?>\n",
                    "to": "<?php if ($condition) { ?>\nLorem ipsum.\n<?php } ?>\n",
                    "configuration": {
                        "fix_non_monolithic_code": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoAlternativeSyntaxFixer"
        },
        "no_binary_string": {
            "summary": "There should not be a binary flag before strings.",
            "codeSamples": [
                {
                    "from": "<?php $a = b'foo';\n",
                    "to": "<?php $a = 'foo';\n"
                },
                {
                    "from": "<?php $a = b<<<EOT\nfoo\nEOT;\n",
                    "to": "<?php $a = <<<EOT\nfoo\nEOT;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\NoBinaryStringFixer"
        },
        "no_blank_lines_after_class_opening": {
            "summary": "There should be no empty lines after class opening brace.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n\n    protected function foo()\n    {\n    }\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    protected function foo()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoBlankLinesAfterClassOpeningFixer"
        },
        "no_blank_lines_after_phpdoc": {
            "summary": "There should not be blank lines between docblock and the documented element.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\/**\n * This is the bar class.\n *\/\n\n\nclass Bar {}\n",
                    "to": "<?php\n\n\/**\n * This is the bar class.\n *\/\nclass Bar {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\NoBlankLinesAfterPhpdocFixer"
        },
        "no_blank_lines_before_namespace": {
            "summary": "There should be no blank lines before a namespace declaration.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\n\nnamespace Example;\n",
                    "to": "<?php\nnamespace Example;\n"
                }
            ],
            "deprecated_switchTo": [
                "blank_lines_before_namespace"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\NoBlankLinesBeforeNamespaceFixer"
        },
        "no_break_comment": {
            "configuration": [
                {
                    "name": "comment_text",
                    "description": "The text to use in the added comment and to detect it.",
                    "defaultValue": "no break",
                    "allowedTypes": [
                        "string"
                    ]
                }
            ],
            "summary": "There must be a comment when fall-through is intentional in a non-empty case body.",
            "description": "Adds a \"no break\" comment before fall-through cases, and removes it if there is no fall-through.",
            "codeSamples": [
                {
                    "from": "<?php\nswitch ($foo) {\n    case 1:\n        foo();\n    case 2:\n        bar();\n        \/\/ no break\n        break;\n    case 3:\n        baz();\n}\n",
                    "to": "<?php\nswitch ($foo) {\n    case 1:\n        foo();\n        \/\/ no break\n    case 2:\n        bar();\n        break;\n    case 3:\n        baz();\n}\n"
                },
                {
                    "from": "<?php\nswitch ($foo) {\n    case 1:\n        foo();\n    case 2:\n        foo();\n}\n",
                    "to": "<?php\nswitch ($foo) {\n    case 1:\n        foo();\n        \/\/ some comment\n    case 2:\n        foo();\n}\n",
                    "configuration": {
                        "comment_text": "some comment"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoBreakCommentFixer"
        },
        "no_closing_tag": {
            "summary": "The closing `?>` tag MUST be omitted from files containing only PHP.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n}\n?>\n",
                    "to": "<?php\nclass Sample\n{\n}"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpTag\\NoClosingTagFixer"
        },
        "no_empty_comment": {
            "summary": "There should not be any empty comments.",
            "codeSamples": [
                {
                    "from": "<?php\n\/\/\n#\n\/* *\/\n",
                    "to": "<?php\n\n\n\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\NoEmptyCommentFixer"
        },
        "no_empty_phpdoc": {
            "summary": "There should not be empty PHPDoc blocks.",
            "codeSamples": [
                {
                    "from": "<?php \/**  *\/\n",
                    "to": "<?php \n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\NoEmptyPhpdocFixer"
        },
        "no_empty_statement": {
            "summary": "Remove useless (semicolon) statements.",
            "codeSamples": [
                {
                    "from": "<?php $a = 1;;\n",
                    "to": "<?php $a = 1;\n"
                },
                {
                    "from": "<?php echo 1;2;\n",
                    "to": "<?php echo 1;\n"
                },
                {
                    "from": "<?php while(foo()){\n    continue 1;\n}\n",
                    "to": "<?php while(foo()){\n    continue ;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\NoEmptyStatementFixer"
        },
        "no_extra_blank_lines": {
            "configuration": [
                {
                    "name": "tokens",
                    "description": "List of tokens to fix.",
                    "defaultValue": [
                        "extra"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "attribute",
                            "break",
                            "case",
                            "continue",
                            "curly_brace_block",
                            "default",
                            "extra",
                            "parenthesis_brace_block",
                            "return",
                            "square_brace_block",
                            "switch",
                            "throw",
                            "use",
                            "use_trait"
                        ]
                    ]
                }
            ],
            "summary": "Removes extra blank lines and\/or blank lines following configuration.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";\n",
                    "to": "<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";\n"
                },
                {
                    "from": "<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n\n    case 42:\n        break;\n}\n",
                    "to": "<?php\n\nswitch ($foo) {\n    case 41:\n        echo \"foo\";\n        break;\n    case 42:\n        break;\n}\n",
                    "configuration": {
                        "tokens": [
                            "break"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n\n    }\n}\n",
                    "to": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    if (true) {\n        continue;\n    }\n}\n",
                    "configuration": {
                        "tokens": [
                            "continue"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n\n    echo $i;\n\n}\n",
                    "to": "<?php\n\nfor ($i = 0; $i < 9000; ++$i) {\n    echo $i;\n}\n",
                    "configuration": {
                        "tokens": [
                            "curly_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = array(\"foo\");\n\n\n$bar = \"bar\";\n",
                    "to": "<?php\n\n$foo = array(\"foo\");\n\n$bar = \"bar\";\n",
                    "configuration": {
                        "tokens": [
                            "extra"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = array(\n\n    \"foo\"\n\n);\n",
                    "to": "<?php\n\n$foo = array(\n    \"foo\"\n);\n",
                    "configuration": {
                        "tokens": [
                            "parenthesis_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfunction foo($bar)\n{\n    return $bar;\n\n}\n",
                    "to": "<?php\n\nfunction foo($bar)\n{\n    return $bar;\n}\n",
                    "configuration": {
                        "tokens": [
                            "return"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = [\n\n    \"foo\"\n\n];\n",
                    "to": "<?php\n\n$foo = [\n    \"foo\"\n];\n",
                    "configuration": {
                        "tokens": [
                            "square_brace_block"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n\n}\n",
                    "to": "<?php\n\nfunction foo($bar)\n{\n    throw new \\Exception(\"Hello!\");\n}\n",
                    "configuration": {
                        "tokens": [
                            "throw"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\n\nuse Baz\\Bar;\n\nclass Bar\n{\n}\n",
                    "to": "<?php\n\nnamespace Foo;\n\nuse Bar\\Baz;\nuse Baz\\Bar;\n\nclass Bar\n{\n}\n",
                    "configuration": {
                        "tokens": [
                            "use"
                        ]
                    }
                },
                {
                    "from": "<?php\nswitch($a) {\n\n    case 1:\n\n    default:\n\n        echo 3;\n}\n",
                    "to": "<?php\nswitch($a) {\n    case 1:\n    default:\n        echo 3;\n}\n",
                    "configuration": {
                        "tokens": [
                            "switch",
                            "case",
                            "default"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoExtraBlankLinesFixer"
        },
        "no_homoglyph_names": {
            "risky": true,
            "summary": "Replace accidental usage of homoglyphs (non ascii characters) in names.",
            "riskyDescription": "Renames classes and cannot rename the files. You might have string references to renamed code (`$$name`).",
            "codeSamples": [
                {
                    "from": "<?php $n\u0430m\u0435 = 'wrong \"a\" character';\n",
                    "to": "<?php $name = 'wrong \"a\" character';\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Naming\\NoHomoglyphNamesFixer"
        },
        "no_leading_import_slash": {
            "summary": "Remove leading slashes in `use` clauses.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace Foo;\nuse \\Bar;\n",
                    "to": "<?php\nnamespace Foo;\nuse Bar;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\NoLeadingImportSlashFixer"
        },
        "no_leading_namespace_whitespace": {
            "summary": "The namespace declaration line shouldn't contain leading whitespace.",
            "codeSamples": [
                {
                    "from": "<?php\n namespace Test8a;\n    namespace Test8b;\n",
                    "to": "<?php\nnamespace Test8a;\nnamespace Test8b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\NoLeadingNamespaceWhitespaceFixer"
        },
        "no_mixed_echo_print": {
            "configuration": [
                {
                    "name": "use",
                    "description": "The desired language construct.",
                    "defaultValue": "echo",
                    "allowedValues": [
                        "print",
                        "echo"
                    ]
                }
            ],
            "summary": "Either language construct `print` or `echo` should be used.",
            "codeSamples": [
                {
                    "from": "<?php print 'example';\n",
                    "to": "<?php echo 'example';\n"
                },
                {
                    "from": "<?php echo('example');\n",
                    "to": "<?php print('example');\n",
                    "configuration": {
                        "use": "print"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\NoMixedEchoPrintFixer"
        },
        "no_multiline_whitespace_around_double_arrow": {
            "summary": "Operator `=>` should not be surrounded by multi-line whitespaces.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = array(1\n\n=> 2);\n",
                    "to": "<?php\n$a = array(1 => 2);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NoMultilineWhitespaceAroundDoubleArrowFixer"
        },
        "no_multiple_statements_per_line": {
            "summary": "There must not be more than one statement per line.",
            "codeSamples": [
                {
                    "from": "<?php\nfoo(); bar();\n",
                    "to": "<?php\nfoo();\nbar();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\NoMultipleStatementsPerLineFixer"
        },
        "no_null_property_initialization": {
            "summary": "Properties MUST not be explicitly initialized with `null` except when they have a type declaration (PHP 7.4).",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo {\n    public $foo = null;\n}\n",
                    "to": "<?php\nclass Foo {\n    public $foo;\n}\n"
                },
                {
                    "from": "<?php\nclass Foo {\n    public static $foo = null;\n}\n",
                    "to": "<?php\nclass Foo {\n    public static $foo;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoNullPropertyInitializationFixer"
        },
        "no_php4_constructor": {
            "risky": true,
            "summary": "Convert PHP4-style constructors to `__construct`.",
            "riskyDescription": "Risky when old style constructor being fixed is overridden or overrides parent one.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo\n{\n    public function Foo($bar)\n    {\n    }\n}\n",
                    "to": "<?php\nclass Foo\n{\n    public function __construct($bar)\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoPhp4ConstructorFixer"
        },
        "no_short_bool_cast": {
            "summary": "Short cast `bool` using double exclamation mark should not be used.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = !!$b;\n",
                    "to": "<?php\n$a = (bool)$b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\NoShortBoolCastFixer"
        },
        "no_singleline_whitespace_before_semicolons": {
            "summary": "Single-line whitespace before closing semicolon are prohibited.",
            "codeSamples": [
                {
                    "from": "<?php $this->foo() ;\n",
                    "to": "<?php $this->foo();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\NoSinglelineWhitespaceBeforeSemicolonsFixer"
        },
        "no_space_around_double_colon": {
            "summary": "There must be no space around double colons (also called Scope Resolution Operator or Paamayim Nekudotayim).",
            "codeSamples": [
                {
                    "from": "<?php\n\necho Foo\\Bar :: class;\n",
                    "to": "<?php\n\necho Foo\\Bar::class;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NoSpaceAroundDoubleColonFixer"
        },
        "no_spaces_after_function_name": {
            "summary": "When making a method or function call, there MUST NOT be a space between the method or function name and the opening parenthesis.",
            "codeSamples": [
                {
                    "from": "<?php\nrequire ('sample.php');\necho (test (3));\nexit  (1);\n$func ();\n",
                    "to": "<?php\nrequire('sample.php');\necho(test(3));\nexit(1);\n$func();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NoSpacesAfterFunctionNameFixer"
        },
        "no_spaces_around_offset": {
            "configuration": [
                {
                    "name": "positions",
                    "description": "Whether spacing should be fixed inside and\/or outside the offset braces.",
                    "defaultValue": [
                        "inside",
                        "outside"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "inside",
                            "outside"
                        ]
                    ]
                }
            ],
            "summary": "There MUST NOT be spaces around offset braces.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = $b [ 'a' ] [ 'b' ];\n",
                    "to": "<?php\n$sample = $b['a']['b'];\n"
                },
                {
                    "from": "<?php\n$sample = $b [ 'a' ] [ 'b' ];\n",
                    "to": "<?php\n$sample = $b ['a'] ['b'];\n",
                    "configuration": {
                        "positions": [
                            "inside"
                        ]
                    }
                },
                {
                    "from": "<?php\n$sample = $b [ 'a' ] [ 'b' ];\n",
                    "to": "<?php\n$sample = $b[ 'a' ][ 'b' ];\n",
                    "configuration": {
                        "positions": [
                            "outside"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoSpacesAroundOffsetFixer"
        },
        "no_spaces_inside_parenthesis": {
            "summary": "There MUST NOT be a space after the opening parenthesis. There MUST NOT be a space before the closing parenthesis.",
            "codeSamples": [
                {
                    "from": "<?php\nif ( $a ) {\n    foo( );\n}\n",
                    "to": "<?php\nif ($a) {\n    foo();\n}\n"
                },
                {
                    "from": "<?php\nfunction foo( $bar, $baz )\n{\n}\n",
                    "to": "<?php\nfunction foo($bar, $baz)\n{\n}\n"
                }
            ],
            "deprecated_switchTo": [
                "spaces_inside_parentheses"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoSpacesInsideParenthesisFixer"
        },
        "no_superfluous_elseif": {
            "summary": "Replaces superfluous `elseif` with `if`.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($a) {\n    return 1;\n} elseif ($b) {\n    return 2;\n}\n",
                    "to": "<?php\nif ($a) {\n    return 1;\n}\nif ($b) {\n    return 2;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoSuperfluousElseifFixer"
        },
        "no_superfluous_phpdoc_tags": {
            "configuration": [
                {
                    "name": "allow_mixed",
                    "description": "Whether type `mixed` without description is allowed (`true`) or considered superfluous (`false`).",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "allow_unused_params",
                    "description": "Whether `param` annotation without actual signature is allowed (`true`) or considered superfluous (`false`).",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "remove_inheritdoc",
                    "description": "Remove `@inheritDoc` tags.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Removes `@param`, `@return` and `@var` tags that don't provide any useful information.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo {\n    \/**\n     * @param Bar $bar\n     * @param mixed $baz\n     *\n     * @return Baz\n     *\/\n    public function doFoo(Bar $bar, $baz): Baz {}\n}\n",
                    "to": "<?php\nclass Foo {\n    \/**\n     *\n     *\/\n    public function doFoo(Bar $bar, $baz): Baz {}\n}\n"
                },
                {
                    "from": "<?php\nclass Foo {\n    \/**\n     * @param Bar $bar\n     * @param mixed $baz\n     *\/\n    public function doFoo(Bar $bar, $baz) {}\n}\n",
                    "to": "<?php\nclass Foo {\n    \/**\n     * @param mixed $baz\n     *\/\n    public function doFoo(Bar $bar, $baz) {}\n}\n",
                    "configuration": {
                        "allow_mixed": true
                    }
                },
                {
                    "from": "<?php\nclass Foo {\n    \/**\n     * @inheritDoc\n     *\/\n    public function doFoo(Bar $bar, $baz) {}\n}\n",
                    "to": "<?php\nclass Foo {\n    \/**\n     *\n     *\/\n    public function doFoo(Bar $bar, $baz) {}\n}\n",
                    "configuration": {
                        "remove_inheritdoc": true
                    }
                },
                {
                    "from": "<?php\nclass Foo {\n    \/**\n     * @param Bar $bar\n     * @param mixed $baz\n     * @param string|int|null $qux\n     *\/\n    public function doFoo(Bar $bar, $baz \/*, $qux = null *\/) {}\n}\n",
                    "to": "<?php\nclass Foo {\n    \/**\n     * @param string|int|null $qux\n     *\/\n    public function doFoo(Bar $bar, $baz \/*, $qux = null *\/) {}\n}\n",
                    "configuration": {
                        "allow_unused_params": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\NoSuperfluousPhpdocTagsFixer"
        },
        "no_trailing_comma_in_list_call": {
            "summary": "Remove trailing commas in list function calls.",
            "codeSamples": [
                {
                    "from": "<?php\nlist($a, $b,) = foo();\n",
                    "to": "<?php\nlist($a, $b) = foo();\n"
                }
            ],
            "deprecated_switchTo": [
                "no_trailing_comma_in_singleline"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoTrailingCommaInListCallFixer"
        },
        "no_trailing_comma_in_singleline": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "Which elements to fix.",
                    "defaultValue": [
                        "arguments",
                        "array_destructuring",
                        "array",
                        "group_import"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "arguments",
                            "array",
                            "array_destructuring",
                            "group_import"
                        ]
                    ]
                }
            ],
            "summary": "If a list of values separated by a comma is contained on a single line, then the last item MUST NOT have a trailing comma.",
            "codeSamples": [
                {
                    "from": "<?php\nfoo($a,);\n$foo = array(1,);\n[$foo, $bar,] = $array;\nuse a\\{ClassA, ClassB,};\n",
                    "to": "<?php\nfoo($a);\n$foo = array(1);\n[$foo, $bar] = $array;\nuse a\\{ClassA, ClassB};\n"
                },
                {
                    "from": "<?php\nfoo($a,);\n[$foo, $bar,] = $array;\n",
                    "to": "<?php\nfoo($a,);\n[$foo, $bar] = $array;\n",
                    "configuration": {
                        "elements": [
                            "array_destructuring"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\NoTrailingCommaInSinglelineFixer"
        },
        "no_trailing_comma_in_singleline_array": {
            "summary": "PHP single-line arrays should not have trailing comma.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = array('sample',  );\n",
                    "to": "<?php\n$a = array('sample');\n"
                }
            ],
            "deprecated_switchTo": [
                "no_trailing_comma_in_singleline"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NoTrailingCommaInSinglelineArrayFixer"
        },
        "no_trailing_comma_in_singleline_function_call": {
            "summary": "When making a method or function call on a single line there MUST NOT be a trailing comma after the last argument.",
            "codeSamples": [
                {
                    "from": "<?php\nfoo($a,);\n",
                    "to": "<?php\nfoo($a);\n"
                }
            ],
            "deprecated_switchTo": [
                "no_trailing_comma_in_singleline"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NoTrailingCommaInSinglelineFunctionCallFixer"
        },
        "no_trailing_whitespace": {
            "summary": "Remove trailing whitespace at the end of non-blank lines.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = 1;     \n",
                    "to": "<?php\n$a = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoTrailingWhitespaceFixer"
        },
        "no_trailing_whitespace_in_comment": {
            "summary": "There MUST be no trailing spaces inside comment or PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/\/ This is \n\/\/ a comment. \n",
                    "to": "<?php\n\/\/ This is\n\/\/ a comment.\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\NoTrailingWhitespaceInCommentFixer"
        },
        "no_trailing_whitespace_in_string": {
            "risky": true,
            "summary": "There must be no trailing whitespace in strings.",
            "riskyDescription": "Changing the whitespaces in strings might affect string comparisons and outputs.",
            "codeSamples": [
                {
                    "from": "<?php $a = '  \n    foo \n';\n",
                    "to": "<?php $a = '\n    foo\n';\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\NoTrailingWhitespaceInStringFixer"
        },
        "no_unneeded_braces": {
            "configuration": [
                {
                    "name": "namespaces",
                    "description": "Remove unneeded braces from bracketed namespaces.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Removes unneeded braces that are superfluous and aren't part of a control structure's body.",
            "codeSamples": [
                {
                    "from": "<?php {\n    echo 1;\n}\n\nswitch ($b) {\n    case 1: {\n        break;\n    }\n}\n",
                    "to": "<?php \n    echo 1;\n\n\nswitch ($b) {\n    case 1: \n        break;\n    \n}\n"
                },
                {
                    "from": "<?php\nnamespace Foo {\n    function Bar(){}\n}\n",
                    "to": "<?php\nnamespace Foo;\n    function Bar(){}\n\n",
                    "configuration": {
                        "namespaces": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoUnneededBracesFixer"
        },
        "no_unneeded_control_parentheses": {
            "configuration": [
                {
                    "name": "statements",
                    "description": "List of control statements to fix.",
                    "defaultValue": [
                        "break",
                        "clone",
                        "continue",
                        "echo_print",
                        "return",
                        "switch_case",
                        "yield"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "break",
                            "clone",
                            "continue",
                            "echo_print",
                            "negative_instanceof",
                            "others",
                            "return",
                            "switch_case",
                            "yield",
                            "yield_from"
                        ]
                    ]
                }
            ],
            "summary": "Removes unneeded parentheses around control statements.",
            "codeSamples": [
                {
                    "from": "<?php\nwhile ($x) { while ($y) { break (2); } }\nclone($a);\nwhile ($y) { continue (2); }\necho(\"foo\");\nprint(\"foo\");\nreturn (1 + 2);\nswitch ($a) { case($x); }\nyield(2);\n",
                    "to": "<?php\nwhile ($x) { while ($y) { break 2; } }\nclone $a;\nwhile ($y) { continue 2; }\necho \"foo\";\nprint \"foo\";\nreturn 1 + 2;\nswitch ($a) { case $x; }\nyield 2;\n"
                },
                {
                    "from": "<?php\nwhile ($x) { while ($y) { break (2); } }\n\nclone($a);\n\nwhile ($y) { continue (2); }\n",
                    "to": "<?php\nwhile ($x) { while ($y) { break 2; } }\n\nclone($a);\n\nwhile ($y) { continue 2; }\n",
                    "configuration": {
                        "statements": [
                            "break",
                            "continue"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoUnneededControlParenthesesFixer"
        },
        "no_unneeded_curly_braces": {
            "configuration": [
                {
                    "name": "namespaces",
                    "description": "Remove unneeded curly braces from bracketed namespaces.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Removes unneeded curly braces that are superfluous and aren't part of a control structure's body.",
            "codeSamples": [
                {
                    "from": "<?php {\n    echo 1;\n}\n\nswitch ($b) {\n    case 1: {\n        break;\n    }\n}\n",
                    "to": "<?php \n    echo 1;\n\n\nswitch ($b) {\n    case 1: \n        break;\n    \n}\n"
                },
                {
                    "from": "<?php\nnamespace Foo {\n    function Bar(){}\n}\n",
                    "to": "<?php\nnamespace Foo;\n    function Bar(){}\n\n",
                    "configuration": {
                        "namespaces": true
                    }
                }
            ],
            "deprecated_switchTo": [
                "no_unneeded_braces"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoUnneededCurlyBracesFixer"
        },
        "no_unneeded_final_method": {
            "risky": true,
            "configuration": [
                {
                    "name": "private_methods",
                    "description": "Private methods of non-`final` classes must not be declared `final`.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Removes `final` from methods where possible.",
            "riskyDescription": "Risky when child class overrides a `private` method.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Foo\n{\n    final public function foo1() {}\n    final protected function bar() {}\n    final private function baz() {}\n}\n\nclass Bar\n{\n    final private function bar1() {}\n}\n",
                    "to": "<?php\nfinal class Foo\n{\n    public function foo1() {}\n    protected function bar() {}\n    private function baz() {}\n}\n\nclass Bar\n{\n    private function bar1() {}\n}\n"
                },
                {
                    "from": "<?php\nfinal class Foo\n{\n    final private function baz() {}\n}\n\nclass Bar\n{\n    final private function bar1() {}\n}\n",
                    "to": "<?php\nfinal class Foo\n{\n    private function baz() {}\n}\n\nclass Bar\n{\n    final private function bar1() {}\n}\n",
                    "configuration": {
                        "private_methods": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\NoUnneededFinalMethodFixer"
        },
        "no_unneeded_import_alias": {
            "summary": "Imports should not be aliased as the same name.",
            "codeSamples": [
                {
                    "from": "<?php\nuse A\\B\\Foo as Foo;\n",
                    "to": "<?php\nuse A\\B\\Foo  ;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\NoUnneededImportAliasFixer"
        },
        "no_unreachable_default_argument_value": {
            "risky": true,
            "summary": "In function arguments there must not be arguments with default values before non-default ones.",
            "riskyDescription": "Modifies the signature of functions; therefore risky when using systems (such as some Symfony components) that rely on those (for example through reflection).",
            "codeSamples": [
                {
                    "from": "<?php\nfunction example($foo = \"two words\", $bar) {}\n",
                    "to": "<?php\nfunction example($foo, $bar) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NoUnreachableDefaultArgumentValueFixer"
        },
        "no_unset_cast": {
            "summary": "Variables must be set `null` instead of using `(unset)` casting.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = (unset) $b;\n",
                    "to": "<?php\n$a =  null;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\NoUnsetCastFixer"
        },
        "no_unset_on_property": {
            "risky": true,
            "summary": "Properties should be set to `null` instead of using `unset`.",
            "riskyDescription": "Risky when relying on attributes to be removed using `unset` rather than be set to `null`. Changing variables to `null` instead of unsetting means these still show up when looping over class variables and reference properties remain unbroken. With PHP 7.4, this rule might introduce `null` assignments to properties whose type declaration does not allow it.",
            "codeSamples": [
                {
                    "from": "<?php\nunset($this->a);\n",
                    "to": "<?php\n$this->a = null;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\NoUnsetOnPropertyFixer"
        },
        "no_unused_imports": {
            "summary": "Unused `use` statements must be removed.",
            "codeSamples": [
                {
                    "from": "<?php\nuse \\DateTime;\nuse \\Exception;\n\nnew DateTime();\n",
                    "to": "<?php\nuse \\DateTime;\n\nnew DateTime();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\NoUnusedImportsFixer"
        },
        "no_useless_concat_operator": {
            "configuration": [
                {
                    "name": "juggle_simple_strings",
                    "description": "Allow for simple string quote juggling if it results in more concat-operations merges.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "There should not be useless concat operations.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = 'a'.'b';\n",
                    "to": "<?php\n$a = 'ab';\n"
                },
                {
                    "from": "<?php\n$a = 'a'.\"b\";\n",
                    "to": "<?php\n$a = \"ab\";\n",
                    "configuration": {
                        "juggle_simple_strings": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NoUselessConcatOperatorFixer"
        },
        "no_useless_else": {
            "summary": "There should not be useless `else` cases.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($a) {\n    return 1;\n} else {\n    return 2;\n}\n",
                    "to": "<?php\nif ($a) {\n    return 1;\n}  \n    return 2;\n\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\NoUselessElseFixer"
        },
        "no_useless_nullsafe_operator": {
            "summary": "There should not be useless Null-safe operator `?->` used.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo extends Bar\n{\n    public function test() {\n        echo $this?->parentMethod();\n    }\n}\n",
                    "to": "<?php\nclass Foo extends Bar\n{\n    public function test() {\n        echo $this->parentMethod();\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NoUselessNullsafeOperatorFixer"
        },
        "no_useless_return": {
            "summary": "There should not be an empty `return` statement at the end of a function.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction example($b) {\n    if ($b) {\n        return;\n    }\n    return;\n}\n",
                    "to": "<?php\nfunction example($b) {\n    if ($b) {\n        return;\n    }\n    \n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ReturnNotation\\NoUselessReturnFixer"
        },
        "no_useless_sprintf": {
            "risky": true,
            "summary": "There must be no `sprintf` calls with only the first argument.",
            "riskyDescription": "Risky when if the `sprintf` function is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = sprintf('bar');\n",
                    "to": "<?php\n$foo = 'bar';\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NoUselessSprintfFixer"
        },
        "no_whitespace_before_comma_in_array": {
            "configuration": [
                {
                    "name": "after_heredoc",
                    "description": "Whether the whitespace between heredoc end and comma should be removed.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "In array declaration, there MUST NOT be a whitespace before each comma.",
            "codeSamples": [
                {
                    "from": "<?php $x = array(1 , \"2\");\n",
                    "to": "<?php $x = array(1, \"2\");\n"
                },
                {
                    "from": "<?php\n    $x = [<<<EOD\nfoo\nEOD\n        , 'bar'\n    ];\n",
                    "to": "<?php\n    $x = [<<<EOD\nfoo\nEOD, 'bar'\n    ];\n",
                    "configuration": {
                        "after_heredoc": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NoWhitespaceBeforeCommaInArrayFixer"
        },
        "no_whitespace_in_blank_line": {
            "summary": "Remove trailing whitespace at the end of blank lines.",
            "codeSamples": [
                {
                    "from": "<?php\n   \n$a = 1;\n",
                    "to": "<?php\n\n$a = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\NoWhitespaceInBlankLineFixer"
        },
        "non_printable_character": {
            "risky": true,
            "configuration": [
                {
                    "name": "use_escape_sequences_in_strings",
                    "description": "Whether characters should be replaced with escape sequences in strings.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Remove Zero-width space (ZWSP), Non-breaking space (NBSP) and other invisible unicode symbols.",
            "riskyDescription": "Risky when strings contain intended invisible characters.",
            "codeSamples": [
                {
                    "from": "<?php echo \"\u200bHello\u2007World\u00a0!\";\n",
                    "to": "<?php echo \"\\u{200b}Hello\\u{2007}World\\u{a0}!\";\n"
                },
                {
                    "from": "<?php echo \"\u200bHello\u2007World\u00a0!\";\n",
                    "to": "<?php echo \"Hello World !\";\n",
                    "configuration": {
                        "use_escape_sequences_in_strings": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\NonPrintableCharacterFixer"
        },
        "normalize_index_brace": {
            "summary": "Array index should always be written by using square braces.",
            "codeSamples": [
                {
                    "from": "<?php\necho $sample{$index};\n",
                    "to": "<?php\necho $sample[$index];\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\NormalizeIndexBraceFixer"
        },
        "not_operator_with_space": {
            "summary": "Logical NOT operators (`!`) should have leading and trailing whitespaces.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif (!$bar) {\n    echo \"Help!\";\n}\n",
                    "to": "<?php\n\nif ( ! $bar) {\n    echo \"Help!\";\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NotOperatorWithSpaceFixer"
        },
        "not_operator_with_successor_space": {
            "summary": "Logical NOT operators (`!`) should have one trailing whitespace.",
            "codeSamples": [
                {
                    "from": "<?php\n\nif (!$bar) {\n    echo \"Help!\";\n}\n",
                    "to": "<?php\n\nif (! $bar) {\n    echo \"Help!\";\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\NotOperatorWithSuccessorSpaceFixer"
        },
        "nullable_type_declaration": {
            "configuration": [
                {
                    "name": "syntax",
                    "description": "Whether to use question mark (`?`) or explicit `null` union for nullable type.",
                    "defaultValue": "question_mark",
                    "allowedValues": [
                        "union",
                        "question_mark"
                    ]
                }
            ],
            "summary": "Nullable single type declaration should be standardised using configured syntax.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction bar(null|int $value, null|\\Closure $callable): int|null {}\n",
                    "to": "<?php\nfunction bar(?int $value, ?\\Closure $callable): ?int {}\n"
                },
                {
                    "from": "<?php\nfunction baz(?int $value, ?\\stdClass $obj, ?array $config): ?int {}\n",
                    "to": "<?php\nfunction baz(null|int $value, null|\\stdClass $obj, null|array $config): null|int {}\n",
                    "configuration": {
                        "syntax": "union"
                    }
                },
                {
                    "from": "<?php\nclass ValueObject\n{\n    public null|string $name;\n    public ?int $count;\n    public null|bool $internal;\n    public null|\\Closure $callback;\n}\n",
                    "to": "<?php\nclass ValueObject\n{\n    public ?string $name;\n    public ?int $count;\n    public ?bool $internal;\n    public ?\\Closure $callback;\n}\n",
                    "configuration": {
                        "syntax": "question_mark"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\NullableTypeDeclarationFixer"
        },
        "nullable_type_declaration_for_default_null_value": {
            "configuration": [
                {
                    "name": "use_nullable_type_declaration",
                    "description": "Whether to add or remove `?` or `|null` to parameters with a default `null` value.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Adds or removes `?` before single type declarations or `|null` at the end of union types when parameters have a default `null` value.",
            "description": "Rule is applied only in a PHP 7.1+ environment.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction sample(string $str = null)\n{}\n",
                    "to": "<?php\nfunction sample(?string $str = null)\n{}\n"
                },
                {
                    "from": "<?php\nfunction sample(?string $str = null)\n{}\n",
                    "to": "<?php\nfunction sample(string $str = null)\n{}\n",
                    "configuration": {
                        "use_nullable_type_declaration": false
                    }
                },
                {
                    "from": "<?php\nfunction sample(string|int $str = null)\n{}\n",
                    "to": "<?php\nfunction sample(string|int|null $str = null)\n{}\n"
                },
                {
                    "from": "<?php\nfunction sample(string|int|null $str = null)\n{}\n",
                    "to": "<?php\nfunction sample(string|int $str = null)\n{}\n",
                    "configuration": {
                        "use_nullable_type_declaration": false
                    }
                },
                {
                    "from": "<?php\nfunction sample(\\Foo&\\Bar $str = null)\n{}\n",
                    "to": "<?php\nfunction sample((\\Foo&\\Bar)|null $str = null)\n{}\n"
                },
                {
                    "from": "<?php\nfunction sample((\\Foo&\\Bar)|null $str = null)\n{}\n",
                    "to": "<?php\nfunction sample(\\Foo&\\Bar $str = null)\n{}\n",
                    "configuration": {
                        "use_nullable_type_declaration": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\NullableTypeDeclarationForDefaultNullValueFixer"
        },
        "object_operator_without_whitespace": {
            "summary": "There should not be space before or after object operators `->` and `?->`.",
            "codeSamples": [
                {
                    "from": "<?php $a  ->  b;\n",
                    "to": "<?php $a->b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\ObjectOperatorWithoutWhitespaceFixer"
        },
        "octal_notation": {
            "summary": "Literal octal must be in `0o` notation.",
            "codeSamples": [
                {
                    "from": "<?php $foo = 0123;\n",
                    "to": "<?php $foo = 0o123;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\OctalNotationFixer"
        },
        "operator_linebreak": {
            "configuration": [
                {
                    "name": "only_booleans",
                    "description": "Whether to limit operators to only boolean ones.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "position",
                    "description": "Whether to place operators at the beginning or at the end of the line.",
                    "defaultValue": "beginning",
                    "allowedValues": [
                        "beginning",
                        "end"
                    ]
                }
            ],
            "summary": "Operators - when multiline - must always be at the beginning or at the end of the line.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo() {\n    return $bar ||\n        $baz;\n}\n",
                    "to": "<?php\nfunction foo() {\n    return $bar\n        || $baz;\n}\n"
                },
                {
                    "from": "<?php\nfunction foo() {\n    return $bar\n        || $baz;\n}\n",
                    "to": "<?php\nfunction foo() {\n    return $bar ||\n        $baz;\n}\n",
                    "configuration": {
                        "position": "end"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\OperatorLinebreakFixer"
        },
        "ordered_class_elements": {
            "configuration": [
                {
                    "name": "case_sensitive",
                    "description": "Whether the sorting should be case sensitive.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "order",
                    "description": "List of strings defining order of elements.",
                    "defaultValue": [
                        "use_trait",
                        "case",
                        "constant_public",
                        "constant_protected",
                        "constant_private",
                        "property_public",
                        "property_protected",
                        "property_private",
                        "construct",
                        "destruct",
                        "magic",
                        "phpunit",
                        "method_public",
                        "method_protected",
                        "method_private"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                },
                {
                    "name": "sort_algorithm",
                    "description": "How multiple occurrences of same type statements should be sorted.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "none",
                        "alpha"
                    ]
                }
            ],
            "summary": "Orders the elements of classes\/interfaces\/traits\/enums.",
            "description": "Accepts a subset of pre-defined element types, special element groups, and custom patterns.\n\nElement types: `['use_trait', 'public', 'protected', 'private', 'case', 'constant', 'constant_public', 'constant_protected', 'constant_private', 'property', 'property_static', 'property_public', 'property_protected', 'property_private', 'property_public_readonly', 'property_protected_readonly', 'property_private_readonly', 'property_public_static', 'property_protected_static', 'property_private_static', 'method', 'method_abstract', 'method_static', 'method_public', 'method_protected', 'method_private', 'method_public_abstract', 'method_protected_abstract', 'method_private_abstract', 'method_public_abstract_static', 'method_protected_abstract_static', 'method_private_abstract_static', 'method_public_static', 'method_protected_static', 'method_private_static']`\n\nSpecial element types: `['construct', 'destruct', 'magic', 'phpunit']`\n\nCustom values:\n\n- `method:*`: specify a single method name (e.g. `method:__invoke`) to set the order of that specific method.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Example\n{\n    use BarTrait;\n    use BazTrait;\n    const C1 = 1;\n    const C2 = 2;\n    protected static $protStatProp;\n    public static $pubStatProp1;\n    public $pubProp1;\n    protected $protProp;\n    var $pubProp2;\n    private static $privStatProp;\n    private $privProp;\n    public static $pubStatProp2;\n    public $pubProp3;\n    protected function __construct() {}\n    private static function privStatFunc() {}\n    public function pubFunc1() {}\n    public function __toString() {}\n    protected function protFunc() {}\n    function pubFunc2() {}\n    public static function pubStatFunc1() {}\n    public function pubFunc3() {}\n    static function pubStatFunc2() {}\n    private function privFunc() {}\n    public static function pubStatFunc3() {}\n    protected static function protStatFunc() {}\n    public function __destruct() {}\n}\n",
                    "to": "<?php\nfinal class Example\n{\n    use BarTrait;\n    use BazTrait;\n    const C1 = 1;\n    const C2 = 2;\n    public static $pubStatProp1;\n    public $pubProp1;\n    var $pubProp2;\n    public static $pubStatProp2;\n    public $pubProp3;\n    protected static $protStatProp;\n    protected $protProp;\n    private static $privStatProp;\n    private $privProp;\n    protected function __construct() {}\n    public function __destruct() {}\n    public function __toString() {}\n    public function pubFunc1() {}\n    function pubFunc2() {}\n    public static function pubStatFunc1() {}\n    public function pubFunc3() {}\n    static function pubStatFunc2() {}\n    public static function pubStatFunc3() {}\n    protected function protFunc() {}\n    protected static function protStatFunc() {}\n    private static function privStatFunc() {}\n    private function privFunc() {}\n}\n"
                },
                {
                    "from": "<?php\nclass Example\n{\n    public function A(){}\n    private function B(){}\n}\n",
                    "to": "<?php\nclass Example\n{\n    private function B(){}\n    public function A(){}\n}\n",
                    "configuration": {
                        "order": [
                            "method_private",
                            "method_public"
                        ]
                    }
                },
                {
                    "from": "<?php\nclass Example\n{\n    public function D(){}\n    public function B(){}\n    public function A(){}\n    public function C(){}\n}\n",
                    "to": "<?php\nclass Example\n{\n    public function A(){}\n    public function B(){}\n    public function C(){}\n    public function D(){}\n}\n",
                    "configuration": {
                        "order": [
                            "method_public"
                        ],
                        "sort_algorithm": "alpha"
                    }
                },
                {
                    "from": "<?php\nclass Example\n{\n    public function Aa(){}\n    public function AA(){}\n    public function AwS(){}\n    public function AWs(){}\n}\n",
                    "to": "<?php\nclass Example\n{\n    public function AA(){}\n    public function AWs(){}\n    public function Aa(){}\n    public function AwS(){}\n}\n",
                    "configuration": {
                        "order": [
                            "method_public"
                        ],
                        "sort_algorithm": "alpha",
                        "case_sensitive": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedClassElementsFixer"
        },
        "ordered_imports": {
            "configuration": [
                {
                    "name": "case_sensitive",
                    "description": "Whether the sorting should be case sensitive.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "imports_order",
                    "description": "Defines the order of import types.",
                    "defaultValue": null,
                    "allowedTypes": [
                        "array",
                        "null"
                    ]
                },
                {
                    "name": "sort_algorithm",
                    "description": "Whether the statements should be sorted alphabetically or by length, or not sorted.",
                    "defaultValue": "alpha",
                    "allowedValues": [
                        "alpha",
                        "length",
                        "none"
                    ]
                }
            ],
            "summary": "Ordering `use` statements.",
            "codeSamples": [
                {
                    "from": "<?php\nuse function AAC;\nuse const AAB;\nuse AAA;\n",
                    "to": "<?php\nuse AAA;\nuse const AAB;\nuse function AAC;\n"
                },
                {
                    "from": "<?php\nuse function Aaa;\nuse const AA;\n",
                    "to": "<?php\nuse const AA;\nuse function Aaa;\n",
                    "configuration": {
                        "case_sensitive": true
                    }
                },
                {
                    "from": "<?php\nuse Acme\\Bar;\nuse Bar1;\nuse Acme;\nuse Bar;\n",
                    "to": "<?php\nuse Bar;\nuse Acme;\nuse Bar1;\nuse Acme\\Bar;\n",
                    "configuration": {
                        "sort_algorithm": "length"
                    }
                },
                {
                    "from": "<?php\nuse const AAAA;\nuse const BBB;\n\nuse Bar;\nuse AAC;\nuse Acme;\n\nuse function CCC\\AA;\nuse function DDD;\n",
                    "to": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse AAC;\nuse Bar;\nuse Acme;\n\nuse function DDD;\nuse function CCC\\AA;\n",
                    "configuration": {
                        "sort_algorithm": "length",
                        "imports_order": [
                            "const",
                            "class",
                            "function"
                        ]
                    }
                },
                {
                    "from": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse Acme;\nuse AAC;\nuse Bar;\n\nuse function DDD;\nuse function CCC\\AA;\n",
                    "to": "<?php\nuse const AAAA;\nuse const BBB;\n\nuse AAC;\nuse Acme;\nuse Bar;\n\nuse function CCC\\AA;\nuse function DDD;\n",
                    "configuration": {
                        "sort_algorithm": "alpha",
                        "imports_order": [
                            "const",
                            "class",
                            "function"
                        ]
                    }
                },
                {
                    "from": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse function DDD;\nuse function CCC\\AA;\n\nuse Acme;\nuse AAC;\nuse Bar;\n",
                    "to": "<?php\nuse const BBB;\nuse const AAAA;\n\nuse Acme;\nuse AAC;\n\nuse Bar;\nuse function DDD;\nuse function CCC\\AA;\n",
                    "configuration": {
                        "sort_algorithm": "none",
                        "imports_order": [
                            "const",
                            "class",
                            "function"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\OrderedImportsFixer"
        },
        "ordered_interfaces": {
            "configuration": [
                {
                    "name": "case_sensitive",
                    "description": "Whether the sorting should be case sensitive.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "direction",
                    "description": "Which direction the interfaces should be ordered.",
                    "defaultValue": "ascend",
                    "allowedValues": [
                        "ascend",
                        "descend"
                    ]
                },
                {
                    "name": "order",
                    "description": "How the interfaces should be ordered.",
                    "defaultValue": "alpha",
                    "allowedValues": [
                        "alpha",
                        "length"
                    ]
                }
            ],
            "summary": "Orders the interfaces in an `implements` or `interface extends` clause.",
            "codeSamples": [
                {
                    "from": "<?php\n\nfinal class ExampleA implements Gamma, Alpha, Beta {}\n\ninterface ExampleB extends Gamma, Alpha, Beta {}\n",
                    "to": "<?php\n\nfinal class ExampleA implements Alpha, Beta, Gamma {}\n\ninterface ExampleB extends Alpha, Beta, Gamma {}\n"
                },
                {
                    "from": "<?php\n\nfinal class ExampleA implements Gamma, Alpha, Beta {}\n\ninterface ExampleB extends Gamma, Alpha, Beta {}\n",
                    "to": "<?php\n\nfinal class ExampleA implements Gamma, Beta, Alpha {}\n\ninterface ExampleB extends Gamma, Beta, Alpha {}\n",
                    "configuration": {
                        "direction": "descend"
                    }
                },
                {
                    "from": "<?php\n\nfinal class ExampleA implements MuchLonger, Short, Longer {}\n\ninterface ExampleB extends MuchLonger, Short, Longer {}\n",
                    "to": "<?php\n\nfinal class ExampleA implements Short, Longer, MuchLonger {}\n\ninterface ExampleB extends Short, Longer, MuchLonger {}\n",
                    "configuration": {
                        "order": "length"
                    }
                },
                {
                    "from": "<?php\n\nfinal class ExampleA implements MuchLonger, Short, Longer {}\n\ninterface ExampleB extends MuchLonger, Short, Longer {}\n",
                    "to": "<?php\n\nfinal class ExampleA implements MuchLonger, Longer, Short {}\n\ninterface ExampleB extends MuchLonger, Longer, Short {}\n",
                    "configuration": {
                        "order": "length",
                        "direction": "descend"
                    }
                },
                {
                    "from": "<?php\n\nfinal class ExampleA implements IgnorecaseB, IgNoReCaSeA, IgnoreCaseC {}\n\ninterface ExampleB extends IgnorecaseB, IgNoReCaSeA, IgnoreCaseC {}\n",
                    "to": "<?php\n\nfinal class ExampleA implements IgNoReCaSeA, IgnorecaseB, IgnoreCaseC {}\n\ninterface ExampleB extends IgNoReCaSeA, IgnorecaseB, IgnoreCaseC {}\n",
                    "configuration": {
                        "order": "alpha"
                    }
                },
                {
                    "from": "<?php\n\nfinal class ExampleA implements Casesensitivea, CaseSensitiveA, CasesensitiveA {}\n\ninterface ExampleB extends Casesensitivea, CaseSensitiveA, CasesensitiveA {}\n",
                    "to": "<?php\n\nfinal class ExampleA implements CaseSensitiveA, CasesensitiveA, Casesensitivea {}\n\ninterface ExampleB extends CaseSensitiveA, CasesensitiveA, Casesensitivea {}\n",
                    "configuration": {
                        "order": "alpha",
                        "case_sensitive": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedInterfacesFixer"
        },
        "ordered_traits": {
            "risky": true,
            "configuration": [
                {
                    "name": "case_sensitive",
                    "description": "Whether the sorting should be case sensitive.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Trait `use` statements must be sorted alphabetically.",
            "riskyDescription": "Risky when depending on order of the imports.",
            "codeSamples": [
                {
                    "from": "<?php class Foo { \nuse Z; use A; }\n",
                    "to": "<?php class Foo { \nuse A; use Z; }\n"
                },
                {
                    "from": "<?php class Foo { \nuse Aaa; use AA; }\n",
                    "to": "<?php class Foo { \nuse AA; use Aaa; }\n",
                    "configuration": {
                        "case_sensitive": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedTraitsFixer"
        },
        "ordered_types": {
            "configuration": [
                {
                    "name": "case_sensitive",
                    "description": "Whether the sorting should be case sensitive.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "null_adjustment",
                    "description": "Forces the position of `null` (overrides `sort_algorithm`).",
                    "defaultValue": "always_first",
                    "allowedValues": [
                        "always_first",
                        "always_last",
                        "none"
                    ]
                },
                {
                    "name": "sort_algorithm",
                    "description": "Whether the types should be sorted alphabetically, or not sorted.",
                    "defaultValue": "alpha",
                    "allowedValues": [
                        "alpha",
                        "none"
                    ]
                }
            ],
            "summary": "Sort union types and intersection types using configured order.",
            "codeSamples": [
                {
                    "from": "<?php\ntry {\n    cache()->save($foo);\n} catch (\\RuntimeException|CacheException $e) {\n    logger($e);\n\n    throw $e;\n}\n",
                    "to": "<?php\ntry {\n    cache()->save($foo);\n} catch (CacheException|\\RuntimeException $e) {\n    logger($e);\n\n    throw $e;\n}\n"
                },
                {
                    "from": "<?php\ninterface Foo\n{\n    public function bar(\\Aaa|\\AA $foo): string|int;\n}\n",
                    "to": "<?php\ninterface Foo\n{\n    public function bar(\\AA|\\Aaa $foo): int|string;\n}\n",
                    "configuration": {
                        "case_sensitive": true
                    }
                },
                {
                    "from": "<?php\ninterface Foo\n{\n    public function bar(null|string|int $foo): string|int;\n\n    public function foo(\\Stringable&\\Countable $obj): int;\n}\n",
                    "to": "<?php\ninterface Foo\n{\n    public function bar(int|string|null $foo): int|string;\n\n    public function foo(\\Countable&\\Stringable $obj): int;\n}\n",
                    "configuration": {
                        "null_adjustment": "always_last"
                    }
                },
                {
                    "from": "<?php\ninterface Bar\n{\n    public function bar(null|string|int $foo): string|int;\n}\n",
                    "to": "<?php\ninterface Bar\n{\n    public function bar(string|int|null $foo): string|int;\n}\n",
                    "configuration": {
                        "sort_algorithm": "none",
                        "null_adjustment": "always_last"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\OrderedTypesFixer"
        },
        "php_unit_construct": {
            "risky": true,
            "configuration": [
                {
                    "name": "assertions",
                    "description": "List of assertion methods to fix.",
                    "defaultValue": [
                        "assertEquals",
                        "assertSame",
                        "assertNotEquals",
                        "assertNotSame"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "assertEquals",
                            "assertNotEquals",
                            "assertNotSame",
                            "assertSame"
                        ]
                    ]
                }
            ],
            "summary": "PHPUnit assertion method calls like `->assertSame(true, $foo)` should be written with dedicated method like `->assertTrue($foo)`.",
            "riskyDescription": "Fixer could be risky if one is overriding PHPUnit's native methods.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class FooTest extends \\PHPUnit_Framework_TestCase {\n    public function testSomething() {\n        $this->assertEquals(false, $b);\n        $this->assertSame(true, $a);\n        $this->assertNotEquals(null, $c);\n        $this->assertNotSame(null, $d);\n    }\n}\n",
                    "to": "<?php\nfinal class FooTest extends \\PHPUnit_Framework_TestCase {\n    public function testSomething() {\n        $this->assertFalse($b);\n        $this->assertTrue($a);\n        $this->assertNotNull($c);\n        $this->assertNotNull($d);\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class FooTest extends \\PHPUnit_Framework_TestCase {\n    public function testSomething() {\n        $this->assertEquals(false, $b);\n        $this->assertSame(true, $a);\n        $this->assertNotEquals(null, $c);\n        $this->assertNotSame(null, $d);\n    }\n}\n",
                    "to": "<?php\nfinal class FooTest extends \\PHPUnit_Framework_TestCase {\n    public function testSomething() {\n        $this->assertEquals(false, $b);\n        $this->assertTrue($a);\n        $this->assertNotEquals(null, $c);\n        $this->assertNotNull($d);\n    }\n}\n",
                    "configuration": {
                        "assertions": [
                            "assertSame",
                            "assertNotSame"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitConstructFixer"
        },
        "php_unit_data_provider_name": {
            "risky": true,
            "configuration": [
                {
                    "name": "prefix",
                    "description": "Prefix that replaces \"test\".",
                    "defaultValue": "provide",
                    "allowedTypes": [
                        "string"
                    ]
                },
                {
                    "name": "suffix",
                    "description": "Suffix to be present at the end.",
                    "defaultValue": "Cases",
                    "allowedTypes": [
                        "string"
                    ]
                }
            ],
            "summary": "Data provider names must match the name of the test.",
            "riskyDescription": "Fixer could be risky if one is calling data provider by name as function.",
            "codeSamples": [
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider dataProvider\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function dataProvider() {}\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases() {}\n}\n"
                },
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider dt_prvdr_ftr\n     *\/\n    public function test_feature($expected, $actual) {}\n    public function dt_prvdr_ftr() {}\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider data_feature\n     *\/\n    public function test_feature($expected, $actual) {}\n    public function data_feature() {}\n}\n",
                    "configuration": {
                        "prefix": "data_",
                        "suffix": ""
                    }
                },
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider dataProviderUsedInMultipleTests\n     *\/\n    public function testA($expected, $actual) {}\n    \/**\n     * @dataProvider dataProviderUsedInMultipleTests\n     *\/\n    public function testB($expected, $actual) {}\n    \/**\n     * @dataProvider dataProviderUsedInSingleTest\n     *\/\n    public function testC($expected, $actual) {}\n    \/**\n     * @dataProvider dataProviderUsedAsFirstInTest\n     * @dataProvider dataProviderUsedAsSecondInTest\n     *\/\n    public function testD($expected, $actual) {}\n\n    public function dataProviderUsedInMultipleTests() {}\n    public function dataProviderUsedInSingleTest() {}\n    public function dataProviderUsedAsFirstInTest() {}\n    public function dataProviderUsedAsSecondInTest() {}\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider dataProviderUsedInMultipleTests\n     *\/\n    public function testA($expected, $actual) {}\n    \/**\n     * @dataProvider dataProviderUsedInMultipleTests\n     *\/\n    public function testB($expected, $actual) {}\n    \/**\n     * @dataProvider providesCData\n     *\/\n    public function testC($expected, $actual) {}\n    \/**\n     * @dataProvider dataProviderUsedAsFirstInTest\n     * @dataProvider dataProviderUsedAsSecondInTest\n     *\/\n    public function testD($expected, $actual) {}\n\n    public function dataProviderUsedInMultipleTests() {}\n    public function providesCData() {}\n    public function dataProviderUsedAsFirstInTest() {}\n    public function dataProviderUsedAsSecondInTest() {}\n}\n",
                    "configuration": {
                        "prefix": "provides",
                        "suffix": "Data"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDataProviderNameFixer"
        },
        "php_unit_data_provider_return_type": {
            "risky": true,
            "summary": "The return type of PHPUnit data provider must be `iterable`.",
            "description": "Data provider must return `iterable`, either an array of arrays or an object that implements the `Traversable` interface.",
            "riskyDescription": "Risky when relying on signature of the data provider.",
            "codeSamples": [
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases(): array {}\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases(): iterable {}\n}\n"
                },
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases() {}\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases(): iterable {}\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDataProviderReturnTypeFixer"
        },
        "php_unit_data_provider_static": {
            "risky": true,
            "configuration": [
                {
                    "name": "force",
                    "description": "Whether to make the data providers static even if they have a dynamic class call (may introduce fatal error \"using $this when not in object context\", and you may have to adjust the code manually by converting dynamic calls to static ones).",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Data providers must be static.",
            "riskyDescription": "Fixer could be risky if one is calling data provider function dynamically.",
            "codeSamples": [
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases() {}\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public static function provideSomethingCases() {}\n}\n"
                },
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases1\n     * @dataProvider provideSomethingCases2\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomethingCases1() { $this->getData1(); }\n    public function provideSomethingCases2() { self::getData2(); }\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomethingCases1\n     * @dataProvider provideSomethingCases2\n     *\/\n    public function testSomething($expected, $actual) {}\n    public static function provideSomethingCases1() { $this->getData1(); }\n    public static function provideSomethingCases2() { self::getData2(); }\n}\n",
                    "configuration": {
                        "force": true
                    }
                },
                {
                    "from": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomething1Cases\n     * @dataProvider provideSomething2Cases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomething1Cases() { $this->getData1(); }\n    public function provideSomething2Cases() { self::getData2(); }\n}\n",
                    "to": "<?php\nclass FooTest extends TestCase {\n    \/**\n     * @dataProvider provideSomething1Cases\n     * @dataProvider provideSomething2Cases\n     *\/\n    public function testSomething($expected, $actual) {}\n    public function provideSomething1Cases() { $this->getData1(); }\n    public static function provideSomething2Cases() { self::getData2(); }\n}\n",
                    "configuration": {
                        "force": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDataProviderStaticFixer"
        },
        "php_unit_dedicate_assert": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "3.0",
                        "3.5",
                        "5.0",
                        "5.6",
                        "newest"
                    ]
                }
            ],
            "summary": "PHPUnit assertions like `assertInternalType`, `assertFileExists`, should be used over `assertTrue`.",
            "riskyDescription": "Fixer could be risky if one is overriding PHPUnit's native methods.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertTrue(is_float( $a), \"my message\");\n        $this->assertTrue(is_nan($a));\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertInternalType('float', $a, \"my message\");\n        $this->assertNan($a);\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertTrue(is_dir($a));\n        $this->assertTrue(is_writable($a));\n        $this->assertTrue(is_readable($a));\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertDirectoryExists($a);\n        $this->assertIsWritable($a);\n        $this->assertIsReadable($a);\n    }\n}\n",
                    "configuration": {
                        "target": "5.6"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertFixer"
        },
        "php_unit_dedicate_assert_internal_type": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "7.5",
                        "newest"
                    ]
                }
            ],
            "summary": "PHPUnit assertions like `assertIsArray` should be used over `assertInternalType`.",
            "riskyDescription": "Risky when PHPUnit methods are overridden or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testMe()\n    {\n        $this->assertInternalType(\"array\", $var);\n        $this->assertInternalType(\"boolean\", $var);\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testMe()\n    {\n        $this->assertIsArray($var);\n        $this->assertIsBool($var);\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testMe()\n    {\n        $this->assertInternalType(\"array\", $var);\n        $this->assertInternalType(\"boolean\", $var);\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testMe()\n    {\n        $this->assertIsArray($var);\n        $this->assertIsBool($var);\n    }\n}\n",
                    "configuration": {
                        "target": "7.5"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitDedicateAssertInternalTypeFixer"
        },
        "php_unit_expectation": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "5.2",
                        "5.6",
                        "8.4",
                        "newest"
                    ]
                }
            ],
            "summary": "Usages of `->setExpectedException*` methods MUST be replaced by `->expectException*` methods.",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->setExpectedException(\"RuntimeException\", \"Msg\", 123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessage(\"Msg\");\n        $this->expectExceptionCode(123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessageMatches(\"\/Msg.*\/\");\n        $this->expectExceptionCode(123);\n        bar();\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->setExpectedException(\"RuntimeException\", null, 123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionCode(123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessageMatches(\"\/Msg.*\/\");\n        $this->expectExceptionCode(123);\n        bar();\n    }\n}\n",
                    "configuration": {
                        "target": "8.4"
                    }
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->setExpectedException(\"RuntimeException\", null, 123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionCode(123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessageRegExp(\"\/Msg.*\/\");\n        $this->expectExceptionCode(123);\n        bar();\n    }\n}\n",
                    "configuration": {
                        "target": "5.6"
                    }
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->setExpectedException(\"RuntimeException\", \"Msg\", 123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $this->expectException(\"RuntimeException\");\n        $this->expectExceptionMessage(\"Msg\");\n        $this->expectExceptionCode(123);\n        foo();\n    }\n\n    public function testBar()\n    {\n        $this->setExpectedExceptionRegExp(\"RuntimeException\", \"\/Msg.*\/\", 123);\n        bar();\n    }\n}\n",
                    "configuration": {
                        "target": "5.2"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitExpectationFixer"
        },
        "php_unit_fqcn_annotation": {
            "summary": "PHPUnit annotations should be a FQCNs including a root namespace.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException InvalidArgumentException\n     * @covers Project\\NameSpace\\Something\n     * @coversDefaultClass Project\\Default\n     * @uses Project\\Test\\Util\n     *\/\n    public function testSomeTest()\n    {\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException \\InvalidArgumentException\n     * @covers \\Project\\NameSpace\\Something\n     * @coversDefaultClass \\Project\\Default\n     * @uses \\Project\\Test\\Util\n     *\/\n    public function testSomeTest()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitFqcnAnnotationFixer"
        },
        "php_unit_internal_class": {
            "configuration": [
                {
                    "name": "types",
                    "description": "What types of classes to mark as internal.",
                    "defaultValue": [
                        "normal",
                        "final"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "abstract",
                            "final",
                            "normal"
                        ]
                    ]
                }
            ],
            "summary": "All PHPUnit test classes should be marked as internal.",
            "codeSamples": [
                {
                    "from": "<?php\nclass MyTest extends TestCase {}\n",
                    "to": "<?php\n\n\/**\n * @internal\n *\/\nclass MyTest extends TestCase {}\n"
                },
                {
                    "from": "<?php\nclass MyTest extends TestCase {}\nfinal class FinalTest extends TestCase {}\nabstract class AbstractTest extends TestCase {}\n",
                    "to": "<?php\nclass MyTest extends TestCase {}\n\/**\n * @internal\n *\/\nfinal class FinalTest extends TestCase {}\nabstract class AbstractTest extends TestCase {}\n",
                    "configuration": {
                        "types": [
                            "final"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitInternalClassFixer"
        },
        "php_unit_method_casing": {
            "configuration": [
                {
                    "name": "case",
                    "description": "Apply camel or snake case to test methods.",
                    "defaultValue": "camel_case",
                    "allowedValues": [
                        "camel_case",
                        "snake_case"
                    ]
                }
            ],
            "summary": "Enforce camel (or snake) case for PHPUnit test methods, following configuration.",
            "codeSamples": [
                {
                    "from": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function test_my_code() {}\n}\n",
                    "to": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function testMyCode() {}\n}\n"
                },
                {
                    "from": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function testMyCode() {}\n}\n",
                    "to": "<?php\nclass MyTest extends \\PhpUnit\\FrameWork\\TestCase\n{\n    public function test_my_code() {}\n}\n",
                    "configuration": {
                        "case": "snake_case"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMethodCasingFixer"
        },
        "php_unit_mock": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "5.4",
                        "5.5",
                        "newest"
                    ]
                }
            ],
            "summary": "Usages of `->getMock` and `->getMockWithoutInvokingTheOriginalConstructor` methods MUST be replaced by `->createMock` or `->createPartialMock` methods.",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock = $this->getMockWithoutInvokingTheOriginalConstructor(\"Foo\");\n        $mock1 = $this->getMock(\"Foo\");\n        $mock1 = $this->getMock(\"Bar\", [\"aaa\"]);\n        $mock1 = $this->getMock(\"Baz\", [\"aaa\"], [\"argument\"]); \/\/ version with more than 2 params is not supported\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock = $this->createMock(\"Foo\");\n        $mock1 = $this->createMock(\"Foo\");\n        $mock1 = $this->createPartialMock(\"Bar\", [\"aaa\"]);\n        $mock1 = $this->getMock(\"Baz\", [\"aaa\"], [\"argument\"]); \/\/ version with more than 2 params is not supported\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock1 = $this->getMock(\"Foo\");\n        $mock1 = $this->getMock(\"Bar\", [\"aaa\"]); \/\/ version with multiple params is not supported\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testFoo()\n    {\n        $mock1 = $this->createMock(\"Foo\");\n        $mock1 = $this->getMock(\"Bar\", [\"aaa\"]); \/\/ version with multiple params is not supported\n    }\n}\n",
                    "configuration": {
                        "target": "5.4"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMockFixer"
        },
        "php_unit_mock_short_will_return": {
            "risky": true,
            "summary": "Usage of PHPUnit's mock e.g. `->will($this->returnValue(..))` must be replaced by its shorter equivalent such as `->willReturn(...)`.",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $someMock = $this->createMock(Some::class);\n        $someMock->method(\"some\")->will($this->returnSelf());\n        $someMock->method(\"some\")->will($this->returnValue(\"example\"));\n        $someMock->method(\"some\")->will($this->returnArgument(2));\n        $someMock->method(\"some\")->will($this->returnCallback(\"str_rot13\"));\n        $someMock->method(\"some\")->will($this->returnValueMap([\"a\",\"b\",\"c\"]));\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $someMock = $this->createMock(Some::class);\n        $someMock->method(\"some\")->willReturnSelf();\n        $someMock->method(\"some\")->willReturn(\"example\");\n        $someMock->method(\"some\")->willReturnArgument(2);\n        $someMock->method(\"some\")->willReturnCallback(\"str_rot13\");\n        $someMock->method(\"some\")->willReturnMap([\"a\",\"b\",\"c\"]);\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitMockShortWillReturnFixer"
        },
        "php_unit_namespaced": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "4.8",
                        "5.7",
                        "6.0",
                        "newest"
                    ]
                }
            ],
            "summary": "PHPUnit classes MUST be used in namespaced version, e.g. `\\PHPUnit\\Framework\\TestCase` instead of `\\PHPUnit_Framework_TestCase`.",
            "description": "PHPUnit v6 has finally fully switched to namespaces.\nYou could start preparing the upgrade by switching from non-namespaced TestCase to namespaced one.\nForward compatibility layer (`\\PHPUnit\\Framework\\TestCase` class) was backported to PHPUnit v4.8.35 and PHPUnit v5.4.0.\nExtended forward compatibility layer (`PHPUnit\\Framework\\Assert`, `PHPUnit\\Framework\\BaseTestListener`, `PHPUnit\\Framework\\TestListener` classes) was introduced in v5.7.0.\n",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomething()\n    {\n        PHPUnit_Framework_Assert::assertTrue(true);\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testSomething()\n    {\n        PHPUnit\\Framework\\Assert::assertTrue(true);\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomething()\n    {\n        PHPUnit_Framework_Assert::assertTrue(true);\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testSomething()\n    {\n        PHPUnit_Framework_Assert::assertTrue(true);\n    }\n}\n",
                    "configuration": {
                        "target": "4.8"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitNamespacedFixer"
        },
        "php_unit_no_expectation_annotation": {
            "risky": true,
            "configuration": [
                {
                    "name": "target",
                    "description": "Target version of PHPUnit.",
                    "defaultValue": "newest",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "3.2",
                        "4.3",
                        "newest"
                    ]
                },
                {
                    "name": "use_class_const",
                    "description": "Use ::class notation.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Usages of `@expectedException*` annotations MUST be replaced by `->setExpectedException*` methods.",
            "riskyDescription": "Risky when PHPUnit classes are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionMessageRegExp \/foo.*$\/\n     * @expectedExceptionCode 123\n     *\/\n    function testAaa()\n    {\n        aaa();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     *\/\n    function testAaa()\n    {\n        $this->setExpectedExceptionRegExp(\\FooException::class, '\/foo.*$\/', 123);\n\n        aaa();\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionCode 123\n     *\/\n    function testBbb()\n    {\n        bbb();\n    }\n\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionMessageRegExp \/foo.*$\/\n     *\/\n    function testCcc()\n    {\n        ccc();\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    \/**\n     *\/\n    function testBbb()\n    {\n        $this->setExpectedException(\\FooException::class, null, 123);\n\n        bbb();\n    }\n\n    \/**\n     * @expectedException FooException\n     * @expectedExceptionMessageRegExp \/foo.*$\/\n     *\/\n    function testCcc()\n    {\n        ccc();\n    }\n}\n",
                    "configuration": {
                        "target": "3.2"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitNoExpectationAnnotationFixer"
        },
        "php_unit_set_up_tear_down_visibility": {
            "risky": true,
            "summary": "Changes the visibility of the `setUp()` and `tearDown()` functions of PHPUnit to `protected`, to match the PHPUnit TestCase.",
            "riskyDescription": "This fixer may change functions named `setUp()` or `tearDown()` outside of PHPUnit tests, when a class is wrongly seen as a PHPUnit test.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    private $hello;\n    public function setUp()\n    {\n        $this->hello = \"hello\";\n    }\n\n    public function tearDown()\n    {\n        $this->hello = null;\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    private $hello;\n    protected function setUp()\n    {\n        $this->hello = \"hello\";\n    }\n\n    protected function tearDown()\n    {\n        $this->hello = null;\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitSetUpTearDownVisibilityFixer"
        },
        "php_unit_size_class": {
            "configuration": [
                {
                    "name": "group",
                    "description": "Define a specific group to be used in case no group is already in use.",
                    "defaultValue": "small",
                    "allowedValues": [
                        "small",
                        "medium",
                        "large"
                    ]
                }
            ],
            "summary": "All PHPUnit test cases should have `@small`, `@medium` or `@large` annotation to enable run time limits.",
            "description": "The special groups [small, medium, large] provides a way to identify tests that are taking long to be executed.",
            "codeSamples": [
                {
                    "from": "<?php\nclass MyTest extends TestCase {}\n",
                    "to": "<?php\n\n\/**\n * @small\n *\/\nclass MyTest extends TestCase {}\n"
                },
                {
                    "from": "<?php\nclass MyTest extends TestCase {}\n",
                    "to": "<?php\n\n\/**\n * @medium\n *\/\nclass MyTest extends TestCase {}\n",
                    "configuration": {
                        "group": "medium"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitSizeClassFixer"
        },
        "php_unit_strict": {
            "risky": true,
            "configuration": [
                {
                    "name": "assertions",
                    "description": "List of assertion methods to fix.",
                    "defaultValue": [
                        "assertAttributeEquals",
                        "assertAttributeNotEquals",
                        "assertEquals",
                        "assertNotEquals"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "assertAttributeEquals",
                            "assertAttributeNotEquals",
                            "assertEquals",
                            "assertNotEquals"
                        ]
                    ]
                }
            ],
            "summary": "PHPUnit methods like `assertSame` should be used instead of `assertEquals`.",
            "riskyDescription": "Risky when any of the functions are overridden or when testing object equality.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertEquals(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeSame(a(), b());\n        $this->assertAttributeNotSame(a(), b());\n        $this->assertSame(a(), b());\n        $this->assertNotSame(a(), b());\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertEquals(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertAttributeEquals(a(), b());\n        $this->assertAttributeNotEquals(a(), b());\n        $this->assertSame(a(), b());\n        $this->assertNotEquals(a(), b());\n    }\n}\n",
                    "configuration": {
                        "assertions": [
                            "assertEquals"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitStrictFixer"
        },
        "php_unit_test_annotation": {
            "risky": true,
            "configuration": [
                {
                    "name": "style",
                    "description": "Whether to use the @test annotation or not.",
                    "defaultValue": "prefix",
                    "allowedValues": [
                        "prefix",
                        "annotation"
                    ]
                }
            ],
            "summary": "Adds or removes @test annotations from tests, following configuration.",
            "riskyDescription": "This fixer may change the name of your tests, and could cause incompatibility with abstract classes or interfaces.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\n    \/**\n     * @test\n     *\/\n    public function itDoesSomething() {} }\n",
                    "to": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\n    \/**\n     *\n     *\/\n    public function testItDoesSomething() {} }\n"
                },
                {
                    "from": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\npublic function testItDoesSomething() {}}\n",
                    "to": "<?php\nclass Test extends \\PhpUnit\\FrameWork\\TestCase\n{\n\/**\n * @test\n *\/\npublic function itDoesSomething() {}}\n",
                    "configuration": {
                        "style": "annotation"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestAnnotationFixer"
        },
        "php_unit_test_case_static_method_calls": {
            "risky": true,
            "configuration": [
                {
                    "name": "call_type",
                    "description": "The call type to use for referring to PHPUnit methods.",
                    "defaultValue": "static",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "this",
                        "self",
                        "static"
                    ]
                },
                {
                    "name": "methods",
                    "description": "Dictionary of `method` => `call_type` values that differ from the default strategy.",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Calls to `PHPUnit\\Framework\\TestCase` static methods must all be of the same type, either `$this->`, `self::` or `static::`.",
            "riskyDescription": "Risky when PHPUnit methods are overridden or not accessible, or when project has PHPUnit incompatibilities.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        $this->assertSame(1, 2);\n        self::assertSame(1, 2);\n        static::assertSame(1, 2);\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        static::assertSame(1, 2);\n        static::assertSame(1, 2);\n        static::assertSame(1, 2);\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        $this->assertSame(1, 2);\n        self::assertSame(1, 2);\n        static::assertSame(1, 2);\n    }\n}\n",
                    "to": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testMe()\n    {\n        $this->assertSame(1, 2);\n        $this->assertSame(1, 2);\n        $this->assertSame(1, 2);\n    }\n}\n",
                    "configuration": {
                        "call_type": "this"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestCaseStaticMethodCallsFixer"
        },
        "php_unit_test_class_requires_covers": {
            "summary": "Adds a default `@coversNothing` annotation to PHPUnit test classes that have no `@covers*` annotation.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertSame(a(), b());\n    }\n}\n",
                    "to": "<?php\n\n\/**\n * @coversNothing\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{\n    public function testSomeTest()\n    {\n        $this->assertSame(a(), b());\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\PhpUnit\\PhpUnitTestClassRequiresCoversFixer"
        },
        "phpdoc_add_missing_param_annotation": {
            "configuration": [
                {
                    "name": "only_untyped",
                    "description": "Whether to add missing `@param` annotations for untyped parameters only.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "PHPDoc should contain `@param` for all params.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "to": "<?php\n\/**\n * @param int $bar\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "to": "<?php\n\/**\n * @param int $bar\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "configuration": {
                        "only_untyped": true
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param int $bar\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "to": "<?php\n\/**\n * @param int $bar\n * @param string $foo\n * @param mixed $baz\n *\n * @return void\n *\/\nfunction f9(string $foo, $bar, $baz) {}\n",
                    "configuration": {
                        "only_untyped": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAddMissingParamAnnotationFixer"
        },
        "phpdoc_align": {
            "configuration": [
                {
                    "name": "align",
                    "description": "How comments should be aligned.",
                    "defaultValue": "vertical",
                    "allowedTypes": [
                        "string"
                    ],
                    "allowedValues": [
                        "left",
                        "vertical"
                    ]
                },
                {
                    "name": "tags",
                    "description": "The tags that should be aligned. Allowed values are tags with name (`'param', 'property', 'property-read', 'property-write', 'phpstan-param', 'phpstan-property', 'phpstan-property-read', 'phpstan-property-write', 'phpstan-assert', 'phpstan-assert-if-true', 'phpstan-assert-if-false', 'psalm-param', 'psalm-param-out', 'psalm-property', 'psalm-property-read', 'psalm-property-write', 'psalm-assert', 'psalm-assert-if-true', 'psalm-assert-if-false'`), tags with method signature (`'method', 'phpstan-method', 'psalm-method'`) and any custom tag with description (e.g. `@tag <desc>`).",
                    "defaultValue": [
                        "method",
                        "param",
                        "property",
                        "return",
                        "throws",
                        "type",
                        "var"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "All items of the given phpdoc tags must be either left-aligned or (by default) aligned vertically.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param  EngineInterface $templating\n * @param string      $format\n * @param  int  $code       an HTTP response status code\n * @param    bool         $debug\n * @param  mixed    &$reference     a parameter passed by reference\n *\/\n",
                    "to": "<?php\n\/**\n * @param EngineInterface $templating\n * @param string          $format\n * @param int             $code       an HTTP response status code\n * @param bool            $debug\n * @param mixed           &$reference a parameter passed by reference\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @param  EngineInterface $templating\n * @param string      $format\n * @param  int  $code       an HTTP response status code\n * @param    bool         $debug\n * @param  mixed    &$reference     a parameter passed by reference\n *\/\n",
                    "to": "<?php\n\/**\n * @param EngineInterface $templating\n * @param string          $format\n * @param int             $code       an HTTP response status code\n * @param bool            $debug\n * @param mixed           &$reference a parameter passed by reference\n *\/\n",
                    "configuration": {
                        "align": "vertical"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param  EngineInterface $templating\n * @param string      $format\n * @param  int  $code       an HTTP response status code\n * @param    bool         $debug\n * @param  mixed    &$reference     a parameter passed by reference\n *\/\n",
                    "to": "<?php\n\/**\n * @param EngineInterface $templating\n * @param string $format\n * @param int $code an HTTP response status code\n * @param bool $debug\n * @param mixed &$reference a parameter passed by reference\n *\/\n",
                    "configuration": {
                        "align": "left"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAlignFixer"
        },
        "phpdoc_annotation_without_dot": {
            "summary": "PHPDoc annotation descriptions should not be a sentence.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param string $bar Some string.\n *\/\nfunction foo ($bar) {}\n",
                    "to": "<?php\n\/**\n * @param string $bar some string\n *\/\nfunction foo ($bar) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocAnnotationWithoutDotFixer"
        },
        "phpdoc_indent": {
            "summary": "Docblocks should have the same indentation as the documented subject.",
            "codeSamples": [
                {
                    "from": "<?php\nclass DocBlocks\n{\n\/**\n * Test constants\n *\/\n    const INDENT = 1;\n}\n",
                    "to": "<?php\nclass DocBlocks\n{\n    \/**\n     * Test constants\n     *\/\n    const INDENT = 1;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocIndentFixer"
        },
        "phpdoc_inline_tag_normalizer": {
            "configuration": [
                {
                    "name": "tags",
                    "description": "The list of tags to normalize.",
                    "defaultValue": [
                        "example",
                        "id",
                        "internal",
                        "inheritdoc",
                        "inheritdocs",
                        "link",
                        "source",
                        "toc",
                        "tutorial"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Fixes PHPDoc inline tags.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @{TUTORIAL}\n * {{ @link }}\n * @inheritDoc\n *\/\n",
                    "to": "<?php\n\/**\n * {@TUTORIAL}\n * {@link}\n * @inheritDoc\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @{TUTORIAL}\n * {{ @link }}\n * @inheritDoc\n *\/\n",
                    "to": "<?php\n\/**\n * {@TUTORIAL}\n * {{ @link }}\n * @inheritDoc\n *\/\n",
                    "configuration": {
                        "tags": [
                            "TUTORIAL"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocInlineTagNormalizerFixer"
        },
        "phpdoc_line_span": {
            "configuration": [
                {
                    "name": "const",
                    "description": "Whether const blocks should be single or multi line.",
                    "defaultValue": "multi",
                    "allowedValues": [
                        "single",
                        "multi",
                        null
                    ]
                },
                {
                    "name": "method",
                    "description": "Whether method doc blocks should be single or multi line.",
                    "defaultValue": "multi",
                    "allowedValues": [
                        "single",
                        "multi",
                        null
                    ]
                },
                {
                    "name": "property",
                    "description": "Whether property doc blocks should be single or multi line.",
                    "defaultValue": "multi",
                    "allowedValues": [
                        "single",
                        "multi",
                        null
                    ]
                }
            ],
            "summary": "Changes doc blocks from single to multi line, or reversed. Works for class constants, properties and methods only.",
            "codeSamples": [
                {
                    "from": "<?php\n\nclass Foo{\n    \/** @var bool *\/\n    public $var;\n}\n",
                    "to": "<?php\n\nclass Foo{\n    \/**\n     * @var bool\n     *\/\n    public $var;\n}\n"
                },
                {
                    "from": "<?php\n\nclass Foo{\n    \/**\n    * @var bool\n    *\/\n    public $var;\n}\n",
                    "to": "<?php\n\nclass Foo{\n    \/** @var bool *\/\n    public $var;\n}\n",
                    "configuration": {
                        "property": "single"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocLineSpanFixer"
        },
        "phpdoc_no_access": {
            "summary": "`@access` annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo\n{\n    \/**\n     * @internal\n     * @access private\n     *\/\n    private $bar;\n}\n",
                    "to": "<?php\nclass Foo\n{\n    \/**\n     * @internal\n     *\/\n    private $bar;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoAccessFixer"
        },
        "phpdoc_no_alias_tag": {
            "configuration": [
                {
                    "name": "replacements",
                    "description": "Mapping between replaced annotations with new ones.",
                    "defaultValue": {
                        "property-read": "property",
                        "property-write": "property",
                        "type": "var",
                        "link": "see"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "No alias PHPDoc tags should be used.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @link baz\n *\/\nfinal class Example\n{\n}\n",
                    "to": "<?php\n\/**\n * @property string $foo\n * @property string $bar\n *\n * @see baz\n *\/\nfinal class Example\n{\n}\n"
                },
                {
                    "from": "<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @link baz\n *\/\nfinal class Example\n{\n}\n",
                    "to": "<?php\n\/**\n * @property string $foo\n * @property-read string $bar\n *\n * @website baz\n *\/\nfinal class Example\n{\n}\n",
                    "configuration": {
                        "replacements": {
                            "link": "website"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoAliasTagFixer"
        },
        "phpdoc_no_empty_return": {
            "summary": "`@return void` and `@return null` annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @return null\n*\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n*\/\nfunction foo() {}\n"
                },
                {
                    "from": "<?php\n\/**\n * @return void\n*\/\nfunction foo() {}\n",
                    "to": "<?php\n\/**\n*\/\nfunction foo() {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoEmptyReturnFixer"
        },
        "phpdoc_no_package": {
            "summary": "`@package` and `@subpackage` annotations should be omitted from PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @internal\n * @package Foo\n * subpackage Bar\n *\/\nclass Baz\n{\n}\n",
                    "to": "<?php\n\/**\n * @internal\n *\/\nclass Baz\n{\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoPackageFixer"
        },
        "phpdoc_no_useless_inheritdoc": {
            "summary": "Classy that does not inherit must not have `@inheritdoc` tags.",
            "codeSamples": [
                {
                    "from": "<?php\n\/** {@inheritdoc} *\/\nclass Sample\n{\n}\n",
                    "to": "<?php\n\/** *\/\nclass Sample\n{\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{\n    \/**\n     * @inheritdoc\n     *\/\n    public function Test()\n    {\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    \/**\n     * \n     *\/\n    public function Test()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocNoUselessInheritdocFixer"
        },
        "phpdoc_order": {
            "configuration": [
                {
                    "name": "order",
                    "description": "Sequence in which annotations in PHPDoc should be ordered.",
                    "defaultValue": [
                        "param",
                        "throws",
                        "return"
                    ],
                    "allowedTypes": [
                        "string[]"
                    ]
                }
            ],
            "summary": "Annotations in PHPDoc should be ordered in defined sequence.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @throws Exception|RuntimeException foo\n * @custom Test!\n * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @custom Test!\n * @param string $foo\n * @param bool   $bar Bar\n * @throws Exception|RuntimeException foo\n * @return int  Return the number of changes.\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @throws Exception|RuntimeException foo\n * @custom Test!\n * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @custom Test!\n * @param string $foo\n * @param bool   $bar Bar\n * @throws Exception|RuntimeException foo\n * @return int  Return the number of changes.\n *\/\n",
                    "configuration": {
                        "order": [
                            "param",
                            "throws",
                            "return"
                        ]
                    }
                },
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @throws Exception|RuntimeException foo\n * @custom Test!\n * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @custom Test!\n * @param string $foo\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n * @throws Exception|RuntimeException foo\n *\/\n",
                    "configuration": {
                        "order": [
                            "param",
                            "return",
                            "throws"
                        ]
                    }
                },
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @throws Exception|RuntimeException foo\n * @custom Test!\n * @return int  Return the number of changes.\n * @param string $foo\n * @param bool   $bar Bar\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @param string $foo\n * @param bool   $bar Bar\n * @custom Test!\n * @throws Exception|RuntimeException foo\n * @return int  Return the number of changes.\n *\/\n",
                    "configuration": {
                        "order": [
                            "param",
                            "custom",
                            "throws",
                            "return"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocOrderFixer"
        },
        "phpdoc_order_by_value": {
            "configuration": [
                {
                    "name": "annotations",
                    "description": "List of annotations to order, e.g. `[\"covers\"]`.",
                    "defaultValue": [
                        "covers"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "author",
                            "covers",
                            "coversNothing",
                            "dataProvider",
                            "depends",
                            "group",
                            "internal",
                            "method",
                            "mixin",
                            "property",
                            "property-read",
                            "property-write",
                            "requires",
                            "throws",
                            "uses"
                        ]
                    ]
                }
            ],
            "summary": "Order phpdoc tags by value.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @covers Foo\n * @covers Bar\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n",
                    "to": "<?php\n\/**\n * @covers Bar\n * @covers Foo\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n"
                },
                {
                    "from": "<?php\n\/**\n * @author Bob\n * @author Alice\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n",
                    "to": "<?php\n\/**\n * @author Alice\n * @author Bob\n *\/\nfinal class MyTest extends \\PHPUnit_Framework_TestCase\n{}\n",
                    "configuration": {
                        "annotations": [
                            "author"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocOrderByValueFixer"
        },
        "phpdoc_param_order": {
            "summary": "Orders all `@param` annotations in DocBlocks according to method signature.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Annotations in wrong order\n *\n * @param int   $a\n * @param Foo   $c\n * @param array $b\n *\/\nfunction m($a, array $b, Foo $c) {}\n",
                    "to": "<?php\n\/**\n * Annotations in wrong order\n *\n * @param int   $a\n * @param array $b\n * @param Foo   $c\n *\/\nfunction m($a, array $b, Foo $c) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocParamOrderFixer"
        },
        "phpdoc_readonly_class_comment_to_keyword": {
            "risky": true,
            "summary": "Converts readonly comment on classes to the readonly keyword.",
            "riskyDescription": "If classes marked with `@readonly` annotation were extended anyway, applying this fixer may break the inheritance for their child classes.",
            "codeSamples": [
                {
                    "from": "    <?php\n    \/** @readonly *\/\n    class C {\n    }\n",
                    "to": "    <?php\n    \n    readonly class C {\n    }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\PhpdocReadonlyClassCommentToKeywordFixer"
        },
        "phpdoc_return_self_reference": {
            "configuration": [
                {
                    "name": "replacements",
                    "description": "Mapping between replaced return types with new ones.",
                    "defaultValue": {
                        "this": "$this",
                        "@this": "$this",
                        "$self": "self",
                        "@self": "self",
                        "$static": "static",
                        "@static": "static"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "The type of `@return` annotations of methods returning a reference to itself must the configured one.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n    \/**\n     * @return this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    \/**\n     * @return $this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{\n    \/**\n     * @return this\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    \/**\n     * @return self\n     *\/\n    public function test1()\n    {\n        return $this;\n    }\n\n    \/**\n     * @return $self\n     *\/\n    public function test2()\n    {\n        return $this;\n    }\n}\n",
                    "configuration": {
                        "replacements": {
                            "this": "self"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocReturnSelfReferenceFixer"
        },
        "phpdoc_scalar": {
            "configuration": [
                {
                    "name": "types",
                    "description": "A list of types to fix.",
                    "defaultValue": [
                        "boolean",
                        "callback",
                        "double",
                        "integer",
                        "real",
                        "str"
                    ],
                    "allowedValues": [
                        [
                            "boolean",
                            "callback",
                            "double",
                            "integer",
                            "real",
                            "str"
                        ]
                    ]
                }
            ],
            "summary": "Scalar types should always be written in the same form. `int` not `integer`, `bool` not `boolean`, `float` not `real` or `double`.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param integer $a\n * @param boolean $b\n * @param real $c\n *\n * @return double\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n",
                    "to": "<?php\n\/**\n * @param int $a\n * @param bool $b\n * @param float $c\n *\n * @return float\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n"
                },
                {
                    "from": "<?php\n\/**\n * @param integer $a\n * @param boolean $b\n * @param real $c\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n",
                    "to": "<?php\n\/**\n * @param integer $a\n * @param bool $b\n * @param real $c\n *\/\nfunction sample($a, $b, $c)\n{\n    return sample2($a, $b, $c);\n}\n",
                    "configuration": {
                        "types": [
                            "boolean"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocScalarFixer"
        },
        "phpdoc_separation": {
            "configuration": [
                {
                    "name": "groups",
                    "description": "Sets of annotation types to be grouped together. Use `*` to match any tag character.",
                    "defaultValue": [
                        [
                            "author",
                            "copyright",
                            "license"
                        ],
                        [
                            "category",
                            "package",
                            "subpackage"
                        ],
                        [
                            "property",
                            "property-read",
                            "property-write"
                        ],
                        [
                            "deprecated",
                            "link",
                            "see",
                            "since"
                        ]
                    ],
                    "allowedTypes": [
                        "string[][]"
                    ]
                },
                {
                    "name": "skip_unlisted_annotations",
                    "description": "Whether to skip annotations that are not listed in any group.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Annotations in PHPDoc should be grouped together so that annotations of the same type immediately follow each other. Annotations of a different type are separated by a single blank line.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n * @param string $foo\n *\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n *\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n *\n * @param string $foo\n * @param bool   $bar Bar\n *\n * @return int  Return the number of changes.\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n * @param string $foo\n *\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n *\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n *\n * @param string $foo\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n *\/\n",
                    "configuration": {
                        "groups": [
                            [
                                "deprecated",
                                "link",
                                "see",
                                "since"
                            ],
                            [
                                "author",
                                "copyright",
                                "license"
                            ],
                            [
                                "category",
                                "package",
                                "subpackage"
                            ],
                            [
                                "property",
                                "property-read",
                                "property-write"
                            ],
                            [
                                "param",
                                "return"
                            ]
                        ]
                    }
                },
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n * @param string $foo\n *\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n * @custom Test!\n * @throws Exception|RuntimeException foo\n *\n * @param string $foo\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n *\/\n",
                    "configuration": {
                        "groups": [
                            [
                                "author",
                                "throws",
                                "custom"
                            ],
                            [
                                "return",
                                "param"
                            ]
                        ]
                    }
                },
                {
                    "from": "<?php\n\/**\n * @ORM\\Id\n *\n * @ORM\\GeneratedValue\n * @Assert\\NotNull\n *\n * @Assert\\Type(\"string\")\n *\/\n",
                    "to": "<?php\n\/**\n * @ORM\\Id\n * @ORM\\GeneratedValue\n *\n * @Assert\\NotNull\n * @Assert\\Type(\"string\")\n *\/\n",
                    "configuration": {
                        "groups": [
                            [
                                "ORM\\*"
                            ],
                            [
                                "Assert\\*"
                            ]
                        ]
                    }
                },
                {
                    "from": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n * @param string $foo\n *\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n *\/\n",
                    "to": "<?php\n\/**\n * Hello there!\n *\n * @author John Doe\n *\n * @custom Test!\n *\n * @throws Exception|RuntimeException foo\n * @param string $foo\n * @param bool   $bar Bar\n * @return int  Return the number of changes.\n *\/\n",
                    "configuration": {
                        "skip_unlisted_annotations": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSeparationFixer"
        },
        "phpdoc_single_line_var_spacing": {
            "summary": "Single line `@var` PHPDoc should have proper spacing.",
            "codeSamples": [
                {
                    "from": "<?php \/**@var   MyClass   $a   *\/\n$a = test();\n",
                    "to": "<?php \/** @var MyClass $a *\/\n$a = test();\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSingleLineVarSpacingFixer"
        },
        "phpdoc_summary": {
            "summary": "PHPDoc summary should end in either a full stop, exclamation mark, or question mark.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Foo function is great\n *\/\nfunction foo () {}\n",
                    "to": "<?php\n\/**\n * Foo function is great.\n *\/\nfunction foo () {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocSummaryFixer"
        },
        "phpdoc_tag_casing": {
            "configuration": [
                {
                    "name": "tags",
                    "description": "List of tags to fix with their expected casing.",
                    "defaultValue": [
                        "inheritDoc"
                    ],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Fixes casing of PHPDoc tags.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @inheritdoc\n *\/\n",
                    "to": "<?php\n\/**\n * @inheritDoc\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @inheritdoc\n * @Foo\n *\/\n",
                    "to": "<?php\n\/**\n * @inheritdoc\n * @foo\n *\/\n",
                    "configuration": {
                        "tags": [
                            "foo"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTagCasingFixer"
        },
        "phpdoc_tag_type": {
            "configuration": [
                {
                    "name": "tags",
                    "description": "The list of tags to fix.",
                    "defaultValue": {
                        "api": "annotation",
                        "author": "annotation",
                        "copyright": "annotation",
                        "deprecated": "annotation",
                        "example": "annotation",
                        "global": "annotation",
                        "inheritDoc": "annotation",
                        "internal": "annotation",
                        "license": "annotation",
                        "method": "annotation",
                        "package": "annotation",
                        "param": "annotation",
                        "property": "annotation",
                        "return": "annotation",
                        "see": "annotation",
                        "since": "annotation",
                        "throws": "annotation",
                        "todo": "annotation",
                        "uses": "annotation",
                        "var": "annotation",
                        "version": "annotation"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Forces PHPDoc tags to be either regular annotations or inline.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * {@api}\n *\/\n",
                    "to": "<?php\n\/**\n * @api\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @inheritdoc\n *\/\n",
                    "to": "<?php\n\/**\n * {@inheritdoc}\n *\/\n",
                    "configuration": {
                        "tags": {
                            "inheritdoc": "inline"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTagTypeFixer"
        },
        "phpdoc_to_comment": {
            "configuration": [
                {
                    "name": "ignored_tags",
                    "description": "List of ignored tags (matched case insensitively).",
                    "defaultValue": [],
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Docblocks should only be used on structural elements.",
            "codeSamples": [
                {
                    "from": "<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/** This should be a comment *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n",
                    "to": "<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/* This should be a comment *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n"
                },
                {
                    "from": "<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/** This should be a comment *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n\n\/** @todo This should be a PHPDoc as the tag is on \"ignored_tags\" list *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n",
                    "to": "<?php\n$first = true;\/\/ needed because by default first docblock is never fixed.\n\n\/* This should be a comment *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n\n\/** @todo This should be a PHPDoc as the tag is on \"ignored_tags\" list *\/\nforeach($connections as $key => $sqlite) {\n    $sqlite->open($path);\n}\n",
                    "configuration": {
                        "ignored_tags": [
                            "todo"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocToCommentFixer"
        },
        "phpdoc_to_param_type": {
            "risky": true,
            "configuration": [
                {
                    "name": "scalar_types",
                    "description": "Fix also scalar types; may have unexpected behaviour due to PHP bad type coercion system.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "EXPERIMENTAL: Takes `@param` annotations of non-mixed types and adjusts accordingly the function signature. Requires PHP >= 7.0.",
            "riskyDescription": "This rule is EXPERIMENTAL and [1] is not covered with backward compatibility promise. [2] `@param` annotation is mandatory for the fixer to make changes, signatures of methods without it (no docblock, inheritdocs) will not be fixed. [3] Manual actions are required if inherited signatures are not properly documented.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\/**\n * @param string $foo\n * @param string|null $bar\n *\/\nfunction f($foo, $bar)\n{}\n",
                    "to": "<?php\n\n\/**\n * @param string $foo\n * @param string|null $bar\n *\/\nfunction f(string $foo, ?string $bar)\n{}\n"
                },
                {
                    "from": "<?php\n\n\/** @param Foo $foo *\/\nfunction foo($foo) {}\n\/** @param string $foo *\/\nfunction bar($foo) {}\n",
                    "to": "<?php\n\n\/** @param Foo $foo *\/\nfunction foo(Foo $foo) {}\n\/** @param string $foo *\/\nfunction bar($foo) {}\n",
                    "configuration": {
                        "scalar_types": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\PhpdocToParamTypeFixer"
        },
        "phpdoc_to_property_type": {
            "risky": true,
            "configuration": [
                {
                    "name": "scalar_types",
                    "description": "Fix also scalar types; may have unexpected behaviour due to PHP bad type coercion system.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "EXPERIMENTAL: Takes `@var` annotation of non-mixed types and adjusts accordingly the property signature. Requires PHP >= 7.4.",
            "riskyDescription": "This rule is EXPERIMENTAL and [1] is not covered with backward compatibility promise. [2] `@var` annotation is mandatory for the fixer to make changes, signatures of properties without it (no docblock) will not be fixed. [3] Manual actions might be required for newly typed properties that are read before initialization.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Foo {\n    \/** @var int *\/\n    private $foo;\n    \/** @var \\Traversable *\/\n    private $bar;\n}\n",
                    "to": "<?php\nclass Foo {\n    \/** @var int *\/\n    private int $foo;\n    \/** @var \\Traversable *\/\n    private \\Traversable $bar;\n}\n"
                },
                {
                    "from": "<?php\nclass Foo {\n    \/** @var int *\/\n    private $foo;\n    \/** @var \\Traversable *\/\n    private $bar;\n}\n",
                    "to": "<?php\nclass Foo {\n    \/** @var int *\/\n    private $foo;\n    \/** @var \\Traversable *\/\n    private \\Traversable $bar;\n}\n",
                    "configuration": {
                        "scalar_types": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\PhpdocToPropertyTypeFixer"
        },
        "phpdoc_to_return_type": {
            "risky": true,
            "configuration": [
                {
                    "name": "scalar_types",
                    "description": "Fix also scalar types; may have unexpected behaviour due to PHP bad type coercion system.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "EXPERIMENTAL: Takes `@return` annotation of non-mixed types and adjusts accordingly the function signature.",
            "riskyDescription": "This rule is EXPERIMENTAL and [1] is not covered with backward compatibility promise. [2] `@return` annotation is mandatory for the fixer to make changes, signatures of methods without it (no docblock, inheritdocs) will not be fixed. [3] Manual actions are required if inherited signatures are not properly documented.",
            "codeSamples": [
                {
                    "from": "<?php\n\n\/** @return \\My\\Bar *\/\nfunction f1()\n{}\n\n\/** @return void *\/\nfunction f2()\n{}\n\n\/** @return object *\/\nfunction my_foo()\n{}\n",
                    "to": "<?php\n\n\/** @return \\My\\Bar *\/\nfunction f1(): \\My\\Bar\n{}\n\n\/** @return void *\/\nfunction f2(): void\n{}\n\n\/** @return object *\/\nfunction my_foo(): object\n{}\n"
                },
                {
                    "from": "<?php\n\n\/** @return Foo *\/\nfunction foo() {}\n\/** @return string *\/\nfunction bar() {}\n",
                    "to": "<?php\n\n\/** @return Foo *\/\nfunction foo(): Foo {}\n\/** @return string *\/\nfunction bar() {}\n",
                    "configuration": {
                        "scalar_types": false
                    }
                },
                {
                    "from": "<?php\nfinal class Foo {\n    \/**\n     * @return static\n     *\/\n    public function create($prototype) {\n        return new static($prototype);\n    }\n}\n",
                    "to": "<?php\nfinal class Foo {\n    \/**\n     * @return static\n     *\/\n    public function create($prototype): static {\n        return new static($prototype);\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\PhpdocToReturnTypeFixer"
        },
        "phpdoc_trim": {
            "summary": "PHPDoc should start and end with content, excluding the very first and last line of the docblocks.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n *\n * Foo must be final class.\n *\n *\n *\/\nfinal class Foo {}\n",
                    "to": "<?php\n\/**\n * Foo must be final class.\n *\/\nfinal class Foo {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTrimFixer"
        },
        "phpdoc_trim_consecutive_blank_line_separation": {
            "summary": "Removes extra blank lines after summary and after description in PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * Summary.\n *\n *\n * Description that contain 4 lines,\n *\n *\n * while 2 of them are blank!\n *\n *\n * @param string $foo\n *\n *\n * @dataProvider provideFixCases\n *\/\nfunction fnc($foo) {}\n",
                    "to": "<?php\n\/**\n * Summary.\n *\n * Description that contain 4 lines,\n *\n *\n * while 2 of them are blank!\n *\n * @param string $foo\n *\n * @dataProvider provideFixCases\n *\/\nfunction fnc($foo) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTrimConsecutiveBlankLineSeparationFixer"
        },
        "phpdoc_types": {
            "configuration": [
                {
                    "name": "groups",
                    "description": "Type groups to fix.",
                    "defaultValue": [
                        "simple",
                        "alias",
                        "meta"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "alias",
                            "meta",
                            "simple"
                        ]
                    ]
                }
            ],
            "summary": "The correct case must be used for standard PHP types in PHPDoc.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param STRING|String[] $bar\n *\n * @return inT[]\n *\/\n",
                    "to": "<?php\n\/**\n * @param string|string[] $bar\n *\n * @return int[]\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @param BOOL $foo\n *\n * @return MIXED\n *\/\n",
                    "to": "<?php\n\/**\n * @param bool $foo\n *\n * @return MIXED\n *\/\n",
                    "configuration": {
                        "groups": [
                            "simple",
                            "alias"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTypesFixer"
        },
        "phpdoc_types_order": {
            "configuration": [
                {
                    "name": "case_sensitive",
                    "description": "Whether the sorting should be case sensitive.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "null_adjustment",
                    "description": "Forces the position of `null` (overrides `sort_algorithm`).",
                    "defaultValue": "always_first",
                    "allowedValues": [
                        "always_first",
                        "always_last",
                        "none"
                    ]
                },
                {
                    "name": "sort_algorithm",
                    "description": "The sorting algorithm to apply.",
                    "defaultValue": "alpha",
                    "allowedValues": [
                        "alpha",
                        "none"
                    ]
                }
            ],
            "summary": "Sorts PHPDoc types.",
            "codeSamples": [
                {
                    "from": "<?php\n\/**\n * @param string|null $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param null|string $bar\n *\/\n"
                },
                {
                    "from": "<?php\n\/**\n * @param null|string $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param string|null $bar\n *\/\n",
                    "configuration": {
                        "null_adjustment": "always_last"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param null|\\Foo|int|string $bar\n *\/\n",
                    "configuration": {
                        "sort_algorithm": "alpha"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param \\Foo|int|string|null $bar\n *\/\n",
                    "configuration": {
                        "sort_algorithm": "alpha",
                        "null_adjustment": "always_last"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param null|string|int|\\Foo $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param \\Foo|int|null|string $bar\n *\/\n",
                    "configuration": {
                        "sort_algorithm": "alpha",
                        "null_adjustment": "none"
                    }
                },
                {
                    "from": "<?php\n\/**\n * @param Aaa|AA $bar\n *\/\n",
                    "to": "<?php\n\/**\n * @param AA|Aaa $bar\n *\/\n",
                    "configuration": {
                        "case_sensitive": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocTypesOrderFixer"
        },
        "phpdoc_var_annotation_correct_order": {
            "summary": "`@var` and `@type` annotations must have type and name in the correct order.",
            "codeSamples": [
                {
                    "from": "<?php\n\/** @var $foo int *\/\n$foo = 2 + 2;\n",
                    "to": "<?php\n\/** @var int $foo *\/\n$foo = 2 + 2;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocVarAnnotationCorrectOrderFixer"
        },
        "phpdoc_var_without_name": {
            "summary": "`@var` and `@type` annotations of classy properties should not contain the name.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Foo\n{\n    \/**\n     * @var int $bar\n     *\/\n    public $bar;\n\n    \/**\n     * @type $baz float\n     *\/\n    public $baz;\n}\n",
                    "to": "<?php\nfinal class Foo\n{\n    \/**\n     * @var int\n     *\/\n    public $bar;\n\n    \/**\n     * @type float\n     *\/\n    public $baz;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Phpdoc\\PhpdocVarWithoutNameFixer"
        },
        "pow_to_exponentiation": {
            "risky": true,
            "summary": "Converts `pow` to the `**` operator.",
            "riskyDescription": "Risky when the function `pow` is overridden.",
            "codeSamples": [
                {
                    "from": "<?php\n pow($a, 1);\n",
                    "to": "<?php\n $a** 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\PowToExponentiationFixer"
        },
        "protected_to_private": {
            "summary": "Converts `protected` variables and methods to `private` where possible.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n    protected $a;\n\n    protected function test()\n    {\n    }\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    private $a;\n\n    private function test()\n    {\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\ProtectedToPrivateFixer"
        },
        "psr_autoloading": {
            "risky": true,
            "configuration": [
                {
                    "name": "dir",
                    "description": "If provided, the directory where the project code is placed.",
                    "defaultValue": null,
                    "allowedTypes": [
                        "null",
                        "string"
                    ]
                }
            ],
            "summary": "Classes must be in a path that matches their namespace, be at least one namespace deep and the class name should match the file name.",
            "riskyDescription": "This fixer may change your class name, which will break the code that depends on the old name.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n",
                    "to": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass PsrAutoloadingFixer {}\n"
                },
                {
                    "from": "<?php\nnamespace PhpCsFixer\\FIXER\\Basic;\nclass InvalidName {}\n",
                    "to": "<?php\nnamespace PhpCsFixer\\Fixer\\Basic;\nclass PsrAutoloadingFixer {}\n",
                    "configuration": {
                        "dir": ".\/src"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\PsrAutoloadingFixer"
        },
        "random_api_migration": {
            "risky": true,
            "configuration": [
                {
                    "name": "replacements",
                    "description": "Mapping between replaced functions with the new ones.",
                    "defaultValue": {
                        "getrandmax": "mt_getrandmax",
                        "rand": "mt_rand",
                        "srand": "mt_srand"
                    },
                    "allowedTypes": [
                        "array"
                    ]
                }
            ],
            "summary": "Replaces `rand`, `srand`, `getrandmax` functions calls with their `mt_*` analogs or `random_int`.",
            "riskyDescription": "Risky when the configured functions are overridden. Or when relying on the seed based generating of the numbers.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = getrandmax();\n$a = rand($b, $c);\n$a = srand();\n",
                    "to": "<?php\n$a = mt_getrandmax();\n$a = mt_rand($b, $c);\n$a = mt_srand();\n"
                },
                {
                    "from": "<?php\n$a = getrandmax();\n$a = rand($b, $c);\n$a = srand();\n",
                    "to": "<?php\n$a = mt_getrandmax();\n$a = rand($b, $c);\n$a = srand();\n",
                    "configuration": {
                        "replacements": {
                            "getrandmax": "mt_getrandmax"
                        }
                    }
                },
                {
                    "from": "<?php $a = rand($b, $c);\n",
                    "to": "<?php $a = random_int($b, $c);\n",
                    "configuration": {
                        "replacements": {
                            "rand": "random_int"
                        }
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\RandomApiMigrationFixer"
        },
        "regular_callable_call": {
            "risky": true,
            "summary": "Callables must be called without using `call_user_func*` when possible.",
            "riskyDescription": "Risky when the `call_user_func` or `call_user_func_array` function is overridden or when are used in constructions that should be avoided, like `call_user_func_array('foo', ['bar' => 'baz'])` or `call_user_func($foo, $foo = 'bar')`.",
            "codeSamples": [
                {
                    "from": "<?php\n    call_user_func(\"var_dump\", 1, 2);\n\n    call_user_func(\"Bar\\Baz::d\", 1, 2);\n\n    call_user_func_array($callback, [1, 2]);\n",
                    "to": "<?php\n    var_dump(1, 2);\n\n    Bar\\Baz::d(1, 2);\n\n    $callback(...[1, 2]);\n"
                },
                {
                    "from": "<?php\ncall_user_func(function ($a, $b) { var_dump($a, $b); }, 1, 2);\n\ncall_user_func(static function ($a, $b) { var_dump($a, $b); }, 1, 2);\n",
                    "to": "<?php\n(function ($a, $b) { var_dump($a, $b); })(1, 2);\n\n(static function ($a, $b) { var_dump($a, $b); })(1, 2);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\RegularCallableCallFixer"
        },
        "return_assignment": {
            "summary": "Local, dynamic and directly referenced variables should not be assigned and directly returned by a function or method.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction a() {\n    $a = 1;\n    return $a;\n}\n",
                    "to": "<?php\nfunction a() {\n    return 1;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ReturnNotation\\ReturnAssignmentFixer"
        },
        "return_to_yield_from": {
            "summary": "If the function explicitly returns an array, and has the return type `iterable`, then `yield from` must be used instead of `return`.",
            "codeSamples": [
                {
                    "from": "<?php function giveMeData(): iterable {\n    return [1, 2, 3];\n}\n",
                    "to": "<?php function giveMeData(): iterable {\n    yield from [1, 2, 3];\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\ReturnToYieldFromFixer"
        },
        "return_type_declaration": {
            "configuration": [
                {
                    "name": "space_before",
                    "description": "Spacing to apply before colon.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "one",
                        "none"
                    ]
                }
            ],
            "summary": "Adjust spacing around colon in return type declarations and backed enum types.",
            "description": "Rule is applied only in a PHP 7+ environment.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo(int $a):string {};\n",
                    "to": "<?php\nfunction foo(int $a): string {};\n"
                },
                {
                    "from": "<?php\nfunction foo(int $a):string {};\n",
                    "to": "<?php\nfunction foo(int $a): string {};\n",
                    "configuration": {
                        "space_before": "none"
                    }
                },
                {
                    "from": "<?php\nfunction foo(int $a):string {};\n",
                    "to": "<?php\nfunction foo(int $a) : string {};\n",
                    "configuration": {
                        "space_before": "one"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\ReturnTypeDeclarationFixer"
        },
        "self_accessor": {
            "risky": true,
            "summary": "Inside class or interface element `self` should be preferred to the class name itself.",
            "riskyDescription": "Risky when using dynamic calls like get_called_class() or late static binding.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n    const BAZ = 1;\n    const BAR = Sample::BAZ;\n\n    public function getBar()\n    {\n        return Sample::BAR;\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    const BAZ = 1;\n    const BAR = self::BAZ;\n\n    public function getBar()\n    {\n        return self::BAR;\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\SelfAccessorFixer"
        },
        "self_static_accessor": {
            "summary": "Inside an enum or `final`\/anonymous class, `self` should be preferred over `static`.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Sample\n{\n    private static $A = 1;\n\n    public function getBar()\n    {\n        return static::class.static::test().static::$A;\n    }\n\n    private static function test()\n    {\n        return 'test';\n    }\n}\n",
                    "to": "<?php\nfinal class Sample\n{\n    private static $A = 1;\n\n    public function getBar()\n    {\n        return self::class.self::test().self::$A;\n    }\n\n    private static function test()\n    {\n        return 'test';\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class Foo\n{\n    public function bar()\n    {\n        return new static();\n    }\n}\n",
                    "to": "<?php\nfinal class Foo\n{\n    public function bar()\n    {\n        return new self();\n    }\n}\n"
                },
                {
                    "from": "<?php\nfinal class Foo\n{\n    public function isBar()\n    {\n        return $foo instanceof static;\n    }\n}\n",
                    "to": "<?php\nfinal class Foo\n{\n    public function isBar()\n    {\n        return $foo instanceof self;\n    }\n}\n"
                },
                {
                    "from": "<?php\n$a = new class() {\n    public function getBar()\n    {\n        return static::class;\n    }\n};\n",
                    "to": "<?php\n$a = new class() {\n    public function getBar()\n    {\n        return self::class;\n    }\n};\n"
                },
                {
                    "from": "<?php\nenum Foo\n{\n    public const A = 123;\n\n    public static function bar(): void\n    {\n        echo static::A;\n    }\n}\n",
                    "to": "<?php\nenum Foo\n{\n    public const A = 123;\n\n    public static function bar(): void\n    {\n        echo self::A;\n    }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\SelfStaticAccessorFixer"
        },
        "semicolon_after_instruction": {
            "summary": "Instructions must be terminated with a semicolon.",
            "codeSamples": [
                {
                    "from": "<?php echo 1 ?>\n",
                    "to": "<?php echo 1; ?>\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\SemicolonAfterInstructionFixer"
        },
        "set_type_to_cast": {
            "risky": true,
            "summary": "Cast shall be used, not `settype`.",
            "riskyDescription": "Risky when the `settype` function is overridden or when used as the 2nd or 3rd expression in a `for` loop .",
            "codeSamples": [
                {
                    "from": "<?php\nsettype($foo, \"integer\");\nsettype($bar, \"string\");\nsettype($bar, \"null\");\n",
                    "to": "<?php\n$foo = (int) $foo;\n$bar = (string) $bar;\n$bar = null;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Alias\\SetTypeToCastFixer"
        },
        "short_scalar_cast": {
            "summary": "Cast `(boolean)` and `(integer)` should be written as `(bool)` and `(int)`, `(double)` and `(real)` as `(float)`, `(binary)` as `(string)`.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = (boolean) $b;\n$a = (integer) $b;\n$a = (double) $b;\n\n$a = (binary) $b;\n",
                    "to": "<?php\n$a = (bool) $b;\n$a = (int) $b;\n$a = (float) $b;\n\n$a = (string) $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\CastNotation\\ShortScalarCastFixer"
        },
        "simple_to_complex_string_variable": {
            "summary": "Converts explicit variables in double-quoted strings and heredoc syntax from simple to complex format (`${` to `{$`).",
            "description": "Doesn't touch implicit variables. Works together nicely with `explicit_string_variable`.",
            "codeSamples": [
                {
                    "from": "<?php\n$name = 'World';\necho \"Hello ${name}!\";\n",
                    "to": "<?php\n$name = 'World';\necho \"Hello {$name}!\";\n"
                },
                {
                    "from": "<?php\n$name = 'World';\necho <<<TEST\nHello ${name}!\nTEST;\n",
                    "to": "<?php\n$name = 'World';\necho <<<TEST\nHello {$name}!\nTEST;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\SimpleToComplexStringVariableFixer"
        },
        "simplified_if_return": {
            "summary": "Simplify `if` control structures that return the boolean result of their condition.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($foo) { return true; } return false;\n",
                    "to": "<?php\nreturn (bool) ($foo)      ;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\SimplifiedIfReturnFixer"
        },
        "simplified_null_return": {
            "summary": "A return statement wishing to return `void` should not return `null`.",
            "codeSamples": [
                {
                    "from": "<?php return null;\n",
                    "to": "<?php return;\n"
                },
                {
                    "from": "<?php\nfunction foo() { return null; }\nfunction bar(): int { return null; }\nfunction baz(): ?int { return null; }\nfunction xyz(): void { return null; }\n",
                    "to": "<?php\nfunction foo() { return; }\nfunction bar(): int { return null; }\nfunction baz(): ?int { return null; }\nfunction xyz(): void { return; }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ReturnNotation\\SimplifiedNullReturnFixer"
        },
        "single_blank_line_at_eof": {
            "summary": "A PHP file without end tag must always end with a single empty line feed.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = 1;",
                    "to": "<?php\n$a = 1;\n"
                },
                {
                    "from": "<?php\n$a = 1;\n\n",
                    "to": "<?php\n$a = 1;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\SingleBlankLineAtEofFixer"
        },
        "single_blank_line_before_namespace": {
            "summary": "There should be exactly one blank line before a namespace declaration.",
            "codeSamples": [
                {
                    "from": "<?php  namespace A {}\n",
                    "to": "<?php\n\nnamespace A {}\n"
                },
                {
                    "from": "<?php\n\n\nnamespace A{}\n",
                    "to": "<?php\n\nnamespace A{}\n"
                }
            ],
            "deprecated_switchTo": [
                "blank_lines_before_namespace"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\NamespaceNotation\\SingleBlankLineBeforeNamespaceFixer"
        },
        "single_class_element_per_statement": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "List of strings which element should be modified.",
                    "defaultValue": [
                        "const",
                        "property"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "const",
                            "property"
                        ]
                    ]
                }
            ],
            "summary": "There MUST NOT be more than one property or constant declared per statement.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n",
                    "to": "<?php\nfinal class Example\n{\n    const FOO_1 = 1;\n    const FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n"
                },
                {
                    "from": "<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3), $bar2 = [1,2,3];\n}\n",
                    "to": "<?php\nfinal class Example\n{\n    const FOO_1 = 1, FOO_2 = 2;\n    private static $bar1 = array(1,2,3);\n    private static $bar2 = [1,2,3];\n}\n",
                    "configuration": {
                        "elements": [
                            "property"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\SingleClassElementPerStatementFixer"
        },
        "single_import_per_statement": {
            "configuration": [
                {
                    "name": "group_to_single_imports",
                    "description": "Whether to change group imports into single imports.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "There MUST be one use keyword per declaration.",
            "codeSamples": [
                {
                    "from": "<?php\nuse Foo, Sample, Sample\\Sample as Sample2;\n",
                    "to": "<?php\nuse Foo;\nuse Sample;\nuse Sample\\Sample as Sample2;\n"
                },
                {
                    "from": "<?php\nuse Space\\Models\\ {\n    TestModelA,\n    TestModelB,\n    TestModel,\n};\n",
                    "to": "<?php\nuse Space\\Models\\TestModelA;\nuse Space\\Models\\TestModelB;\nuse Space\\Models\\TestModel;\n",
                    "configuration": {
                        "group_to_single_imports": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\SingleImportPerStatementFixer"
        },
        "single_line_after_imports": {
            "summary": "Each namespace use MUST go on its own line and there MUST be one blank line after the use statements block.",
            "codeSamples": [
                {
                    "from": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\nfinal class Example\n{\n}\n",
                    "to": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\nfinal class Example\n{\n}\n"
                },
                {
                    "from": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\n\nfinal class Example\n{\n}\n",
                    "to": "<?php\nnamespace Foo;\n\nuse Bar;\nuse Baz;\n\nfinal class Example\n{\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Import\\SingleLineAfterImportsFixer"
        },
        "single_line_comment_spacing": {
            "summary": "Single-line comments must have proper spacing.",
            "codeSamples": [
                {
                    "from": "<?php\n\/\/comment 1\n#comment 2\n\/*comment 3*\/\n",
                    "to": "<?php\n\/\/ comment 1\n# comment 2\n\/* comment 3 *\/\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\SingleLineCommentSpacingFixer"
        },
        "single_line_comment_style": {
            "configuration": [
                {
                    "name": "comment_types",
                    "description": "List of comment types to fix.",
                    "defaultValue": [
                        "asterisk",
                        "hash"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "asterisk",
                            "hash"
                        ]
                    ]
                }
            ],
            "summary": "Single-line comments and multi-line comments with only one line of actual content should use the `\/\/` syntax.",
            "codeSamples": [
                {
                    "from": "<?php\n\/* asterisk comment *\/\n$a = 1;\n\n# hash comment\n$b = 2;\n\n\/*\n * multi-line\n * comment\n *\/\n$c = 3;\n",
                    "to": "<?php\n\/\/ asterisk comment\n$a = 1;\n\n\/\/ hash comment\n$b = 2;\n\n\/*\n * multi-line\n * comment\n *\/\n$c = 3;\n"
                },
                {
                    "from": "<?php\n\/* first comment *\/\n$a = 1;\n\n\/*\n * second comment\n *\/\n$b = 2;\n\n\/*\n * third\n * comment\n *\/\n$c = 3;\n",
                    "to": "<?php\n\/\/ first comment\n$a = 1;\n\n\/\/ second comment\n$b = 2;\n\n\/*\n * third\n * comment\n *\/\n$c = 3;\n",
                    "configuration": {
                        "comment_types": [
                            "asterisk"
                        ]
                    }
                },
                {
                    "from": "<?php # comment\n",
                    "to": "<?php \/\/ comment\n",
                    "configuration": {
                        "comment_types": [
                            "hash"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Comment\\SingleLineCommentStyleFixer"
        },
        "single_line_empty_body": {
            "summary": "Empty body of class, interface, trait, enum or function must be abbreviated as `{}` and placed on the same line as the previous symbol, separated by a single space.",
            "codeSamples": [
                {
                    "from": "<?php function foo(\n    int $x\n)\n{\n}\n",
                    "to": "<?php function foo(\n    int $x\n) {}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Basic\\SingleLineEmptyBodyFixer"
        },
        "single_line_throw": {
            "summary": "Throwing exception must be done in single line.",
            "codeSamples": [
                {
                    "from": "<?php\nthrow new Exception(\n    'Error.',\n    500\n);\n",
                    "to": "<?php\nthrow new Exception('Error.', 500);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\SingleLineThrowFixer"
        },
        "single_quote": {
            "configuration": [
                {
                    "name": "strings_containing_single_quote_chars",
                    "description": "Whether to fix double-quoted strings that contains single-quotes.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Convert double quotes to single quotes for simple strings.",
            "codeSamples": [
                {
                    "from": "<?php\n\n$a = \"sample\";\n$b = \"sample with 'single-quotes'\";\n",
                    "to": "<?php\n\n$a = 'sample';\n$b = \"sample with 'single-quotes'\";\n"
                },
                {
                    "from": "<?php\n\n$a = \"sample\";\n$b = \"sample with 'single-quotes'\";\n",
                    "to": "<?php\n\n$a = 'sample';\n$b = 'sample with \\'single-quotes\\'';\n",
                    "configuration": {
                        "strings_containing_single_quote_chars": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\SingleQuoteFixer"
        },
        "single_space_after_construct": {
            "configuration": [
                {
                    "name": "constructs",
                    "description": "List of constructs which must be followed by a single space.",
                    "defaultValue": [
                        "abstract",
                        "as",
                        "attribute",
                        "break",
                        "case",
                        "catch",
                        "class",
                        "clone",
                        "comment",
                        "const",
                        "const_import",
                        "continue",
                        "do",
                        "echo",
                        "else",
                        "elseif",
                        "enum",
                        "extends",
                        "final",
                        "finally",
                        "for",
                        "foreach",
                        "function",
                        "function_import",
                        "global",
                        "goto",
                        "if",
                        "implements",
                        "include",
                        "include_once",
                        "instanceof",
                        "insteadof",
                        "interface",
                        "match",
                        "named_argument",
                        "namespace",
                        "new",
                        "open_tag_with_echo",
                        "php_doc",
                        "php_open",
                        "print",
                        "private",
                        "protected",
                        "public",
                        "readonly",
                        "require",
                        "require_once",
                        "return",
                        "static",
                        "switch",
                        "throw",
                        "trait",
                        "try",
                        "use",
                        "use_lambda",
                        "use_trait",
                        "var",
                        "while",
                        "yield",
                        "yield_from"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "abstract",
                            "as",
                            "attribute",
                            "break",
                            "case",
                            "catch",
                            "class",
                            "clone",
                            "comment",
                            "const",
                            "const_import",
                            "continue",
                            "do",
                            "echo",
                            "else",
                            "elseif",
                            "enum",
                            "extends",
                            "final",
                            "finally",
                            "for",
                            "foreach",
                            "function",
                            "function_import",
                            "global",
                            "goto",
                            "if",
                            "implements",
                            "include",
                            "include_once",
                            "instanceof",
                            "insteadof",
                            "interface",
                            "match",
                            "named_argument",
                            "namespace",
                            "new",
                            "open_tag_with_echo",
                            "php_doc",
                            "php_open",
                            "print",
                            "private",
                            "protected",
                            "public",
                            "readonly",
                            "require",
                            "require_once",
                            "return",
                            "static",
                            "switch",
                            "throw",
                            "trait",
                            "try",
                            "type_colon",
                            "use",
                            "use_lambda",
                            "use_trait",
                            "var",
                            "while",
                            "yield",
                            "yield_from"
                        ]
                    ]
                }
            ],
            "summary": "Ensures a single space after language constructs.",
            "codeSamples": [
                {
                    "from": "<?php\n\nthrow  new  \\Exception();\n",
                    "to": "<?php\n\nthrow new \\Exception();\n"
                },
                {
                    "from": "<?php\n\necho  \"Hello!\";\n",
                    "to": "<?php\n\necho \"Hello!\";\n",
                    "configuration": {
                        "constructs": [
                            "echo"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nyield  from  baz();\n",
                    "to": "<?php\n\nyield from baz();\n",
                    "configuration": {
                        "constructs": [
                            "yield_from"
                        ]
                    }
                }
            ],
            "deprecated_switchTo": [
                "single_space_around_construct"
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\SingleSpaceAfterConstructFixer"
        },
        "single_space_around_construct": {
            "configuration": [
                {
                    "name": "constructs_contain_a_single_space",
                    "description": "List of constructs which must contain a single space.",
                    "defaultValue": [
                        "yield_from"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "yield_from"
                        ]
                    ]
                },
                {
                    "name": "constructs_followed_by_a_single_space",
                    "description": "List of constructs which must be followed by a single space.",
                    "defaultValue": [
                        "abstract",
                        "as",
                        "attribute",
                        "break",
                        "case",
                        "catch",
                        "class",
                        "clone",
                        "comment",
                        "const",
                        "const_import",
                        "continue",
                        "do",
                        "echo",
                        "else",
                        "elseif",
                        "enum",
                        "extends",
                        "final",
                        "finally",
                        "for",
                        "foreach",
                        "function",
                        "function_import",
                        "global",
                        "goto",
                        "if",
                        "implements",
                        "include",
                        "include_once",
                        "instanceof",
                        "insteadof",
                        "interface",
                        "match",
                        "named_argument",
                        "namespace",
                        "new",
                        "open_tag_with_echo",
                        "php_doc",
                        "php_open",
                        "print",
                        "private",
                        "protected",
                        "public",
                        "readonly",
                        "require",
                        "require_once",
                        "return",
                        "static",
                        "switch",
                        "throw",
                        "trait",
                        "try",
                        "type_colon",
                        "use",
                        "use_lambda",
                        "use_trait",
                        "var",
                        "while",
                        "yield",
                        "yield_from"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "abstract",
                            "as",
                            "attribute",
                            "break",
                            "case",
                            "catch",
                            "class",
                            "clone",
                            "comment",
                            "const",
                            "const_import",
                            "continue",
                            "do",
                            "echo",
                            "else",
                            "elseif",
                            "enum",
                            "extends",
                            "final",
                            "finally",
                            "for",
                            "foreach",
                            "function",
                            "function_import",
                            "global",
                            "goto",
                            "if",
                            "implements",
                            "include",
                            "include_once",
                            "instanceof",
                            "insteadof",
                            "interface",
                            "match",
                            "named_argument",
                            "namespace",
                            "new",
                            "open_tag_with_echo",
                            "php_doc",
                            "php_open",
                            "print",
                            "private",
                            "protected",
                            "public",
                            "readonly",
                            "require",
                            "require_once",
                            "return",
                            "static",
                            "switch",
                            "throw",
                            "trait",
                            "try",
                            "type_colon",
                            "use",
                            "use_lambda",
                            "use_trait",
                            "var",
                            "while",
                            "yield",
                            "yield_from"
                        ]
                    ]
                },
                {
                    "name": "constructs_preceded_by_a_single_space",
                    "description": "List of constructs which must be preceded by a single space.",
                    "defaultValue": [
                        "as",
                        "use_lambda"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "as",
                            "use_lambda"
                        ]
                    ]
                }
            ],
            "summary": "Ensures a single space after language constructs.",
            "codeSamples": [
                {
                    "from": "<?php\n\nthrow  new  \\Exception();\n",
                    "to": "<?php\n\nthrow new \\Exception();\n"
                },
                {
                    "from": "<?php\n\nfunction foo() { yield  from  baz(); }\n",
                    "to": "<?php\n\nfunction foo() { yield from baz(); }\n",
                    "configuration": {
                        "constructs_contain_a_single_space": [
                            "yield_from"
                        ],
                        "constructs_followed_by_a_single_space": [
                            "yield_from"
                        ]
                    }
                },
                {
                    "from": "<?php\n\n$foo = function& ()use($bar) {\n};\n",
                    "to": "<?php\n\n$foo = function& () use ($bar) {\n};\n",
                    "configuration": {
                        "constructs_preceded_by_a_single_space": [
                            "use_lambda"
                        ],
                        "constructs_followed_by_a_single_space": [
                            "use_lambda"
                        ]
                    }
                },
                {
                    "from": "<?php\n\necho  \"Hello!\";\n",
                    "to": "<?php\n\necho \"Hello!\";\n",
                    "configuration": {
                        "constructs_followed_by_a_single_space": [
                            "echo"
                        ]
                    }
                },
                {
                    "from": "<?php\n\nyield  from  baz();\n",
                    "to": "<?php\n\nyield from baz();\n",
                    "configuration": {
                        "constructs_followed_by_a_single_space": [
                            "yield_from"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\LanguageConstruct\\SingleSpaceAroundConstructFixer"
        },
        "single_trait_insert_per_statement": {
            "summary": "Each trait `use` must be done as single statement.",
            "codeSamples": [
                {
                    "from": "<?php\nfinal class Example\n{\n    use Foo, Bar;\n}\n",
                    "to": "<?php\nfinal class Example\n{\n    use Foo;use Bar;\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\SingleTraitInsertPerStatementFixer"
        },
        "space_after_semicolon": {
            "configuration": [
                {
                    "name": "remove_in_empty_for_expressions",
                    "description": "Whether spaces should be removed for empty `for` expressions.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "Fix whitespace after a semicolon.",
            "codeSamples": [
                {
                    "from": "<?php\n                        sample();     $test = 1;\n                        sample();$test = 2;\n                        for ( ;;++$sample) {\n                        }\n",
                    "to": "<?php\n                        sample(); $test = 1;\n                        sample(); $test = 2;\n                        for ( ; ; ++$sample) {\n                        }\n"
                },
                {
                    "from": "<?php\nfor ($i = 0; ; ++$i) {\n}\n",
                    "to": "<?php\nfor ($i = 0;; ++$i) {\n}\n",
                    "configuration": {
                        "remove_in_empty_for_expressions": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Semicolon\\SpaceAfterSemicolonFixer"
        },
        "spaces_inside_parentheses": {
            "configuration": [
                {
                    "name": "space",
                    "description": "Whether to have `single` or `none` space inside parentheses.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "none",
                        "single"
                    ]
                }
            ],
            "summary": "Parentheses must be declared using the configured whitespace.",
            "description": "By default there are not any additional spaces inside parentheses, however with `space=single` configuration option whitespace inside parentheses will be unified to single space.",
            "codeSamples": [
                {
                    "from": "<?php\nif ( $a ) {\n    foo( );\n}\n",
                    "to": "<?php\nif ($a) {\n    foo();\n}\n"
                },
                {
                    "from": "<?php\nfunction foo( $bar, $baz )\n{\n}\n",
                    "to": "<?php\nfunction foo($bar, $baz)\n{\n}\n",
                    "configuration": {
                        "space": "none"
                    }
                },
                {
                    "from": "<?php\nif ($a) {\n    foo( );\n}\n",
                    "to": "<?php\nif ( $a ) {\n    foo();\n}\n",
                    "configuration": {
                        "space": "single"
                    }
                },
                {
                    "from": "<?php\nfunction foo($bar, $baz)\n{\n}\n",
                    "to": "<?php\nfunction foo( $bar, $baz )\n{\n}\n",
                    "configuration": {
                        "space": "single"
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\SpacesInsideParenthesesFixer"
        },
        "standardize_increment": {
            "summary": "Increment and decrement operators should be used if possible.",
            "codeSamples": [
                {
                    "from": "<?php\n$i += 1;\n",
                    "to": "<?php\n++$i;\n"
                },
                {
                    "from": "<?php\n$i -= 1;\n",
                    "to": "<?php\n--$i;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\StandardizeIncrementFixer"
        },
        "standardize_not_equals": {
            "summary": "Replace all `<>` with `!=`.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = $b <> $c;\n",
                    "to": "<?php\n$a = $b != $c;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\StandardizeNotEqualsFixer"
        },
        "statement_indentation": {
            "summary": "Each statement must be indented.",
            "codeSamples": [
                {
                    "from": "<?php\nif ($baz == true) {\n  echo \"foo\";\n}\nelse {\n      echo \"bar\";\n}\n",
                    "to": "<?php\nif ($baz == true) {\n    echo \"foo\";\n}\nelse {\n    echo \"bar\";\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\StatementIndentationFixer"
        },
        "static_lambda": {
            "risky": true,
            "summary": "Lambdas not (indirectly) referencing `$this` must be declared `static`.",
            "riskyDescription": "Risky when using `->bindTo` on lambdas without referencing to `$this`.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = function () use ($b)\n{   echo $b;\n};\n",
                    "to": "<?php\n$a = static function () use ($b)\n{   echo $b;\n};\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\StaticLambdaFixer"
        },
        "strict_comparison": {
            "risky": true,
            "summary": "Comparisons should be strict.",
            "riskyDescription": "Changing comparisons to strict might change code behavior.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = 1== $b;\n",
                    "to": "<?php\n$a = 1=== $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Strict\\StrictComparisonFixer"
        },
        "strict_param": {
            "risky": true,
            "summary": "Functions should be used with `$strict` param set to `true`.",
            "description": "The functions \"array_keys\", \"array_search\", \"base64_decode\", \"in_array\" and \"mb_detect_encoding\" should be used with $strict param.",
            "riskyDescription": "Risky when the fixed function is overridden or if the code relies on non-strict usage.",
            "codeSamples": [
                {
                    "from": "<?php\n$a = array_keys($b);\n$a = array_search($b, $c);\n$a = base64_decode($b);\n$a = in_array($b, $c);\n$a = mb_detect_encoding($b, $c);\n",
                    "to": "<?php\n$a = array_keys($b);\n$a = array_search($b, $c, true);\n$a = base64_decode($b, true);\n$a = in_array($b, $c, true);\n$a = mb_detect_encoding($b, $c, true);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Strict\\StrictParamFixer"
        },
        "string_length_to_empty": {
            "risky": true,
            "summary": "String tests for empty must be done against `''`, not with `strlen`.",
            "riskyDescription": "Risky when `strlen` is overridden, when called using a `stringable` object, also no longer triggers warning when called using non-string(able).",
            "codeSamples": [
                {
                    "from": "<?php $a = 0 === strlen($b) || \\STRLEN($c) < 1;\n",
                    "to": "<?php $a = '' === $b || $c === '';\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\StringLengthToEmptyFixer"
        },
        "string_line_ending": {
            "risky": true,
            "summary": "All multi-line strings must use correct line ending.",
            "riskyDescription": "Changing the line endings of multi-line strings might affect string comparisons and outputs.",
            "codeSamples": [
                {
                    "from": "<?php $a = 'my\r\nmulti\nline\r\nstring';\r\n",
                    "to": "<?php $a = 'my\nmulti\nline\nstring';\r\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\StringNotation\\StringLineEndingFixer"
        },
        "switch_case_semicolon_to_colon": {
            "summary": "A case should be followed by a colon and not a semicolon.",
            "codeSamples": [
                {
                    "from": "<?php\n    switch ($a) {\n        case 1;\n            break;\n        default;\n            break;\n    }\n",
                    "to": "<?php\n    switch ($a) {\n        case 1:\n            break;\n        default:\n            break;\n    }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\SwitchCaseSemicolonToColonFixer"
        },
        "switch_case_space": {
            "summary": "Removes extra spaces between colon and case value.",
            "codeSamples": [
                {
                    "from": "<?php\n    switch($a) {\n        case 1   :\n            break;\n        default     :\n            return 2;\n    }\n",
                    "to": "<?php\n    switch($a) {\n        case 1:\n            break;\n        default:\n            return 2;\n    }\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\SwitchCaseSpaceFixer"
        },
        "switch_continue_to_break": {
            "summary": "Switch case must not be ended with `continue` but with `break`.",
            "codeSamples": [
                {
                    "from": "<?php\nswitch ($foo) {\n    case 1:\n        continue;\n}\n",
                    "to": "<?php\nswitch ($foo) {\n    case 1:\n        break;\n}\n"
                },
                {
                    "from": "<?php\nswitch ($foo) {\n    case 1:\n        while($bar) {\n            do {\n                continue 3;\n            } while(false);\n\n            if ($foo + 1 > 3) {\n                continue;\n            }\n\n            continue 2;\n        }\n}\n",
                    "to": "<?php\nswitch ($foo) {\n    case 1:\n        while($bar) {\n            do {\n                break 3;\n            } while(false);\n\n            if ($foo + 1 > 3) {\n                continue;\n            }\n\n            break 2;\n        }\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\SwitchContinueToBreakFixer"
        },
        "ternary_operator_spaces": {
            "summary": "Standardize spaces around ternary operator.",
            "codeSamples": [
                {
                    "from": "<?php $a = $a   ?1 :0;\n",
                    "to": "<?php $a = $a ? 1 : 0;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\TernaryOperatorSpacesFixer"
        },
        "ternary_to_elvis_operator": {
            "risky": true,
            "summary": "Use the Elvis operator `?:` where possible.",
            "riskyDescription": "Risky when relying on functions called on both sides of the `?` operator.",
            "codeSamples": [
                {
                    "from": "<?php\n$foo = $foo ? $foo : 1;\n",
                    "to": "<?php\n$foo = $foo ?  : 1;\n"
                },
                {
                    "from": "<?php $foo = $bar[a()] ? $bar[a()] : 1; # \"risky\" sample, \"a()\" only gets called once after fixing\n",
                    "to": "<?php $foo = $bar[a()] ?  : 1; # \"risky\" sample, \"a()\" only gets called once after fixing\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\TernaryToElvisOperatorFixer"
        },
        "ternary_to_null_coalescing": {
            "summary": "Use `null` coalescing operator `??` where possible. Requires PHP >= 7.0.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = isset($a) ? $a : $b;\n",
                    "to": "<?php\n$sample = $a ?? $b;\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\TernaryToNullCoalescingFixer"
        },
        "trailing_comma_in_multiline": {
            "configuration": [
                {
                    "name": "after_heredoc",
                    "description": "Whether a trailing comma should also be placed after heredoc end.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "elements",
                    "description": "Where to fix multiline trailing comma (PHP >= 8.0 for `parameters` and `match`).",
                    "defaultValue": [
                        "arrays"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "arguments",
                            "arrays",
                            "match",
                            "parameters"
                        ]
                    ]
                }
            ],
            "summary": "Multi-line arrays, arguments list, parameters list and `match` expressions must have a trailing comma.",
            "codeSamples": [
                {
                    "from": "<?php\narray(\n    1,\n    2\n);\n",
                    "to": "<?php\narray(\n    1,\n    2,\n);\n"
                },
                {
                    "from": "<?php\n    $x = [\n        'foo',\n        <<<EOD\n            bar\n            EOD\n    ];\n",
                    "to": "<?php\n    $x = [\n        'foo',\n        <<<EOD\n            bar\n            EOD,\n    ];\n",
                    "configuration": {
                        "after_heredoc": true
                    }
                },
                {
                    "from": "<?php\nfoo(\n    1,\n    2\n);\n",
                    "to": "<?php\nfoo(\n    1,\n    2,\n);\n",
                    "configuration": {
                        "elements": [
                            "arguments"
                        ]
                    }
                },
                {
                    "from": "<?php\nfunction foo(\n    $x,\n    $y\n)\n{\n}\n",
                    "to": "<?php\nfunction foo(\n    $x,\n    $y,\n)\n{\n}\n",
                    "configuration": {
                        "elements": [
                            "parameters"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\TrailingCommaInMultilineFixer"
        },
        "trim_array_spaces": {
            "summary": "Arrays should be formatted like function\/method arguments, without leading or trailing single line space.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = array( );\n$sample = array( 'a', 'b' );\n",
                    "to": "<?php\n$sample = array();\n$sample = array('a', 'b');\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\TrimArraySpacesFixer"
        },
        "type_declaration_spaces": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "Structural elements where the spacing after the type declaration should be fixed.",
                    "defaultValue": [
                        "function",
                        "property"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "function",
                            "property"
                        ]
                    ]
                }
            ],
            "summary": "Ensure single space between a variable and its type declaration in function arguments and properties.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Bar\n{\n    private string    $a;\n    private bool   $b;\n\n    public function __invoke(array   $c) {}\n}\n",
                    "to": "<?php\nclass Bar\n{\n    private string $a;\n    private bool $b;\n\n    public function __invoke(array $c) {}\n}\n"
                },
                {
                    "from": "<?php\nclass Foo\n{\n    public int   $bar;\n\n    public function baz(string     $a)\n    {\n        return fn(bool    $c): string => (string) $c;\n    }\n}\n",
                    "to": "<?php\nclass Foo\n{\n    public int   $bar;\n\n    public function baz(string $a)\n    {\n        return fn(bool $c): string => (string) $c;\n    }\n}\n",
                    "configuration": {
                        "elements": [
                            "function"
                        ]
                    }
                },
                {
                    "from": "<?php\nclass Foo\n{\n    public int   $bar;\n\n    public function baz(string     $a) {}\n}\n",
                    "to": "<?php\nclass Foo\n{\n    public int $bar;\n\n    public function baz(string     $a) {}\n}\n",
                    "configuration": {
                        "elements": [
                            "property"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\TypeDeclarationSpacesFixer"
        },
        "types_spaces": {
            "configuration": [
                {
                    "name": "space",
                    "description": "Spacing to apply around union type and intersection type operators.",
                    "defaultValue": "none",
                    "allowedValues": [
                        "none",
                        "single"
                    ]
                },
                {
                    "name": "space_multiple_catch",
                    "description": "Spacing to apply around type operator when catching exceptions of multiple types, use `null` to follow the value configured for `space`.",
                    "defaultValue": null,
                    "allowedValues": [
                        "none",
                        "single",
                        null
                    ]
                }
            ],
            "summary": "A single space or none should be around union type and intersection type operators.",
            "codeSamples": [
                {
                    "from": "<?php\ntry\n{\n    new Foo();\n} catch (ErrorA | ErrorB $e) {\necho'error';}\n",
                    "to": "<?php\ntry\n{\n    new Foo();\n} catch (ErrorA|ErrorB $e) {\necho'error';}\n"
                },
                {
                    "from": "<?php\ntry\n{\n    new Foo();\n} catch (ErrorA|ErrorB $e) {\necho'error';}\n",
                    "to": "<?php\ntry\n{\n    new Foo();\n} catch (ErrorA | ErrorB $e) {\necho'error';}\n",
                    "configuration": {
                        "space": "single"
                    }
                },
                {
                    "from": "<?php\nfunction foo(int | string $x)\n{\n}\n",
                    "to": "<?php\nfunction foo(int|string $x)\n{\n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Whitespace\\TypesSpacesFixer"
        },
        "unary_operator_spaces": {
            "summary": "Unary operators should be placed adjacent to their operands.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample ++;\n-- $sample;\n$sample = ! ! $a;\n$sample = ~  $c;\nfunction & foo(){}\n",
                    "to": "<?php\n$sample++;\n--$sample;\n$sample = !!$a;\n$sample = ~$c;\nfunction &foo(){}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\Operator\\UnaryOperatorSpacesFixer"
        },
        "use_arrow_functions": {
            "risky": true,
            "summary": "Anonymous functions with one-liner return statement must use arrow functions.",
            "riskyDescription": "Risky when using `isset()` on outside variables that are not imported with `use ()`.",
            "codeSamples": [
                {
                    "from": "<?php\nfoo(function ($a) use ($b) {\n    return $a + $b;\n});\n",
                    "to": "<?php\nfoo(fn ($a) => $a + $b);\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\UseArrowFunctionsFixer"
        },
        "visibility_required": {
            "configuration": [
                {
                    "name": "elements",
                    "description": "The structural elements to fix (PHP >= 7.1 required for `const`).",
                    "defaultValue": [
                        "property",
                        "method",
                        "const"
                    ],
                    "allowedTypes": [
                        "array"
                    ],
                    "allowedValues": [
                        [
                            "const",
                            "method",
                            "property"
                        ]
                    ]
                }
            ],
            "summary": "Visibility MUST be declared on all properties and methods; `abstract` and `final` MUST be declared before the visibility; `static` MUST be declared after the visibility.",
            "codeSamples": [
                {
                    "from": "<?php\nclass Sample\n{\n    var $a;\n    static protected $var_foo2;\n\n    function A()\n    {\n    }\n}\n",
                    "to": "<?php\nclass Sample\n{\n    public $a;\n    protected static $var_foo2;\n\n    public function A()\n    {\n    }\n}\n"
                },
                {
                    "from": "<?php\nclass Sample\n{\n    const SAMPLE = 1;\n}\n",
                    "to": "<?php\nclass Sample\n{\n    public const SAMPLE = 1;\n}\n",
                    "configuration": {
                        "elements": [
                            "const"
                        ]
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ClassNotation\\VisibilityRequiredFixer"
        },
        "void_return": {
            "risky": true,
            "summary": "Add `void` return type to functions with missing or empty return statements, but priority is given to `@return` annotations. Requires PHP >= 7.1.",
            "riskyDescription": "Modifies the signature of functions.",
            "codeSamples": [
                {
                    "from": "<?php\nfunction foo($a) {};\n",
                    "to": "<?php\nfunction foo($a): void {};\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\FunctionNotation\\VoidReturnFixer"
        },
        "whitespace_after_comma_in_array": {
            "configuration": [
                {
                    "name": "ensure_single_space",
                    "description": "If there are only horizontal whitespaces after the comma then ensure it is a single space.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                }
            ],
            "summary": "In array declaration, there MUST be a whitespace after each comma.",
            "codeSamples": [
                {
                    "from": "<?php\n$sample = array(1,'a',$b,);\n",
                    "to": "<?php\n$sample = array(1, 'a', $b, );\n"
                },
                {
                    "from": "<?php\n$sample = [1,2, 3,  4,    5];\n",
                    "to": "<?php\n$sample = [1, 2, 3, 4, 5];\n",
                    "configuration": {
                        "ensure_single_space": true
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\WhitespaceAfterCommaInArrayFixer"
        },
        "yield_from_array_to_yields": {
            "risky": true,
            "summary": "Yield from array must be unpacked to series of yields.",
            "description": "The conversion will make the array in `yield from` changed in arrays of 1 less dimension.",
            "riskyDescription": "The rule is risky in case of `yield from` being used multiple times within single function scope, while using list-alike data sources (e.g. `function foo() { yield from [\"a\"]; yield from [\"b\"]; }`). It only matters when consuming such iterator with key-value context, because set of yielded keys may be changed after applying this rule.",
            "codeSamples": [
                {
                    "from": "<?php function generate() {\n    yield from [\n        1,\n        2,\n        3,\n    ];\n}\n",
                    "to": "<?php function generate() {\n     \n        yield 1;\n        yield 2;\n        yield 3;\n    \n}\n"
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ArrayNotation\\YieldFromArrayToYieldsFixer"
        },
        "yoda_style": {
            "configuration": [
                {
                    "name": "always_move_variable",
                    "description": "Whether variables should always be on non assignable side when applying Yoda style.",
                    "defaultValue": false,
                    "allowedTypes": [
                        "bool"
                    ]
                },
                {
                    "name": "equal",
                    "description": "Style for equal (`==`, `!=`) statements.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool",
                        "null"
                    ]
                },
                {
                    "name": "identical",
                    "description": "Style for identical (`===`, `!==`) statements.",
                    "defaultValue": true,
                    "allowedTypes": [
                        "bool",
                        "null"
                    ]
                },
                {
                    "name": "less_and_greater",
                    "description": "Style for less and greater than (`<`, `<=`, `>`, `>=`) statements.",
                    "defaultValue": null,
                    "allowedTypes": [
                        "bool",
                        "null"
                    ]
                }
            ],
            "summary": "Write conditions in Yoda style (`true`), non-Yoda style (`['equal' => false, 'identical' => false, 'less_and_greater' => false]`) or ignore those conditions (`null`) based on configuration.",
            "codeSamples": [
                {
                    "from": "<?php\n    if ($a === null) {\n        echo \"null\";\n    }\n",
                    "to": "<?php\n    if (null === $a) {\n        echo \"null\";\n    }\n"
                },
                {
                    "from": "<?php\n    $b = $c != 1;  \/\/ equal\n    $a = 1 === $b; \/\/ identical\n    $c = $c > 3;   \/\/ less than\n",
                    "to": "<?php\n    $b = 1 != $c;  \/\/ equal\n    $a = $b === 1; \/\/ identical\n    $c = $c > 3;   \/\/ less than\n",
                    "configuration": {
                        "equal": true,
                        "identical": false,
                        "less_and_greater": null
                    }
                },
                {
                    "from": "<?php\nreturn $foo === count($bar);\n",
                    "to": "<?php\nreturn count($bar) === $foo;\n",
                    "configuration": {
                        "always_move_variable": true
                    }
                },
                {
                    "from": "<?php\n    \/\/ Enforce non-Yoda style.\n    if (null === $a) {\n        echo \"null\";\n    }\n",
                    "to": "<?php\n    \/\/ Enforce non-Yoda style.\n    if ($a === null) {\n        echo \"null\";\n    }\n",
                    "configuration": {
                        "equal": false,
                        "identical": false,
                        "less_and_greater": false
                    }
                }
            ],
            "fullClassName": "PhpCsFixer\\Fixer\\ControlStructure\\YodaStyleFixer"
        }
    },
    "sets": {
        "@DoctrineAnnotation": {
            "rules": {
                "doctrine_annotation_array_assignment": {
                    "operator": ":"
                },
                "doctrine_annotation_braces": null,
                "doctrine_annotation_indentation": null,
                "doctrine_annotation_spaces": {
                    "before_array_assignments_colon": false
                }
            },
            "description": "Rules covering Doctrine annotations with configuration based on examples found in `Doctrine Annotation documentation <https:\/\/www.doctrine-project.org\/projects\/doctrine-annotations\/en\/latest\/annotations.html>`_ and `Symfony documentation <https:\/\/symfony.com\/doc\/master\/bundles\/SensioFrameworkExtraBundle\/annotations\/routing.html>`_."
        },
        "@PER": {
            "rules": [],
            "extends": [
                "@PER-CS2.0"
            ],
            "description": "Alias for the PER-CS rules. It is recommended you use ``@PER-CS2.0`` instead."
        },
        "@PER-CS": {
            "rules": [],
            "extends": [
                "@PER-CS2.0"
            ],
            "description": "Alias for the latest revision of PER-CS rules. Use it if you always want to be in sync with newest PER-CS standard."
        },
        "@PER-CS1.0": {
            "rules": [],
            "extends": [
                "@PSR12"
            ],
            "description": "**This ruleset is deprecated** in favour of `@PER-CS2.0`.\n\nRules that follow `PER Coding Style 1.0 <https:\/\/www.php-fig.org\/per\/coding-style\/>`_."
        },
        "@PER-CS1.0:risky": {
            "rules": [],
            "extends": [
                "@PSR12:risky"
            ],
            "description": "**This ruleset is deprecated** in favour of `@PER-CS2.0:risky`.\n\nRules that follow `PER Coding Style 1.0 <https:\/\/www.php-fig.org\/per\/coding-style\/>`_.",
            "risky": true
        },
        "@PER-CS2.0": {
            "rules": {
                "concat_space": {
                    "spacing": "one"
                },
                "function_declaration": {
                    "closure_fn_spacing": "none"
                },
                "method_argument_space": null,
                "single_line_empty_body": null
            },
            "extends": [
                "@PER-CS1.0"
            ],
            "description": "Rules that follow `PER Coding Style 2.0 <https:\/\/www.php-fig.org\/per\/coding-style\/>`_."
        },
        "@PER-CS2.0:risky": {
            "rules": [],
            "extends": [
                "@PER-CS1.0:risky"
            ],
            "description": "Rules that follow `PER Coding Style 2.0 <https:\/\/www.php-fig.org\/per\/coding-style\/>`_.",
            "risky": true
        },
        "@PER-CS:risky": {
            "rules": [],
            "extends": [
                "@PER-CS2.0:risky"
            ],
            "description": "Alias for the latest revision of PER-CS risky rules. Use it if you always want to be in sync with newest PER-CS standard.",
            "risky": true
        },
        "@PER:risky": {
            "rules": [],
            "extends": [
                "@PER-CS2.0:risky"
            ],
            "description": "Alias for the PER-CS risky rules. It is recommended you use ``@PER-CS2.0:risky`` instead.",
            "risky": true
        },
        "@PHP54Migration": {
            "rules": {
                "array_syntax": null
            },
            "description": "Rules to improve code for PHP 5.4 compatibility."
        },
        "@PHP56Migration:risky": {
            "rules": {
                "pow_to_exponentiation": null
            },
            "description": "Rules to improve code for PHP 5.6 compatibility.",
            "risky": true
        },
        "@PHP70Migration": {
            "rules": {
                "ternary_to_null_coalescing": null
            },
            "extends": [
                "@PHP54Migration"
            ],
            "description": "Rules to improve code for PHP 7.0 compatibility."
        },
        "@PHP70Migration:risky": {
            "rules": {
                "combine_nested_dirname": null,
                "declare_strict_types": null,
                "non_printable_character": null,
                "random_api_migration": {
                    "replacements": {
                        "mt_rand": "random_int",
                        "rand": "random_int"
                    }
                }
            },
            "extends": [
                "@PHP56Migration:risky"
            ],
            "description": "Rules to improve code for PHP 7.0 compatibility.",
            "risky": true
        },
        "@PHP71Migration": {
            "rules": {
                "list_syntax": null,
                "visibility_required": null
            },
            "extends": [
                "@PHP70Migration"
            ],
            "description": "Rules to improve code for PHP 7.1 compatibility."
        },
        "@PHP71Migration:risky": {
            "rules": {
                "void_return": null
            },
            "extends": [
                "@PHP70Migration:risky"
            ],
            "description": "Rules to improve code for PHP 7.1 compatibility.",
            "risky": true
        },
        "@PHP73Migration": {
            "rules": {
                "heredoc_indentation": null,
                "method_argument_space": {
                    "after_heredoc": true
                },
                "no_whitespace_before_comma_in_array": {
                    "after_heredoc": true
                },
                "trailing_comma_in_multiline": {
                    "after_heredoc": true
                }
            },
            "extends": [
                "@PHP71Migration"
            ],
            "description": "Rules to improve code for PHP 7.3 compatibility."
        },
        "@PHP74Migration": {
            "rules": {
                "assign_null_coalescing_to_coalesce_equal": null,
                "normalize_index_brace": null,
                "short_scalar_cast": null
            },
            "extends": [
                "@PHP73Migration"
            ],
            "description": "Rules to improve code for PHP 7.4 compatibility."
        },
        "@PHP74Migration:risky": {
            "rules": {
                "implode_call": null,
                "no_alias_functions": null,
                "use_arrow_functions": null
            },
            "extends": [
                "@PHP71Migration:risky"
            ],
            "description": "Rules to improve code for PHP 7.4 compatibility.",
            "risky": true
        },
        "@PHP80Migration": {
            "rules": {
                "clean_namespace": null,
                "no_unset_cast": null
            },
            "extends": [
                "@PHP74Migration"
            ],
            "description": "Rules to improve code for PHP 8.0 compatibility."
        },
        "@PHP80Migration:risky": {
            "rules": {
                "get_class_to_class_keyword": null,
                "modernize_strpos": null,
                "no_alias_functions": {
                    "sets": [
                        "@all"
                    ]
                },
                "no_php4_constructor": null,
                "no_unneeded_final_method": null,
                "no_unreachable_default_argument_value": null
            },
            "extends": [
                "@PHP74Migration:risky"
            ],
            "description": "Rules to improve code for PHP 8.0 compatibility.",
            "risky": true
        },
        "@PHP81Migration": {
            "rules": {
                "octal_notation": null
            },
            "extends": [
                "@PHP80Migration"
            ],
            "description": "Rules to improve code for PHP 8.1 compatibility."
        },
        "@PHP82Migration": {
            "rules": {
                "simple_to_complex_string_variable": null
            },
            "extends": [
                "@PHP81Migration"
            ],
            "description": "Rules to improve code for PHP 8.2 compatibility."
        },
        "@PHP83Migration": {
            "rules": [],
            "extends": [
                "@PHP82Migration"
            ],
            "description": "Rules to improve code for PHP 8.3 compatibility."
        },
        "@PHPUnit30Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "3.0"
                }
            },
            "description": "Rules to improve tests code for PHPUnit 3.0 compatibility.",
            "risky": true
        },
        "@PHPUnit32Migration:risky": {
            "rules": {
                "php_unit_no_expectation_annotation": {
                    "target": "3.2"
                }
            },
            "extends": [
                "@PHPUnit30Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 3.2 compatibility.",
            "risky": true
        },
        "@PHPUnit35Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "3.5"
                }
            },
            "extends": [
                "@PHPUnit32Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 3.5 compatibility.",
            "risky": true
        },
        "@PHPUnit43Migration:risky": {
            "rules": {
                "php_unit_no_expectation_annotation": {
                    "target": "4.3"
                }
            },
            "extends": [
                "@PHPUnit35Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 4.3 compatibility.",
            "risky": true
        },
        "@PHPUnit48Migration:risky": {
            "rules": {
                "php_unit_namespaced": {
                    "target": "4.8"
                }
            },
            "extends": [
                "@PHPUnit43Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 4.8 compatibility.",
            "risky": true
        },
        "@PHPUnit50Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.0"
                }
            },
            "extends": [
                "@PHPUnit48Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 5.0 compatibility.",
            "risky": true
        },
        "@PHPUnit52Migration:risky": {
            "rules": {
                "php_unit_expectation": {
                    "target": "5.2"
                }
            },
            "extends": [
                "@PHPUnit50Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 5.2 compatibility.",
            "risky": true
        },
        "@PHPUnit54Migration:risky": {
            "rules": {
                "php_unit_mock": {
                    "target": "5.4"
                }
            },
            "extends": [
                "@PHPUnit52Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 5.4 compatibility.",
            "risky": true
        },
        "@PHPUnit55Migration:risky": {
            "rules": {
                "php_unit_mock": {
                    "target": "5.5"
                }
            },
            "extends": [
                "@PHPUnit54Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 5.5 compatibility.",
            "risky": true
        },
        "@PHPUnit56Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert": {
                    "target": "5.6"
                },
                "php_unit_expectation": {
                    "target": "5.6"
                }
            },
            "extends": [
                "@PHPUnit55Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 5.6 compatibility.",
            "risky": true
        },
        "@PHPUnit57Migration:risky": {
            "rules": {
                "php_unit_namespaced": {
                    "target": "5.7"
                }
            },
            "extends": [
                "@PHPUnit56Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 5.7 compatibility.",
            "risky": true
        },
        "@PHPUnit60Migration:risky": {
            "rules": {
                "php_unit_namespaced": {
                    "target": "6.0"
                }
            },
            "extends": [
                "@PHPUnit57Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 6.0 compatibility.",
            "risky": true
        },
        "@PHPUnit75Migration:risky": {
            "rules": {
                "php_unit_dedicate_assert_internal_type": {
                    "target": "7.5"
                }
            },
            "extends": [
                "@PHPUnit60Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 7.5 compatibility.",
            "risky": true
        },
        "@PHPUnit84Migration:risky": {
            "rules": {
                "php_unit_expectation": {
                    "target": "8.4"
                }
            },
            "extends": [
                "@PHPUnit60Migration:risky",
                "@PHPUnit75Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 8.4 compatibility.",
            "risky": true
        },
        "@PHPUnit100Migration:risky": {
            "rules": {
                "php_unit_data_provider_static": {
                    "force": true
                }
            },
            "extends": [
                "@PHPUnit84Migration:risky"
            ],
            "description": "Rules to improve tests code for PHPUnit 10.0 compatibility.",
            "risky": true
        },
        "@PSR1": {
            "rules": {
                "encoding": null,
                "full_opening_tag": null
            },
            "description": "Rules that follow `PSR-1 <https:\/\/www.php-fig.org\/psr\/psr-1\/>`_ standard."
        },
        "@PSR2": {
            "rules": {
                "blank_line_after_namespace": null,
                "braces_position": null,
                "class_definition": null,
                "constant_case": null,
                "control_structure_braces": null,
                "control_structure_continuation_position": null,
                "elseif": null,
                "function_declaration": null,
                "indentation_type": null,
                "line_ending": null,
                "lowercase_keywords": null,
                "method_argument_space": {
                    "attribute_placement": "ignore",
                    "on_multiline": "ensure_fully_multiline"
                },
                "no_break_comment": null,
                "no_closing_tag": null,
                "no_multiple_statements_per_line": null,
                "no_space_around_double_colon": null,
                "no_spaces_after_function_name": null,
                "no_trailing_whitespace": null,
                "no_trailing_whitespace_in_comment": null,
                "single_blank_line_at_eof": null,
                "single_class_element_per_statement": {
                    "elements": [
                        "property"
                    ]
                },
                "single_import_per_statement": null,
                "single_line_after_imports": null,
                "spaces_inside_parentheses": null,
                "statement_indentation": null,
                "switch_case_semicolon_to_colon": null,
                "switch_case_space": null,
                "visibility_required": {
                    "elements": [
                        "method",
                        "property"
                    ]
                }
            },
            "extends": [
                "@PSR1"
            ],
            "description": "Rules that follow `PSR-2 <https:\/\/www.php-fig.org\/psr\/psr-2\/>`_ standard."
        },
        "@PSR12": {
            "rules": {
                "binary_operator_spaces": {
                    "default": "at_least_single_space"
                },
                "blank_line_after_opening_tag": null,
                "blank_line_between_import_groups": null,
                "blank_lines_before_namespace": null,
                "braces_position": {
                    "allow_single_line_empty_anonymous_classes": true
                },
                "class_definition": {
                    "inline_constructor_arguments": false,
                    "space_before_parenthesis": true
                },
                "compact_nullable_type_declaration": null,
                "declare_equal_normalize": null,
                "lowercase_cast": null,
                "lowercase_static_reference": null,
                "new_with_parentheses": null,
                "no_blank_lines_after_class_opening": null,
                "no_leading_import_slash": null,
                "no_whitespace_in_blank_line": null,
                "ordered_class_elements": {
                    "order": [
                        "use_trait"
                    ]
                },
                "ordered_imports": {
                    "imports_order": [
                        "class",
                        "function",
                        "const"
                    ],
                    "sort_algorithm": "none"
                },
                "return_type_declaration": null,
                "short_scalar_cast": null,
                "single_import_per_statement": {
                    "group_to_single_imports": false
                },
                "single_trait_insert_per_statement": null,
                "ternary_operator_spaces": null,
                "unary_operator_spaces": null,
                "visibility_required": null
            },
            "extends": [
                "@PSR2"
            ],
            "description": "Rules that follow `PSR-12 <https:\/\/www.php-fig.org\/psr\/psr-12\/>`_ standard."
        },
        "@PSR12:risky": {
            "rules": {
                "no_trailing_whitespace_in_string": null,
                "no_unreachable_default_argument_value": null
            },
            "description": "Rules that follow `PSR-12 <https:\/\/www.php-fig.org\/psr\/psr-12\/>`_ standard.",
            "risky": true
        },
        "@PhpCsFixer": {
            "rules": {
                "array_indentation": null,
                "blank_line_before_statement": {
                    "statements": [
                        "break",
                        "case",
                        "continue",
                        "declare",
                        "default",
                        "exit",
                        "goto",
                        "include",
                        "include_once",
                        "phpdoc",
                        "require",
                        "require_once",
                        "return",
                        "switch",
                        "throw",
                        "try",
                        "yield",
                        "yield_from"
                    ]
                },
                "combine_consecutive_issets": null,
                "combine_consecutive_unsets": null,
                "empty_loop_body": null,
                "escape_implicit_backslashes": null,
                "explicit_indirect_variable": null,
                "explicit_string_variable": null,
                "heredoc_to_nowdoc": null,
                "method_argument_space": {
                    "on_multiline": "ensure_fully_multiline"
                },
                "method_chaining_indentation": null,
                "multiline_comment_opening_closing": null,
                "multiline_whitespace_before_semicolons": {
                    "strategy": "new_line_for_chained_calls"
                },
                "no_extra_blank_lines": {
                    "tokens": [
                        "attribute",
                        "break",
                        "case",
                        "continue",
                        "curly_brace_block",
                        "default",
                        "extra",
                        "parenthesis_brace_block",
                        "return",
                        "square_brace_block",
                        "switch",
                        "throw",
                        "use"
                    ]
                },
                "no_superfluous_elseif": null,
                "no_superfluous_phpdoc_tags": {
                    "allow_mixed": true,
                    "remove_inheritdoc": true
                },
                "no_unneeded_control_parentheses": {
                    "statements": [
                        "break",
                        "clone",
                        "continue",
                        "echo_print",
                        "negative_instanceof",
                        "others",
                        "return",
                        "switch_case",
                        "yield",
                        "yield_from"
                    ]
                },
                "no_useless_else": null,
                "no_useless_return": null,
                "nullable_type_declaration_for_default_null_value": false,
                "ordered_class_elements": null,
                "ordered_types": null,
                "php_unit_internal_class": null,
                "php_unit_test_class_requires_covers": null,
                "phpdoc_add_missing_param_annotation": null,
                "phpdoc_no_empty_return": null,
                "phpdoc_order_by_value": null,
                "phpdoc_types_order": null,
                "phpdoc_var_annotation_correct_order": null,
                "protected_to_private": null,
                "return_assignment": null,
                "self_static_accessor": null,
                "single_line_comment_style": null,
                "single_line_throw": false,
                "whitespace_after_comma_in_array": {
                    "ensure_single_space": true
                }
            },
            "extends": [
                "@PER-CS",
                "@Symfony"
            ],
            "description": "Rule set as used by the PHP-CS-Fixer development team, highly opinionated."
        },
        "@PhpCsFixer:risky": {
            "rules": {
                "comment_to_phpdoc": null,
                "final_internal_class": null,
                "get_class_to_class_keyword": false,
                "modernize_strpos": false,
                "native_constant_invocation": {
                    "fix_built_in": false,
                    "include": [
                        "DIRECTORY_SEPARATOR",
                        "PHP_INT_SIZE",
                        "PHP_SAPI",
                        "PHP_VERSION_ID"
                    ],
                    "scope": "namespaced",
                    "strict": true
                },
                "no_alias_functions": {
                    "sets": [
                        "@all"
                    ]
                },
                "no_unreachable_default_argument_value": null,
                "no_unset_on_property": null,
                "php_unit_data_provider_name": null,
                "php_unit_data_provider_return_type": null,
                "php_unit_strict": null,
                "php_unit_test_case_static_method_calls": {
                    "call_type": "self"
                },
                "static_lambda": null,
                "strict_comparison": null,
                "strict_param": null,
                "yield_from_array_to_yields": null
            },
            "extends": [
                "@PER-CS:risky",
                "@Symfony:risky"
            ],
            "description": "Rule set as used by the PHP-CS-Fixer development team, highly opinionated.",
            "risky": true
        },
        "@Symfony": {
            "rules": {
                "align_multiline_comment": null,
                "array_syntax": null,
                "backtick_to_shell_exec": null,
                "binary_operator_spaces": null,
                "blank_line_before_statement": {
                    "statements": [
                        "return"
                    ]
                },
                "braces_position": {
                    "allow_single_line_anonymous_functions": true,
                    "allow_single_line_empty_anonymous_classes": true
                },
                "cast_spaces": null,
                "class_attributes_separation": {
                    "elements": {
                        "method": "one"
                    }
                },
                "class_definition": {
                    "single_line": true
                },
                "class_reference_name_casing": null,
                "clean_namespace": null,
                "concat_space": null,
                "declare_parentheses": null,
                "echo_tag_syntax": null,
                "empty_loop_body": {
                    "style": "braces"
                },
                "empty_loop_condition": null,
                "fully_qualified_strict_types": null,
                "general_phpdoc_tag_rename": {
                    "replacements": {
                        "inheritDocs": "inheritDoc"
                    }
                },
                "global_namespace_import": {
                    "import_classes": false,
                    "import_constants": false,
                    "import_functions": false
                },
                "include": null,
                "increment_style": null,
                "integer_literal_case": null,
                "lambda_not_used_import": null,
                "linebreak_after_opening_tag": null,
                "magic_constant_casing": null,
                "magic_method_casing": null,
                "method_argument_space": {
                    "on_multiline": "ignore"
                },
                "native_function_casing": null,
                "native_type_declaration_casing": null,
                "no_alias_language_construct_call": null,
                "no_alternative_syntax": null,
                "no_binary_string": null,
                "no_blank_lines_after_phpdoc": null,
                "no_empty_comment": null,
                "no_empty_phpdoc": null,
                "no_empty_statement": null,
                "no_extra_blank_lines": {
                    "tokens": [
                        "attribute",
                        "case",
                        "continue",
                        "curly_brace_block",
                        "default",
                        "extra",
                        "parenthesis_brace_block",
                        "square_brace_block",
                        "switch",
                        "throw",
                        "use"
                    ]
                },
                "no_leading_namespace_whitespace": null,
                "no_mixed_echo_print": null,
                "no_multiline_whitespace_around_double_arrow": null,
                "no_null_property_initialization": null,
                "no_short_bool_cast": null,
                "no_singleline_whitespace_before_semicolons": null,
                "no_spaces_around_offset": null,
                "no_superfluous_phpdoc_tags": {
                    "remove_inheritdoc": true
                },
                "no_trailing_comma_in_singleline": null,
                "no_unneeded_braces": {
                    "namespaces": true
                },
                "no_unneeded_control_parentheses": {
                    "statements": [
                        "break",
                        "clone",
                        "continue",
                        "echo_print",
                        "others",
                        "return",
                        "switch_case",
                        "yield",
                        "yield_from"
                    ]
                },
                "no_unneeded_import_alias": null,
                "no_unset_cast": null,
                "no_unused_imports": null,
                "no_useless_concat_operator": null,
                "no_useless_nullsafe_operator": null,
                "no_whitespace_before_comma_in_array": null,
                "normalize_index_brace": null,
                "nullable_type_declaration_for_default_null_value": {
                    "use_nullable_type_declaration": false
                },
                "object_operator_without_whitespace": null,
                "operator_linebreak": {
                    "only_booleans": true
                },
                "ordered_imports": {
                    "imports_order": [
                        "class",
                        "function",
                        "const"
                    ],
                    "sort_algorithm": "alpha"
                },
                "php_unit_fqcn_annotation": null,
                "php_unit_method_casing": null,
                "phpdoc_align": null,
                "phpdoc_annotation_without_dot": null,
                "phpdoc_indent": null,
                "phpdoc_inline_tag_normalizer": null,
                "phpdoc_no_access": null,
                "phpdoc_no_alias_tag": null,
                "phpdoc_no_package": null,
                "phpdoc_no_useless_inheritdoc": null,
                "phpdoc_order": {
                    "order": [
                        "param",
                        "return",
                        "throws"
                    ]
                },
                "phpdoc_return_self_reference": null,
                "phpdoc_scalar": null,
                "phpdoc_separation": {
                    "groups": [
                        [
                            "Annotation",
                            "NamedArgumentConstructor",
                            "Target"
                        ],
                        [
                            "author",
                            "copyright",
                            "license"
                        ],
                        [
                            "category",
                            "package",
                            "subpackage"
                        ],
                        [
                            "property",
                            "property-read",
                            "property-write"
                        ],
                        [
                            "deprecated",
                            "link",
                            "see",
                            "since"
                        ]
                    ]
                },
                "phpdoc_single_line_var_spacing": null,
                "phpdoc_summary": null,
                "phpdoc_tag_type": {
                    "tags": {
                        "inheritDoc": "inline"
                    }
                },
                "phpdoc_to_comment": null,
                "phpdoc_trim": null,
                "phpdoc_trim_consecutive_blank_line_separation": null,
                "phpdoc_types": null,
                "phpdoc_types_order": {
                    "null_adjustment": "always_last",
                    "sort_algorithm": "none"
                },
                "phpdoc_var_without_name": null,
                "semicolon_after_instruction": null,
                "simple_to_complex_string_variable": null,
                "single_class_element_per_statement": null,
                "single_import_per_statement": null,
                "single_line_comment_spacing": null,
                "single_line_comment_style": {
                    "comment_types": [
                        "hash"
                    ]
                },
                "single_line_throw": null,
                "single_quote": null,
                "single_space_around_construct": null,
                "space_after_semicolon": {
                    "remove_in_empty_for_expressions": true
                },
                "standardize_increment": null,
                "standardize_not_equals": null,
                "switch_continue_to_break": null,
                "trailing_comma_in_multiline": null,
                "trim_array_spaces": null,
                "type_declaration_spaces": null,
                "types_spaces": null,
                "whitespace_after_comma_in_array": null,
                "yoda_style": null
            },
            "extends": [
                "@PSR12"
            ],
            "description": "Rules that follow the official `Symfony Coding Standards <https:\/\/symfony.com\/doc\/current\/contributing\/code\/standards.html>`_."
        },
        "@Symfony:risky": {
            "rules": {
                "array_push": null,
                "combine_nested_dirname": null,
                "dir_constant": null,
                "ereg_to_preg": null,
                "error_suppression": null,
                "fopen_flag_order": null,
                "fopen_flags": {
                    "b_mode": false
                },
                "function_to_constant": null,
                "get_class_to_class_keyword": null,
                "implode_call": null,
                "is_null": null,
                "logical_operators": null,
                "long_to_shorthand_operator": null,
                "modernize_strpos": null,
                "modernize_types_casting": null,
                "native_constant_invocation": {
                    "strict": false
                },
                "native_function_invocation": {
                    "include": [
                        "@compiler_optimized"
                    ],
                    "scope": "namespaced",
                    "strict": true
                },
                "no_alias_functions": null,
                "no_homoglyph_names": null,
                "no_php4_constructor": null,
                "no_unneeded_final_method": null,
                "no_unreachable_default_argument_value": false,
                "no_useless_sprintf": null,
                "non_printable_character": null,
                "ordered_traits": null,
                "php_unit_construct": null,
                "php_unit_mock_short_will_return": null,
                "php_unit_set_up_tear_down_visibility": null,
                "php_unit_test_annotation": null,
                "psr_autoloading": null,
                "self_accessor": null,
                "set_type_to_cast": null,
                "string_length_to_empty": null,
                "string_line_ending": null,
                "ternary_to_elvis_operator": null
            },
            "extends": [
                "@PHP56Migration:risky",
                "@PSR12:risky"
            ],
            "description": "Rules that follow the official `Symfony Coding Standards <https:\/\/symfony.com\/doc\/current\/contributing\/code\/standards.html>`_.",
            "risky": true
        }
    }
}